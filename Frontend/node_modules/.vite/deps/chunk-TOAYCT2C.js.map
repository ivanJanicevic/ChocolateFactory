{
  "version": 3,
  "sources": ["../../ol/reproj/common.js", "../../ol/reproj/Triangulation.js", "../../ol/reproj.js", "../../ol/reproj/Tile.js"],
  "sourcesContent": ["/**\r\n * @module ol/reproj/common\r\n */\r\n\r\n/**\r\n * Default maximum allowed threshold  (in pixels) for reprojection\r\n * triangulation.\r\n * @type {number}\r\n */\r\nexport const ERROR_THRESHOLD = 0.5;\r\n", "/**\r\n * @module ol/reproj/Triangulation\r\n */\r\nimport {\r\n  boundingExtent,\r\n  createEmpty,\r\n  extendCoordinate,\r\n  getArea,\r\n  getBottomLeft,\r\n  getBottomRight,\r\n  getTopLeft,\r\n  getTopRight,\r\n  getWidth,\r\n  intersects,\r\n} from '../extent.js';\r\nimport {getTransform} from '../proj.js';\r\nimport {modulo} from '../math.js';\r\n\r\n/**\r\n * Single triangle; consists of 3 source points and 3 target points.\r\n * @typedef {Object} Triangle\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\r\n */\r\n\r\n/**\r\n * Maximum number of subdivision steps during raster reprojection triangulation.\r\n * Prevents high memory usage and large number of proj4 calls (for certain\r\n * transformations and areas). At most `2*(2^this)` triangles are created for\r\n * each triangulated extent (tile/image).\r\n * @type {number}\r\n */\r\nconst MAX_SUBDIVISION = 10;\r\n\r\n/**\r\n * Maximum allowed size of triangle relative to world width. When transforming\r\n * corners of world extent between certain projections, the resulting\r\n * triangulation seems to have zero error and no subdivision is performed. If\r\n * the triangle width is more than this (relative to world width; 0-1),\r\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\r\n * @type {number}\r\n */\r\nconst MAX_TRIANGLE_WIDTH = 0.25;\r\n\r\n/**\r\n * @classdesc\r\n * Class containing triangulation of the given target extent.\r\n * Used for determining source data and the reprojection itself.\r\n */\r\nclass Triangulation {\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\r\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\r\n   * @param {number} errorThreshold Acceptable error (in source units).\r\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\r\n   */\r\n  constructor(\r\n    sourceProj,\r\n    targetProj,\r\n    targetExtent,\r\n    maxSourceExtent,\r\n    errorThreshold,\r\n    destinationResolution,\r\n  ) {\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     * @private\r\n     */\r\n    this.sourceProj_ = sourceProj;\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     * @private\r\n     */\r\n    this.targetProj_ = targetProj;\r\n\r\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\r\n    let transformInvCache = {};\r\n    const transformInv = getTransform(this.targetProj_, this.sourceProj_);\r\n\r\n    /**\r\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\r\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\r\n     * @private\r\n     */\r\n    this.transformInv_ = function (c) {\r\n      const key = c[0] + '/' + c[1];\r\n      if (!transformInvCache[key]) {\r\n        transformInvCache[key] = transformInv(c);\r\n      }\r\n      return transformInvCache[key];\r\n    };\r\n\r\n    /**\r\n     * @type {import(\"../extent.js\").Extent}\r\n     * @private\r\n     */\r\n    this.maxSourceExtent_ = maxSourceExtent;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\r\n\r\n    /**\r\n     * @type {Array<Triangle>}\r\n     * @private\r\n     */\r\n    this.triangles_ = [];\r\n\r\n    /**\r\n     * Indicates that the triangulation crosses edge of the source projection.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.wrapsXInSource_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.canWrapXInSource_ =\r\n      this.sourceProj_.canWrapX() &&\r\n      !!maxSourceExtent &&\r\n      !!this.sourceProj_.getExtent() &&\r\n      getWidth(maxSourceExtent) >= getWidth(this.sourceProj_.getExtent());\r\n\r\n    /**\r\n     * @type {?number}\r\n     * @private\r\n     */\r\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent()\r\n      ? getWidth(this.sourceProj_.getExtent())\r\n      : null;\r\n\r\n    /**\r\n     * @type {?number}\r\n     * @private\r\n     */\r\n    this.targetWorldWidth_ = this.targetProj_.getExtent()\r\n      ? getWidth(this.targetProj_.getExtent())\r\n      : null;\r\n\r\n    const destinationTopLeft = getTopLeft(targetExtent);\r\n    const destinationTopRight = getTopRight(targetExtent);\r\n    const destinationBottomRight = getBottomRight(targetExtent);\r\n    const destinationBottomLeft = getBottomLeft(targetExtent);\r\n    const sourceTopLeft = this.transformInv_(destinationTopLeft);\r\n    const sourceTopRight = this.transformInv_(destinationTopRight);\r\n    const sourceBottomRight = this.transformInv_(destinationBottomRight);\r\n    const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\r\n\r\n    /*\r\n     * The maxSubdivision controls how many splittings of the target area can\r\n     * be done. The idea here is to do a linear mapping of the target areas\r\n     * but the actual overall reprojection (can be) extremely non-linear. The\r\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\r\n     * tile size. However this function is also called to remap canvas rendered\r\n     * layers which can be much larger. This calculation increases the maxSubdivision\r\n     * value by the right factor so that each 256x256 pixel area has\r\n     * MAX_SUBDIVISION divisions.\r\n     */\r\n    const maxSubdivision =\r\n      MAX_SUBDIVISION +\r\n      (destinationResolution\r\n        ? Math.max(\r\n            0,\r\n            Math.ceil(\r\n              Math.log2(\r\n                getArea(targetExtent) /\r\n                  (destinationResolution * destinationResolution * 256 * 256),\r\n              ),\r\n            ),\r\n          )\r\n        : 0);\r\n\r\n    this.addQuad_(\r\n      destinationTopLeft,\r\n      destinationTopRight,\r\n      destinationBottomRight,\r\n      destinationBottomLeft,\r\n      sourceTopLeft,\r\n      sourceTopRight,\r\n      sourceBottomRight,\r\n      sourceBottomLeft,\r\n      maxSubdivision,\r\n    );\r\n\r\n    if (this.wrapsXInSource_) {\r\n      let leftBound = Infinity;\r\n      this.triangles_.forEach(function (triangle, i, arr) {\r\n        leftBound = Math.min(\r\n          leftBound,\r\n          triangle.source[0][0],\r\n          triangle.source[1][0],\r\n          triangle.source[2][0],\r\n        );\r\n      });\r\n\r\n      // Shift triangles to be as close to `leftBound` as possible\r\n      // (if the distance is more than `worldWidth / 2` it can be closer.\r\n      this.triangles_.forEach((triangle) => {\r\n        if (\r\n          Math.max(\r\n            triangle.source[0][0],\r\n            triangle.source[1][0],\r\n            triangle.source[2][0],\r\n          ) -\r\n            leftBound >\r\n          this.sourceWorldWidth_ / 2\r\n        ) {\r\n          const newTriangle = [\r\n            [triangle.source[0][0], triangle.source[0][1]],\r\n            [triangle.source[1][0], triangle.source[1][1]],\r\n            [triangle.source[2][0], triangle.source[2][1]],\r\n          ];\r\n          if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[0][0] -= this.sourceWorldWidth_;\r\n          }\r\n          if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[1][0] -= this.sourceWorldWidth_;\r\n          }\r\n          if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[2][0] -= this.sourceWorldWidth_;\r\n          }\r\n\r\n          // Rarely (if the extent contains both the dateline and prime meridian)\r\n          // the shift can in turn break some triangles.\r\n          // Detect this here and don't shift in such cases.\r\n          const minX = Math.min(\r\n            newTriangle[0][0],\r\n            newTriangle[1][0],\r\n            newTriangle[2][0],\r\n          );\r\n          const maxX = Math.max(\r\n            newTriangle[0][0],\r\n            newTriangle[1][0],\r\n            newTriangle[2][0],\r\n          );\r\n          if (maxX - minX < this.sourceWorldWidth_ / 2) {\r\n            triangle.source = newTriangle;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    transformInvCache = {};\r\n  }\r\n\r\n  /**\r\n   * Adds triangle to the triangulation.\r\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\r\n   * @private\r\n   */\r\n  addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\r\n    this.triangles_.push({\r\n      source: [aSrc, bSrc, cSrc],\r\n      target: [a, b, c],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds quad (points in clock-wise order) to the triangulation\r\n   * (and reprojects the vertices) if valid.\r\n   * Performs quad subdivision if needed to increase precision.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\r\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\r\n   * @private\r\n   */\r\n  addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\r\n    const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\r\n    const sourceCoverageX = this.sourceWorldWidth_\r\n      ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_\r\n      : null;\r\n    const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\r\n\r\n    // when the quad is wrapped in the source projection\r\n    // it covers most of the projection extent, but not fully\r\n    const wrapsX =\r\n      this.sourceProj_.canWrapX() &&\r\n      sourceCoverageX > 0.5 &&\r\n      sourceCoverageX < 1;\r\n\r\n    let needsSubdivision = false;\r\n\r\n    if (maxSubdivision > 0) {\r\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\r\n        const targetQuadExtent = boundingExtent([a, b, c, d]);\r\n        const targetCoverageX =\r\n          getWidth(targetQuadExtent) / this.targetWorldWidth_;\r\n        needsSubdivision =\r\n          targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\r\n      }\r\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\r\n        needsSubdivision =\r\n          sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\r\n      }\r\n    }\r\n\r\n    if (!needsSubdivision && this.maxSourceExtent_) {\r\n      if (\r\n        isFinite(sourceQuadExtent[0]) &&\r\n        isFinite(sourceQuadExtent[1]) &&\r\n        isFinite(sourceQuadExtent[2]) &&\r\n        isFinite(sourceQuadExtent[3])\r\n      ) {\r\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\r\n          // whole quad outside source projection extent -> ignore\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    let isNotFinite = 0;\r\n\r\n    if (!needsSubdivision) {\r\n      if (\r\n        !isFinite(aSrc[0]) ||\r\n        !isFinite(aSrc[1]) ||\r\n        !isFinite(bSrc[0]) ||\r\n        !isFinite(bSrc[1]) ||\r\n        !isFinite(cSrc[0]) ||\r\n        !isFinite(cSrc[1]) ||\r\n        !isFinite(dSrc[0]) ||\r\n        !isFinite(dSrc[1])\r\n      ) {\r\n        if (maxSubdivision > 0) {\r\n          needsSubdivision = true;\r\n        } else {\r\n          // It might be the case that only 1 of the points is infinite. In this case\r\n          // we can draw a single triangle with the other three points\r\n          isNotFinite =\r\n            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +\r\n            (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +\r\n            (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +\r\n            (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\r\n          if (\r\n            isNotFinite != 1 &&\r\n            isNotFinite != 2 &&\r\n            isNotFinite != 4 &&\r\n            isNotFinite != 8\r\n          ) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (maxSubdivision > 0) {\r\n      if (!needsSubdivision) {\r\n        const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\r\n        const centerSrc = this.transformInv_(center);\r\n\r\n        let dx;\r\n        if (wrapsX) {\r\n          const centerSrcEstimX =\r\n            (modulo(aSrc[0], sourceWorldWidth) +\r\n              modulo(cSrc[0], sourceWorldWidth)) /\r\n            2;\r\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\r\n        } else {\r\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\r\n        }\r\n        const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\r\n        const centerSrcErrorSquared = dx * dx + dy * dy;\r\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\r\n      }\r\n      if (needsSubdivision) {\r\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\r\n          // split horizontally (top & bottom)\r\n          const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\r\n          const bcSrc = this.transformInv_(bc);\r\n          const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\r\n          const daSrc = this.transformInv_(da);\r\n\r\n          this.addQuad_(\r\n            a,\r\n            b,\r\n            bc,\r\n            da,\r\n            aSrc,\r\n            bSrc,\r\n            bcSrc,\r\n            daSrc,\r\n            maxSubdivision - 1,\r\n          );\r\n          this.addQuad_(\r\n            da,\r\n            bc,\r\n            c,\r\n            d,\r\n            daSrc,\r\n            bcSrc,\r\n            cSrc,\r\n            dSrc,\r\n            maxSubdivision - 1,\r\n          );\r\n        } else {\r\n          // split vertically (left & right)\r\n          const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\r\n          const abSrc = this.transformInv_(ab);\r\n          const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\r\n          const cdSrc = this.transformInv_(cd);\r\n\r\n          this.addQuad_(\r\n            a,\r\n            ab,\r\n            cd,\r\n            d,\r\n            aSrc,\r\n            abSrc,\r\n            cdSrc,\r\n            dSrc,\r\n            maxSubdivision - 1,\r\n          );\r\n          this.addQuad_(\r\n            ab,\r\n            b,\r\n            c,\r\n            cd,\r\n            abSrc,\r\n            bSrc,\r\n            cSrc,\r\n            cdSrc,\r\n            maxSubdivision - 1,\r\n          );\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (wrapsX) {\r\n      if (!this.canWrapXInSource_) {\r\n        return;\r\n      }\r\n      this.wrapsXInSource_ = true;\r\n    }\r\n\r\n    // Exactly zero or one of *Src is not finite\r\n    // The triangles must have the diagonal line as the first side\r\n    // This is to allow easy code in reproj.s to make it straight for broken\r\n    // browsers that can't handle diagonal clipping\r\n    if ((isNotFinite & 0xb) == 0) {\r\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\r\n    }\r\n    if ((isNotFinite & 0xe) == 0) {\r\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\r\n    }\r\n    if (isNotFinite) {\r\n      // Try the other two triangles\r\n      if ((isNotFinite & 0xd) == 0) {\r\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\r\n      }\r\n      if ((isNotFinite & 0x7) == 0) {\r\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates extent of the `source` coordinates from all the triangles.\r\n   *\r\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\r\n   */\r\n  calculateSourceExtent() {\r\n    const extent = createEmpty();\r\n\r\n    this.triangles_.forEach(function (triangle, i, arr) {\r\n      const src = triangle.source;\r\n      extendCoordinate(extent, src[0]);\r\n      extendCoordinate(extent, src[1]);\r\n      extendCoordinate(extent, src[2]);\r\n    });\r\n\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Triangle>} Array of the calculated triangles.\r\n   */\r\n  getTriangles() {\r\n    return this.triangles_;\r\n  }\r\n}\r\n\r\nexport default Triangulation;\r\n", "/**\r\n * @module ol/reproj\r\n */\r\nimport {\r\n  containsCoordinate,\r\n  createEmpty,\r\n  extend,\r\n  forEachCorner,\r\n  getCenter,\r\n  getHeight,\r\n  getTopLeft,\r\n  getWidth,\r\n} from './extent.js';\r\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\r\nimport {getPointResolution, transform} from './proj.js';\r\nimport {solveLinearSystem} from './math.js';\r\n\r\nlet brokenDiagonalRendering_;\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nexport const canvasPool = [];\r\n\r\n/**\r\n * This draws a small triangle into a canvas by setting the triangle as the clip region\r\n * and then drawing a (too large) rectangle\r\n *\r\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\r\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\r\n * @param {number} v1 The y-coordinate of the second point.\r\n * @param {number} u2 The x-coordinate of the third point.\r\n * @param {number} v2 The y-coordinate of the third point.\r\n */\r\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, 0);\r\n  ctx.lineTo(u1, v1);\r\n  ctx.lineTo(u2, v2);\r\n  ctx.closePath();\r\n  ctx.save();\r\n  ctx.clip();\r\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * Given the data from getImageData, see if the right values appear at the provided offset.\r\n * Returns true if either the color or transparency is off\r\n *\r\n * @param {Uint8ClampedArray} data The data returned from getImageData\r\n * @param {number} offset The pixel offset from the start of data.\r\n * @return {boolean} true if the diagonal rendering is broken\r\n */\r\nfunction verifyBrokenDiagonalRendering(data, offset) {\r\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\r\n  return (\r\n    Math.abs(data[offset * 4] - 210) > 2 ||\r\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\r\n  );\r\n}\r\n\r\n/**\r\n * Determines if the current browser configuration can render triangular clip regions correctly.\r\n * This value is cached so the function is only expensive the first time called.\r\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\r\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\r\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\r\n * running, but lets hope not.\r\n *\r\n * @return {boolean} true if the Diagonal Rendering is broken.\r\n */\r\nfunction isBrokenDiagonalRendering() {\r\n  if (brokenDiagonalRendering_ === undefined) {\r\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\r\n    ctx.globalCompositeOperation = 'lighter';\r\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\r\n    drawTestTriangle(ctx, 4, 5, 4, 0);\r\n    drawTestTriangle(ctx, 4, 5, 0, 5);\r\n    const data = ctx.getImageData(0, 0, 3, 3).data;\r\n    brokenDiagonalRendering_ =\r\n      verifyBrokenDiagonalRendering(data, 0) ||\r\n      verifyBrokenDiagonalRendering(data, 4) ||\r\n      verifyBrokenDiagonalRendering(data, 8);\r\n    releaseCanvas(ctx);\r\n    canvasPool.push(ctx.canvas);\r\n  }\r\n\r\n  return brokenDiagonalRendering_;\r\n}\r\n\r\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\r\nexport function calculateSourceResolution(\r\n  sourceProj,\r\n  targetProj,\r\n  targetCenter,\r\n  targetResolution,\r\n) {\r\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\r\n\r\n  // calculate the ideal resolution of the source data\r\n  let sourceResolution = getPointResolution(\r\n    targetProj,\r\n    targetResolution,\r\n    targetCenter,\r\n  );\r\n\r\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\r\n  if (targetMetersPerUnit !== undefined) {\r\n    sourceResolution *= targetMetersPerUnit;\r\n  }\r\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\r\n  if (sourceMetersPerUnit !== undefined) {\r\n    sourceResolution /= sourceMetersPerUnit;\r\n  }\r\n\r\n  // Based on the projection properties, the point resolution at the specified\r\n  // coordinates may be slightly different. We need to reverse-compensate this\r\n  // in order to achieve optimal results.\r\n\r\n  const sourceExtent = sourceProj.getExtent();\r\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\r\n    const compensationFactor =\r\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\r\n      sourceResolution;\r\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\r\n      sourceResolution /= compensationFactor;\r\n    }\r\n  }\r\n\r\n  return sourceResolution;\r\n}\r\n\r\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\r\nexport function calculateSourceExtentResolution(\r\n  sourceProj,\r\n  targetProj,\r\n  targetExtent,\r\n  targetResolution,\r\n) {\r\n  const targetCenter = getCenter(targetExtent);\r\n  let sourceResolution = calculateSourceResolution(\r\n    sourceProj,\r\n    targetProj,\r\n    targetCenter,\r\n    targetResolution,\r\n  );\r\n\r\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\r\n    forEachCorner(targetExtent, function (corner) {\r\n      sourceResolution = calculateSourceResolution(\r\n        sourceProj,\r\n        targetProj,\r\n        corner,\r\n        targetResolution,\r\n      );\r\n      return isFinite(sourceResolution) && sourceResolution > 0;\r\n    });\r\n  }\r\n\r\n  return sourceResolution;\r\n}\r\n\r\n/**\r\n * @typedef {Object} ImageExtent\r\n * @property {import(\"./extent.js\").Extent} extent Extent.\r\n * @property {import(\"./extent.js\").Extent} [clipExtent] Clip extent.\r\n * @property {import('./DataTile.js').ImageLike} image Image.\r\n */\r\n\r\n/**\r\n * Renders the source data into new canvas based on the triangulation.\r\n *\r\n * @param {number} width Width of the canvas.\r\n * @param {number} height Height of the canvas.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {number} sourceResolution Source resolution.\r\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\r\n * @param {number} targetResolution Target resolution.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\r\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\r\n * @param {Array<ImageExtent>} sources Array of sources.\r\n * @param {number} gutter Gutter of the sources.\r\n * @param {boolean} [renderEdges] Render reprojection edges.\r\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\r\n * @param {boolean} [drawSingle] Draw single source images directly without stitchContext.\r\n * @param {boolean} [clipExtent] Clip stitchContext to sourceExtent.\r\n * @return {HTMLCanvasElement} Canvas with reprojected data.\r\n */\r\nexport function render(\r\n  width,\r\n  height,\r\n  pixelRatio,\r\n  sourceResolution,\r\n  sourceExtent,\r\n  targetResolution,\r\n  targetExtent,\r\n  triangulation,\r\n  sources,\r\n  gutter,\r\n  renderEdges,\r\n  interpolate,\r\n  drawSingle,\r\n  clipExtent,\r\n) {\r\n  const context = createCanvasContext2D(\r\n    Math.round(pixelRatio * width),\r\n    Math.round(pixelRatio * height),\r\n    canvasPool,\r\n  );\r\n\r\n  if (!interpolate) {\r\n    context.imageSmoothingEnabled = false;\r\n  }\r\n\r\n  if (sources.length === 0) {\r\n    return context.canvas;\r\n  }\r\n\r\n  context.scale(pixelRatio, pixelRatio);\r\n\r\n  function pixelRound(value) {\r\n    return Math.round(value * pixelRatio) / pixelRatio;\r\n  }\r\n\r\n  context.globalCompositeOperation = 'lighter';\r\n\r\n  const sourceDataExtent = createEmpty();\r\n  sources.forEach(function (src, i, arr) {\r\n    extend(sourceDataExtent, src.extent);\r\n  });\r\n\r\n  let stitchContext;\r\n  const stitchScale = pixelRatio / sourceResolution;\r\n  // Round up Float32 scale values to prevent interpolation in Firefox.\r\n  const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;\r\n\r\n  if (!drawSingle || sources.length !== 1 || gutter !== 0) {\r\n    stitchContext = createCanvasContext2D(\r\n      Math.round(getWidth(sourceDataExtent) * stitchScale),\r\n      Math.round(getHeight(sourceDataExtent) * stitchScale),\r\n      canvasPool,\r\n    );\r\n\r\n    if (!interpolate) {\r\n      stitchContext.imageSmoothingEnabled = false;\r\n    }\r\n    if (sourceExtent && clipExtent) {\r\n      const xPos = (sourceExtent[0] - sourceDataExtent[0]) * stitchScale;\r\n      const yPos = -(sourceExtent[3] - sourceDataExtent[3]) * stitchScale;\r\n      const width = getWidth(sourceExtent) * stitchScale;\r\n      const height = getHeight(sourceExtent) * stitchScale;\r\n      stitchContext.rect(xPos, yPos, width, height);\r\n      stitchContext.clip();\r\n    }\r\n\r\n    sources.forEach(function (src, i, arr) {\r\n      // This test should never fail -- but it does. Need to find a fix the upstream condition\r\n      if (src.image.width > 0 && src.image.height > 0) {\r\n        if (src.clipExtent) {\r\n          stitchContext.save();\r\n          const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;\r\n          const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;\r\n          const width = getWidth(src.clipExtent) * stitchScale;\r\n          const height = getHeight(src.clipExtent) * stitchScale;\r\n          stitchContext.rect(\r\n            interpolate ? xPos : Math.round(xPos),\r\n            interpolate ? yPos : Math.round(yPos),\r\n            interpolate ? width : Math.round(xPos + width) - Math.round(xPos),\r\n            interpolate ? height : Math.round(yPos + height) - Math.round(yPos),\r\n          );\r\n          stitchContext.clip();\r\n        }\r\n\r\n        const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;\r\n        const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;\r\n        const srcWidth = getWidth(src.extent) * stitchScale;\r\n        const srcHeight = getHeight(src.extent) * stitchScale;\r\n        stitchContext.drawImage(\r\n          src.image,\r\n          gutter,\r\n          gutter,\r\n          src.image.width - 2 * gutter,\r\n          src.image.height - 2 * gutter,\r\n          interpolate ? xPos : Math.round(xPos),\r\n          interpolate ? yPos : Math.round(yPos),\r\n          interpolate\r\n            ? srcWidth\r\n            : Math.round(xPos + srcWidth) - Math.round(xPos),\r\n          interpolate\r\n            ? srcHeight\r\n            : Math.round(yPos + srcHeight) - Math.round(yPos),\r\n        );\r\n\r\n        if (src.clipExtent) {\r\n          stitchContext.restore();\r\n        }\r\n      }\r\n    });\r\n  }\r\n  const targetTopLeft = getTopLeft(targetExtent);\r\n\r\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\r\n    /* Calculate affine transform (src -> dst)\r\n     * Resulting matrix can be used to transform coordinate\r\n     * from `sourceProjection` to destination pixels.\r\n     *\r\n     * To optimize number of context calls and increase numerical stability,\r\n     * we also do the following operations:\r\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\r\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\r\n     *\r\n     * Src points: xi, yi\r\n     * Dst points: ui, vi\r\n     * Affine coefficients: aij\r\n     *\r\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\r\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\r\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\r\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\r\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\r\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\r\n     */\r\n    const source = triangle.source;\r\n    const target = triangle.target;\r\n    let x0 = source[0][0],\r\n      y0 = source[0][1];\r\n    let x1 = source[1][0],\r\n      y1 = source[1][1];\r\n    let x2 = source[2][0],\r\n      y2 = source[2][1];\r\n    // Make sure that everything is on pixel boundaries\r\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\r\n    const v0 = pixelRound(\r\n      -(target[0][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\r\n    const v1 = pixelRound(\r\n      -(target[1][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\r\n    const v2 = pixelRound(\r\n      -(target[2][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n\r\n    // Shift all the source points to improve numerical stability\r\n    // of all the subsequent calculations. The [x0, y0] is used here.\r\n    // This is also used to simplify the linear system.\r\n    const sourceNumericalShiftX = x0;\r\n    const sourceNumericalShiftY = y0;\r\n    x0 = 0;\r\n    y0 = 0;\r\n    x1 -= sourceNumericalShiftX;\r\n    y1 -= sourceNumericalShiftY;\r\n    x2 -= sourceNumericalShiftX;\r\n    y2 -= sourceNumericalShiftY;\r\n\r\n    const augmentedMatrix = [\r\n      [x1, y1, 0, 0, u1 - u0],\r\n      [x2, y2, 0, 0, u2 - u0],\r\n      [0, 0, x1, y1, v1 - v0],\r\n      [0, 0, x2, y2, v2 - v0],\r\n    ];\r\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\r\n    if (!affineCoefs) {\r\n      return;\r\n    }\r\n\r\n    context.save();\r\n    context.beginPath();\r\n\r\n    if (isBrokenDiagonalRendering() || !interpolate) {\r\n      // Make sure that all lines are horizontal or vertical\r\n      context.moveTo(u1, v1);\r\n      // This is the diagonal line. Do it in 4 steps\r\n      const steps = 4;\r\n      const ud = u0 - u1;\r\n      const vd = v0 - v1;\r\n      for (let step = 0; step < steps; step++) {\r\n        // Go horizontally\r\n        context.lineTo(\r\n          u1 + pixelRound(((step + 1) * ud) / steps),\r\n          v1 + pixelRound((step * vd) / (steps - 1)),\r\n        );\r\n        // Go vertically\r\n        if (step != steps - 1) {\r\n          context.lineTo(\r\n            u1 + pixelRound(((step + 1) * ud) / steps),\r\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1)),\r\n          );\r\n        }\r\n      }\r\n      // We are almost at u0r, v0r\r\n      context.lineTo(u2, v2);\r\n    } else {\r\n      context.moveTo(u1, v1);\r\n      context.lineTo(u0, v0);\r\n      context.lineTo(u2, v2);\r\n    }\r\n\r\n    context.clip();\r\n\r\n    context.transform(\r\n      affineCoefs[0],\r\n      affineCoefs[2],\r\n      affineCoefs[1],\r\n      affineCoefs[3],\r\n      u0,\r\n      v0,\r\n    );\r\n\r\n    context.translate(\r\n      sourceDataExtent[0] - sourceNumericalShiftX,\r\n      sourceDataExtent[3] - sourceNumericalShiftY,\r\n    );\r\n\r\n    let image;\r\n    if (stitchContext) {\r\n      image = stitchContext.canvas;\r\n      context.scale(inverseScale, -inverseScale);\r\n    } else {\r\n      const source = sources[0];\r\n      const extent = source.extent;\r\n      image = source.image;\r\n      context.scale(\r\n        getWidth(extent) / image.width,\r\n        -getHeight(extent) / image.height,\r\n      );\r\n    }\r\n\r\n    context.drawImage(image, 0, 0);\r\n    context.restore();\r\n  });\r\n\r\n  if (stitchContext) {\r\n    releaseCanvas(stitchContext);\r\n    canvasPool.push(stitchContext.canvas);\r\n  }\r\n\r\n  if (renderEdges) {\r\n    context.save();\r\n\r\n    context.globalCompositeOperation = 'source-over';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 1;\r\n\r\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\r\n      const target = triangle.target;\r\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\r\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\r\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\r\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\r\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\r\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\r\n\r\n      context.beginPath();\r\n      context.moveTo(u1, v1);\r\n      context.lineTo(u0, v0);\r\n      context.lineTo(u2, v2);\r\n      context.closePath();\r\n      context.stroke();\r\n    });\r\n\r\n    context.restore();\r\n  }\r\n  return context.canvas;\r\n}\r\n", "/**\r\n * @module ol/reproj/Tile\r\n */\r\nimport {ERROR_THRESHOLD} from './common.js';\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport Tile from '../Tile.js';\r\nimport TileState from '../TileState.js';\r\nimport Triangulation from './Triangulation.js';\r\nimport {\r\n  calculateSourceExtentResolution,\r\n  canvasPool,\r\n  render as renderReprojected,\r\n} from '../reproj.js';\r\nimport {clamp} from '../math.js';\r\nimport {getArea, getIntersection, getWidth, wrapAndSliceX} from '../extent.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {releaseCanvas} from '../dom.js';\r\n\r\n/**\r\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\r\n */\r\n\r\n/**\r\n * @typedef {Object} TileOffset\r\n * @property {import(\"../ImageTile.js\").default} tile Tile.\r\n * @property {number} offset Offset.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Class encapsulating single reprojected tile.\r\n * See {@link module:ol/source/TileImage~TileImage}.\r\n *\r\n */\r\nclass ReprojTile extends Tile {\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {number} gutter Gutter of the source tiles.\r\n   * @param {FunctionType} getTileFunction\r\n   *     Function returning source tiles (z, x, y, pixelRatio).\r\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\r\n   * @param {boolean} [renderEdges] Render reprojection edges.\r\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(\r\n    sourceProj,\r\n    sourceTileGrid,\r\n    targetProj,\r\n    targetTileGrid,\r\n    tileCoord,\r\n    wrappedTileCoord,\r\n    pixelRatio,\r\n    gutter,\r\n    getTileFunction,\r\n    errorThreshold,\r\n    renderEdges,\r\n    options,\r\n  ) {\r\n    super(tileCoord, TileState.IDLE, options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.gutter_ = gutter;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.sourceTileGrid_ = sourceTileGrid;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.targetTileGrid_ = targetTileGrid;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilecoord.js\").TileCoord}\r\n     */\r\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<TileOffset>}\r\n     */\r\n    this.sourceTiles_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.sourcesListenerKeys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.sourceZ_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.clipExtent_ = sourceProj.canWrapX()\r\n      ? sourceProj.getExtent()\r\n      : undefined;\r\n\r\n    const targetExtent = targetTileGrid.getTileCoordExtent(\r\n      this.wrappedTileCoord_,\r\n    );\r\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\r\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\r\n\r\n    const limitedTargetExtent = maxTargetExtent\r\n      ? getIntersection(targetExtent, maxTargetExtent)\r\n      : targetExtent;\r\n\r\n    if (getArea(limitedTargetExtent) === 0) {\r\n      // Tile is completely outside range -> EMPTY\r\n      // TODO: is it actually correct that the source even creates the tile ?\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    const sourceProjExtent = sourceProj.getExtent();\r\n    if (sourceProjExtent) {\r\n      if (!maxSourceExtent) {\r\n        maxSourceExtent = sourceProjExtent;\r\n      } else {\r\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\r\n      }\r\n    }\r\n\r\n    const targetResolution = targetTileGrid.getResolution(\r\n      this.wrappedTileCoord_[0],\r\n    );\r\n\r\n    const sourceResolution = calculateSourceExtentResolution(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      targetResolution,\r\n    );\r\n\r\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\r\n      // invalid sourceResolution -> EMPTY\r\n      // probably edges of the projections when no extent is defined\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    const errorThresholdInPixels =\r\n      errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"./Triangulation.js\").default}\r\n     */\r\n    this.triangulation_ = new Triangulation(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      maxSourceExtent,\r\n      sourceResolution * errorThresholdInPixels,\r\n      targetResolution,\r\n    );\r\n\r\n    if (this.triangulation_.getTriangles().length === 0) {\r\n      // no valid triangles -> EMPTY\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\r\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\r\n\r\n    if (maxSourceExtent) {\r\n      if (sourceProj.canWrapX()) {\r\n        sourceExtent[1] = clamp(\r\n          sourceExtent[1],\r\n          maxSourceExtent[1],\r\n          maxSourceExtent[3],\r\n        );\r\n        sourceExtent[3] = clamp(\r\n          sourceExtent[3],\r\n          maxSourceExtent[1],\r\n          maxSourceExtent[3],\r\n        );\r\n      } else {\r\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\r\n      }\r\n    }\r\n\r\n    if (!getArea(sourceExtent)) {\r\n      this.state = TileState.EMPTY;\r\n    } else {\r\n      let worldWidth = 0;\r\n      let worldsAway = 0;\r\n      if (sourceProj.canWrapX()) {\r\n        worldWidth = getWidth(sourceProjExtent);\r\n        worldsAway = Math.floor(\r\n          (sourceExtent[0] - sourceProjExtent[0]) / worldWidth,\r\n        );\r\n      }\r\n\r\n      const sourceExtents = wrapAndSliceX(\r\n        sourceExtent.slice(),\r\n        sourceProj,\r\n        true,\r\n      );\r\n      sourceExtents.forEach((extent) => {\r\n        const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\r\n          extent,\r\n          this.sourceZ_,\r\n        );\r\n\r\n        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\r\n          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\r\n            const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\r\n            if (tile) {\r\n              const offset = worldsAway * worldWidth;\r\n              this.sourceTiles_.push({tile, offset});\r\n            }\r\n          }\r\n        }\r\n        ++worldsAway;\r\n      });\r\n\r\n      if (this.sourceTiles_.length === 0) {\r\n        this.state = TileState.EMPTY;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the HTML Canvas element for this tile.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\r\n  getImage() {\r\n    return this.canvas_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  reproject_() {\r\n    const sources = [];\r\n    this.sourceTiles_.forEach((source) => {\r\n      const tile = source.tile;\r\n      if (tile && tile.getState() == TileState.LOADED) {\r\n        const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\r\n        extent[0] += source.offset;\r\n        extent[2] += source.offset;\r\n        const clipExtent = this.clipExtent_?.slice();\r\n        if (clipExtent) {\r\n          clipExtent[0] += source.offset;\r\n          clipExtent[2] += source.offset;\r\n        }\r\n        sources.push({\r\n          extent: extent,\r\n          clipExtent: clipExtent,\r\n          image: tile.getImage(),\r\n        });\r\n      }\r\n    });\r\n    this.sourceTiles_.length = 0;\r\n\r\n    if (sources.length === 0) {\r\n      this.state = TileState.ERROR;\r\n    } else {\r\n      const z = this.wrappedTileCoord_[0];\r\n      const size = this.targetTileGrid_.getTileSize(z);\r\n      const width = typeof size === 'number' ? size : size[0];\r\n      const height = typeof size === 'number' ? size : size[1];\r\n      const targetResolution = this.targetTileGrid_.getResolution(z);\r\n      const sourceResolution = this.sourceTileGrid_.getResolution(\r\n        this.sourceZ_,\r\n      );\r\n\r\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\r\n        this.wrappedTileCoord_,\r\n      );\r\n\r\n      this.canvas_ = renderReprojected(\r\n        width,\r\n        height,\r\n        this.pixelRatio_,\r\n        sourceResolution,\r\n        this.sourceTileGrid_.getExtent(),\r\n        targetResolution,\r\n        targetExtent,\r\n        this.triangulation_,\r\n        sources,\r\n        this.gutter_,\r\n        this.renderEdges_,\r\n        this.interpolate,\r\n      );\r\n\r\n      this.state = TileState.LOADED;\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == TileState.IDLE) {\r\n      this.state = TileState.LOADING;\r\n      this.changed();\r\n\r\n      let leftToLoad = 0;\r\n\r\n      this.sourcesListenerKeys_ = [];\r\n      this.sourceTiles_.forEach(({tile}) => {\r\n        const state = tile.getState();\r\n        if (state == TileState.IDLE || state == TileState.LOADING) {\r\n          leftToLoad++;\r\n\r\n          const sourceListenKey = listen(\r\n            tile,\r\n            EventType.CHANGE,\r\n            function (e) {\r\n              const state = tile.getState();\r\n              if (\r\n                state == TileState.LOADED ||\r\n                state == TileState.ERROR ||\r\n                state == TileState.EMPTY\r\n              ) {\r\n                unlistenByKey(sourceListenKey);\r\n                leftToLoad--;\r\n                if (leftToLoad === 0) {\r\n                  this.unlistenSources_();\r\n                  this.reproject_();\r\n                }\r\n              }\r\n            },\r\n            this,\r\n          );\r\n          this.sourcesListenerKeys_.push(sourceListenKey);\r\n        }\r\n      });\r\n\r\n      if (leftToLoad === 0) {\r\n        setTimeout(this.reproject_.bind(this), 0);\r\n      } else {\r\n        this.sourceTiles_.forEach(function ({tile}, i, arr) {\r\n          const state = tile.getState();\r\n          if (state == TileState.IDLE) {\r\n            tile.load();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenSources_() {\r\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\r\n    this.sourcesListenerKeys_ = null;\r\n  }\r\n\r\n  /**\r\n   * Remove from the cache due to expiry\r\n   */\r\n  release() {\r\n    if (this.canvas_) {\r\n      releaseCanvas(this.canvas_.getContext('2d'));\r\n      canvasPool.push(this.canvas_);\r\n      this.canvas_ = null;\r\n    }\r\n    super.release();\r\n  }\r\n}\r\n\r\nexport default ReprojTile;\r\n"],
  "mappings": "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",
  "names": ["width", "height", "xPos", "yPos", "source", "state", "Tile_default"]
}
