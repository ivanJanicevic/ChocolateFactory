{
  "version": 3,
  "sources": ["../../color-space/rgb.js", "../../color-space/xyz.js", "../../color-space/luv.js", "../../color-space/lchuv.js", "../../color-name/index.js", "../../color-parse/index.js", "../../color-space/hsl.js", "../../color-rgba/index.js", "../../ol/color.js"],
  "sourcesContent": ["/**\r\n * RGB space.\r\n *\r\n * @module  color-space/rgb\r\n */\r\n\r\nexport default {\r\n\tname: 'rgb',\r\n\tmin: [0,0,0],\r\n\tmax: [255,255,255],\r\n\tchannel: ['red', 'green', 'blue'],\r\n\talias: ['RGB']\r\n};\r\n", "/**\r\n * CIE XYZ\r\n *\r\n * @module  color-space/xyz\r\n */\r\nimport rgb from './rgb.js';\r\n\r\nvar xyz = {\r\n\tname: 'xyz',\r\n\tmin: [0,0,0],\r\n\tchannel: ['X','Y','Z'],\r\n\talias: ['XYZ', 'ciexyz', 'cie1931']\r\n};\r\n\r\n\r\n/**\r\n * Whitepoint reference values with observer/illuminant\r\n *\r\n * http://en.wikipedia.org/wiki/Standard_illuminant\r\n */\r\nxyz.whitepoint = {\r\n\t//1931 2°\r\n\t2: {\r\n\t\t//incadescent\r\n\t\tA:[109.85, 100, 35.585],\r\n\t\t// B:[],\r\n\t\tC: [98.074, 100, 118.232],\r\n\t\tD50: [96.422, 100, 82.521],\r\n\t\tD55: [95.682, 100, 92.149],\r\n\t\t//daylight\r\n\t\tD65: [95.045592705167, 100, 108.9057750759878],\r\n\t\tD75: [94.972, 100, 122.638],\r\n\t\t//flourescent\r\n\t\t// F1: [],\r\n\t\tF2: [99.187, 100, 67.395],\r\n\t\t// F3: [],\r\n\t\t// F4: [],\r\n\t\t// F5: [],\r\n\t\t// F6:[],\r\n\t\tF7: [95.044, 100, 108.755],\r\n\t\t// F8: [],\r\n\t\t// F9: [],\r\n\t\t// F10: [],\r\n\t\tF11: [100.966, 100, 64.370],\r\n\t\t// F12: [],\r\n\t\tE: [100,100,100]\r\n\t},\r\n\r\n\t//1964  10°\r\n\t10: {\r\n\t\t//incadescent\r\n\t\tA:[111.144, 100, 35.200],\r\n\t\tC: [97.285, 100, 116.145],\r\n\t\tD50: [96.720, 100, 81.427],\r\n\t\tD55: [95.799, 100, 90.926],\r\n\t\t//daylight\r\n\t\tD65: [94.811, 100, 107.304],\r\n\t\tD75: [94.416, 100, 120.641],\r\n\t\t//flourescent\r\n\t\tF2: [103.280, 100, 69.026],\r\n\t\tF7: [95.792, 100, 107.687],\r\n\t\tF11: [103.866, 100, 65.627],\r\n\t\tE: [100,100,100]\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Top values are the whitepoint’s top values, default are D65\r\n */\r\nxyz.max = xyz.whitepoint[2].D65;\r\n\r\n\r\n/**\r\n * Transform xyz to rgb\r\n *\r\n * @param {Array} xyz Array of xyz values\r\n *\r\n * @return {Array} RGB values\r\n */\r\nxyz.rgb = function (_xyz, white) {\r\n\t//FIXME: make sure we have to divide like this. Probably we have to replace matrix as well then\r\n\twhite = white || xyz.whitepoint[2].E;\r\n\r\n\tvar x = _xyz[0] / white[0],\r\n\t\ty = _xyz[1] / white[1],\r\n\t\tz = _xyz[2] / white[2],\r\n\t\tr, g, b;\r\n\r\n\t// assume sRGB\r\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\r\n\tr = (x * 3.240969941904521) + (y * -1.537383177570093) + (z * -0.498610760293);\r\n\tg = (x * -0.96924363628087) + (y * 1.87596750150772) + (z * 0.041555057407175);\r\n\tb = (x * 0.055630079696993) + (y * -0.20397695888897) + (z * 1.056971514242878);\r\n\r\n\tr = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\r\n\t\t: r = (r * 12.92);\r\n\r\n\tg = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\r\n\t\t: g = (g * 12.92);\r\n\r\n\tb = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\r\n\t\t: b = (b * 12.92);\r\n\r\n\tr = Math.min(Math.max(0, r), 1);\r\n\tg = Math.min(Math.max(0, g), 1);\r\n\tb = Math.min(Math.max(0, b), 1);\r\n\r\n\treturn [r * 255, g * 255, b * 255];\r\n}\r\n\r\n\r\n\r\n/**\r\n * RGB to XYZ\r\n *\r\n * @param {Array} rgb RGB channels\r\n *\r\n * @return {Array} XYZ channels\r\n */\r\nrgb.xyz = function(rgb, white) {\r\n\tvar r = rgb[0] / 255,\r\n\t\t\tg = rgb[1] / 255,\r\n\t\t\tb = rgb[2] / 255;\r\n\r\n\t// assume sRGB\r\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\r\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\r\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\r\n\r\n\tvar x = (r * 0.41239079926595) + (g * 0.35758433938387) + (b * 0.18048078840183);\r\n\tvar y = (r * 0.21263900587151) + (g * 0.71516867876775) + (b * 0.072192315360733);\r\n\tvar z = (r * 0.019330818715591) + (g * 0.11919477979462) + (b * 0.95053215224966);\r\n\r\n\twhite = white || xyz.whitepoint[2].E;\r\n\r\n\treturn [x * white[0], y * white[1], z * white[2]];\r\n};\r\n\r\n\r\n\r\nexport default xyz;\r\n", "/**\r\n * CIE LUV (C'est la vie)\r\n *\r\n * @module color-space/luv\r\n */\r\n import xyz from './xyz.js';\r\n\r\nexport default {\r\n\tname: 'luv',\r\n\t//NOTE: luv has no rigidly defined limits\r\n\t//easyrgb fails to get proper coords\r\n\t//boronine states no rigid limits\r\n\t//colorMine refers this ones:\r\n\tmin: [0,-134,-140],\r\n\tmax: [100,224,122],\r\n\tchannel: ['lightness', 'u', 'v'],\r\n\talias: ['LUV', 'cieluv', 'cie1976'],\r\n\r\n\txyz: function(arg, i, o){\r\n\t\tvar _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;\r\n\t\tl = arg[0], u = arg[1], v = arg[2];\r\n\r\n\t\tif (l === 0) return [0,0,0];\r\n\r\n\t\t//get constants\r\n\t\t//var e = 0.008856451679035631; //(6/29)^3\r\n\t\tvar k = 0.0011070564598794539; //(3/29)^3\r\n\r\n\t\t//get illuminant/observer\r\n\t\ti = i || 'D65';\r\n\t\to = o || 2;\r\n\r\n\t\txn = xyz.whitepoint[o][i][0];\r\n\t\tyn = xyz.whitepoint[o][i][1];\r\n\t\tzn = xyz.whitepoint[o][i][2];\r\n\r\n\t\tun = (4 * xn) / (xn + (15 * yn) + (3 * zn));\r\n\t\tvn = (9 * yn) / (xn + (15 * yn) + (3 * zn));\r\n\t\t// un = 0.19783000664283;\r\n\t\t// vn = 0.46831999493879;\r\n\r\n\r\n\t\t_u = u / (13 * l) + un || 0;\r\n\t\t_v = v / (13 * l) + vn || 0;\r\n\r\n\t\ty = l > 8 ? yn * Math.pow( (l + 16) / 116 , 3) : yn * l * k;\r\n\r\n\t\t//wikipedia method\r\n\t\tx = y * 9 * _u / (4 * _v) || 0;\r\n\t\tz = y * (12 - 3 * _u - 20 * _v) / (4 * _v) || 0;\r\n\r\n\t\t//boronine method\r\n\t\t//https://github.com/boronine/husl/blob/master/husl.coffee#L201\r\n\t\t// x = 0 - (9 * y * _u) / ((_u - 4) * _v - _u * _v);\r\n\t\t// z = (9 * y - (15 * _v * y) - (_v * x)) / (3 * _v);\r\n\r\n\t\treturn [x, y, z];\r\n\t}\r\n};\r\n\r\n// http://www.brucelindbloom.com/index.html?Equations.html\r\n// https://github.com/boronine/husl/blob/master/husl.coffee\r\n//i - illuminant\r\n//o - observer\r\nxyz.luv = function(arg, i, o) {\r\n\tvar _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;\r\n\r\n\t//get constants\r\n\tvar e = 0.008856451679035631; //(6/29)^3\r\n\tvar k = 903.2962962962961; //(29/3)^3\r\n\r\n\t//get illuminant/observer coords\r\n\ti = i || 'D65';\r\n\to = o || 2;\r\n\r\n\txn = xyz.whitepoint[o][i][0];\r\n\tyn = xyz.whitepoint[o][i][1];\r\n\tzn = xyz.whitepoint[o][i][2];\r\n\r\n\tun = (4 * xn) / (xn + (15 * yn) + (3 * zn));\r\n\tvn = (9 * yn) / (xn + (15 * yn) + (3 * zn));\r\n\r\n\r\n\tx = arg[0], y = arg[1], z = arg[2];\r\n\r\n\r\n\t_u = (4 * x) / (x + (15 * y) + (3 * z)) || 0;\r\n\t_v = (9 * y) / (x + (15 * y) + (3 * z)) || 0;\r\n\r\n\tvar yr = y/yn;\r\n\r\n\tl = yr <= e ? k * yr : 116 * Math.pow(yr, 1/3) - 16;\r\n\r\n\tu = 13 * l * (_u - un);\r\n\tv = 13 * l * (_v - vn);\r\n\r\n\treturn [l, u, v];\r\n};\r\n", "/**\r\n * Cylindrical CIE LUV\r\n *\r\n * @module color-space/lchuv\r\n */\r\nimport luv from './luv.js';\r\nimport xyz from './xyz.js';\r\n\r\n//cylindrical luv\r\nvar lchuv = {\r\n\tname: 'lchuv',\r\n\tchannel: ['lightness', 'chroma', 'hue'],\r\n\talias: ['LCHuv', 'cielchuv'],\r\n\tmin: [0,0,0],\r\n\tmax: [100,100,360],\r\n\r\n\tluv: function(luv){\r\n\t\tvar l = luv[0],\r\n\t\tc = luv[1],\r\n\t\th = luv[2],\r\n\t\tu, v, hr;\r\n\r\n\t\thr = h / 360 * 2 * Math.PI;\r\n\t\tu = c * Math.cos(hr);\r\n\t\tv = c * Math.sin(hr);\r\n\t\treturn [l, u, v];\r\n\t},\r\n\r\n\txyz: function(arg) {\r\n\t\treturn luv.xyz(lchuv.luv(arg));\r\n\t}\r\n};\r\n\r\nexport default lchuv;\r\n\r\nluv.lchuv = function(luv){\r\n\tvar l = luv[0], u = luv[1], v = luv[2];\r\n\r\n\tvar c = Math.sqrt(u*u + v*v);\r\n\tvar hr = Math.atan2(v,u);\r\n\tvar h = hr * 360 / 2 / Math.PI;\r\n\tif (h < 0) {\r\n\t\th += 360;\r\n\t}\r\n\r\n\treturn [l,c,h]\r\n};\r\n\r\nxyz.lchuv = function(arg){\r\n  return luv.lchuv(xyz.luv(arg));\r\n};\r\n", "export default {\r\n\taliceblue: [240, 248, 255],\r\n\tantiquewhite: [250, 235, 215],\r\n\taqua: [0, 255, 255],\r\n\taquamarine: [127, 255, 212],\r\n\tazure: [240, 255, 255],\r\n\tbeige: [245, 245, 220],\r\n\tbisque: [255, 228, 196],\r\n\tblack: [0, 0, 0],\r\n\tblanchedalmond: [255, 235, 205],\r\n\tblue: [0, 0, 255],\r\n\tblueviolet: [138, 43, 226],\r\n\tbrown: [165, 42, 42],\r\n\tburlywood: [222, 184, 135],\r\n\tcadetblue: [95, 158, 160],\r\n\tchartreuse: [127, 255, 0],\r\n\tchocolate: [210, 105, 30],\r\n\tcoral: [255, 127, 80],\r\n\tcornflowerblue: [100, 149, 237],\r\n\tcornsilk: [255, 248, 220],\r\n\tcrimson: [220, 20, 60],\r\n\tcyan: [0, 255, 255],\r\n\tdarkblue: [0, 0, 139],\r\n\tdarkcyan: [0, 139, 139],\r\n\tdarkgoldenrod: [184, 134, 11],\r\n\tdarkgray: [169, 169, 169],\r\n\tdarkgreen: [0, 100, 0],\r\n\tdarkgrey: [169, 169, 169],\r\n\tdarkkhaki: [189, 183, 107],\r\n\tdarkmagenta: [139, 0, 139],\r\n\tdarkolivegreen: [85, 107, 47],\r\n\tdarkorange: [255, 140, 0],\r\n\tdarkorchid: [153, 50, 204],\r\n\tdarkred: [139, 0, 0],\r\n\tdarksalmon: [233, 150, 122],\r\n\tdarkseagreen: [143, 188, 143],\r\n\tdarkslateblue: [72, 61, 139],\r\n\tdarkslategray: [47, 79, 79],\r\n\tdarkslategrey: [47, 79, 79],\r\n\tdarkturquoise: [0, 206, 209],\r\n\tdarkviolet: [148, 0, 211],\r\n\tdeeppink: [255, 20, 147],\r\n\tdeepskyblue: [0, 191, 255],\r\n\tdimgray: [105, 105, 105],\r\n\tdimgrey: [105, 105, 105],\r\n\tdodgerblue: [30, 144, 255],\r\n\tfirebrick: [178, 34, 34],\r\n\tfloralwhite: [255, 250, 240],\r\n\tforestgreen: [34, 139, 34],\r\n\tfuchsia: [255, 0, 255],\r\n\tgainsboro: [220, 220, 220],\r\n\tghostwhite: [248, 248, 255],\r\n\tgold: [255, 215, 0],\r\n\tgoldenrod: [218, 165, 32],\r\n\tgray: [128, 128, 128],\r\n\tgreen: [0, 128, 0],\r\n\tgreenyellow: [173, 255, 47],\r\n\tgrey: [128, 128, 128],\r\n\thoneydew: [240, 255, 240],\r\n\thotpink: [255, 105, 180],\r\n\tindianred: [205, 92, 92],\r\n\tindigo: [75, 0, 130],\r\n\tivory: [255, 255, 240],\r\n\tkhaki: [240, 230, 140],\r\n\tlavender: [230, 230, 250],\r\n\tlavenderblush: [255, 240, 245],\r\n\tlawngreen: [124, 252, 0],\r\n\tlemonchiffon: [255, 250, 205],\r\n\tlightblue: [173, 216, 230],\r\n\tlightcoral: [240, 128, 128],\r\n\tlightcyan: [224, 255, 255],\r\n\tlightgoldenrodyellow: [250, 250, 210],\r\n\tlightgray: [211, 211, 211],\r\n\tlightgreen: [144, 238, 144],\r\n\tlightgrey: [211, 211, 211],\r\n\tlightpink: [255, 182, 193],\r\n\tlightsalmon: [255, 160, 122],\r\n\tlightseagreen: [32, 178, 170],\r\n\tlightskyblue: [135, 206, 250],\r\n\tlightslategray: [119, 136, 153],\r\n\tlightslategrey: [119, 136, 153],\r\n\tlightsteelblue: [176, 196, 222],\r\n\tlightyellow: [255, 255, 224],\r\n\tlime: [0, 255, 0],\r\n\tlimegreen: [50, 205, 50],\r\n\tlinen: [250, 240, 230],\r\n\tmagenta: [255, 0, 255],\r\n\tmaroon: [128, 0, 0],\r\n\tmediumaquamarine: [102, 205, 170],\r\n\tmediumblue: [0, 0, 205],\r\n\tmediumorchid: [186, 85, 211],\r\n\tmediumpurple: [147, 112, 219],\r\n\tmediumseagreen: [60, 179, 113],\r\n\tmediumslateblue: [123, 104, 238],\r\n\tmediumspringgreen: [0, 250, 154],\r\n\tmediumturquoise: [72, 209, 204],\r\n\tmediumvioletred: [199, 21, 133],\r\n\tmidnightblue: [25, 25, 112],\r\n\tmintcream: [245, 255, 250],\r\n\tmistyrose: [255, 228, 225],\r\n\tmoccasin: [255, 228, 181],\r\n\tnavajowhite: [255, 222, 173],\r\n\tnavy: [0, 0, 128],\r\n\toldlace: [253, 245, 230],\r\n\tolive: [128, 128, 0],\r\n\tolivedrab: [107, 142, 35],\r\n\torange: [255, 165, 0],\r\n\torangered: [255, 69, 0],\r\n\torchid: [218, 112, 214],\r\n\tpalegoldenrod: [238, 232, 170],\r\n\tpalegreen: [152, 251, 152],\r\n\tpaleturquoise: [175, 238, 238],\r\n\tpalevioletred: [219, 112, 147],\r\n\tpapayawhip: [255, 239, 213],\r\n\tpeachpuff: [255, 218, 185],\r\n\tperu: [205, 133, 63],\r\n\tpink: [255, 192, 203],\r\n\tplum: [221, 160, 221],\r\n\tpowderblue: [176, 224, 230],\r\n\tpurple: [128, 0, 128],\r\n\trebeccapurple: [102, 51, 153],\r\n\tred: [255, 0, 0],\r\n\trosybrown: [188, 143, 143],\r\n\troyalblue: [65, 105, 225],\r\n\tsaddlebrown: [139, 69, 19],\r\n\tsalmon: [250, 128, 114],\r\n\tsandybrown: [244, 164, 96],\r\n\tseagreen: [46, 139, 87],\r\n\tseashell: [255, 245, 238],\r\n\tsienna: [160, 82, 45],\r\n\tsilver: [192, 192, 192],\r\n\tskyblue: [135, 206, 235],\r\n\tslateblue: [106, 90, 205],\r\n\tslategray: [112, 128, 144],\r\n\tslategrey: [112, 128, 144],\r\n\tsnow: [255, 250, 250],\r\n\tspringgreen: [0, 255, 127],\r\n\tsteelblue: [70, 130, 180],\r\n\ttan: [210, 180, 140],\r\n\tteal: [0, 128, 128],\r\n\tthistle: [216, 191, 216],\r\n\ttomato: [255, 99, 71],\r\n\tturquoise: [64, 224, 208],\r\n\tviolet: [238, 130, 238],\r\n\twheat: [245, 222, 179],\r\n\twhite: [255, 255, 255],\r\n\twhitesmoke: [245, 245, 245],\r\n\tyellow: [255, 255, 0],\r\n\tyellowgreen: [154, 205, 50]\r\n}\r\n", "/**\r\n * @module color-parse\r\n */\r\nimport names from 'color-name'\r\n\r\nexport default parse\r\n\r\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\r\n//FIXME: use external hue detector\r\nvar baseHues = {\r\n\tred: 0,\r\n\torange: 60,\r\n\tyellow: 120,\r\n\tgreen: 180,\r\n\tblue: 240,\r\n\tpurple: 300\r\n}\r\n\r\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\r\nfunction parse(cstr) {\r\n\tvar m, parts = [], alpha = 1, space\r\n\r\n\t//numeric case\r\n\tif (typeof cstr === 'number') {\r\n\t\treturn { space: 'rgb', values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff], alpha: 1 }\r\n\t}\r\n\tif (typeof cstr === 'number') return { space: 'rgb', values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff], alpha: 1 }\r\n\r\n\tcstr = String(cstr).toLowerCase();\r\n\r\n\t//keyword\r\n\tif (names[cstr]) {\r\n\t\tparts = names[cstr].slice()\r\n\t\tspace = 'rgb'\r\n\t}\r\n\r\n\t//reserved words\r\n\telse if (cstr === 'transparent') {\r\n\t\talpha = 0\r\n\t\tspace = 'rgb'\r\n\t\tparts = [0, 0, 0]\r\n\t}\r\n\r\n\t//hex\r\n\telse if (cstr[0] === '#') {\r\n\t\tvar base = cstr.slice(1)\r\n\t\tvar size = base.length\r\n\t\tvar isShort = size <= 4\r\n\t\talpha = 1\r\n\r\n\t\tif (isShort) {\r\n\t\t\tparts = [\r\n\t\t\t\tparseInt(base[0] + base[0], 16),\r\n\t\t\t\tparseInt(base[1] + base[1], 16),\r\n\t\t\t\tparseInt(base[2] + base[2], 16)\r\n\t\t\t]\r\n\t\t\tif (size === 4) {\r\n\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tparts = [\r\n\t\t\t\tparseInt(base[0] + base[1], 16),\r\n\t\t\t\tparseInt(base[2] + base[3], 16),\r\n\t\t\t\tparseInt(base[4] + base[5], 16)\r\n\t\t\t]\r\n\t\t\tif (size === 8) {\r\n\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!parts[0]) parts[0] = 0\r\n\t\tif (!parts[1]) parts[1] = 0\r\n\t\tif (!parts[2]) parts[2] = 0\r\n\r\n\t\tspace = 'rgb'\r\n\t}\r\n\r\n\t// color space\r\n\telse if (m = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\r\n\t\tvar name = m[1]\r\n\t\tspace = name.replace(/a$/, '')\r\n\t\tvar dims = space === 'cmyk' ? 4 : space === 'gray' ? 1 : 3\r\n\t\tparts = m[2].trim().split(/\\s*[,\\/]\\s*|\\s+/)\r\n\r\n\t\t// color(srgb-linear x x x) -> srgb-linear(x x x)\r\n\t\tif (space === 'color') space = parts.shift()\r\n\r\n\t\tparts = parts.map(function (x, i) {\r\n\t\t\t//<percentage>\r\n\t\t\tif (x[x.length - 1] === '%') {\r\n\t\t\t\tx = parseFloat(x) / 100\r\n\t\t\t\t// alpha -> 0..1\r\n\t\t\t\tif (i === 3) return x\r\n\t\t\t\t// rgb -> 0..255\r\n\t\t\t\tif (space === 'rgb') return x * 255\r\n\t\t\t\t// hsl, hwb H -> 0..100\r\n\t\t\t\tif (space[0] === 'h') return x * 100\r\n\t\t\t\t// lch, lab L -> 0..100\r\n\t\t\t\tif (space[0] === 'l' && !i) return x * 100\r\n\t\t\t\t// lab A B -> -125..125\r\n\t\t\t\tif (space === 'lab') return x * 125\r\n\t\t\t\t// lch C -> 0..150, H -> 0..360\r\n\t\t\t\tif (space === 'lch') return i < 2 ? x * 150 : x * 360\r\n\t\t\t\t// oklch/oklab L -> 0..1\r\n\t\t\t\tif (space[0] === 'o' && !i) return x\r\n\t\t\t\t// oklab A B -> -0.4..0.4\r\n\t\t\t\tif (space === 'oklab') return x * 0.4\r\n\t\t\t\t// oklch C -> 0..0.4, H -> 0..360\r\n\t\t\t\tif (space === 'oklch') return i < 2 ? x * 0.4 : x * 360\r\n\t\t\t\t// color(xxx) -> 0..1\r\n\t\t\t\treturn x\r\n\t\t\t}\r\n\r\n\t\t\t//hue\r\n\t\t\tif (space[i] === 'h' || (i === 2 && space[space.length - 1] === 'h')) {\r\n\t\t\t\t//<base-hue>\r\n\t\t\t\tif (baseHues[x] !== undefined) return baseHues[x]\r\n\t\t\t\t//<deg>\r\n\t\t\t\tif (x.endsWith('deg')) return parseFloat(x)\r\n\t\t\t\t//<turn>\r\n\t\t\t\tif (x.endsWith('turn')) return parseFloat(x) * 360\r\n\t\t\t\tif (x.endsWith('grad')) return parseFloat(x) * 360 / 400\r\n\t\t\t\tif (x.endsWith('rad')) return parseFloat(x) * 180 / Math.PI\r\n\t\t\t}\r\n\t\t\tif (x === 'none') return 0\r\n\t\t\treturn parseFloat(x)\r\n\t\t});\r\n\r\n\t\talpha = parts.length > dims ? parts.pop() : 1\r\n\t}\r\n\r\n\t//named channels case\r\n\telse if (/[0-9](?:\\s|\\/|,)/.test(cstr)) {\r\n\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\r\n\t\t\treturn parseFloat(value)\r\n\t\t})\r\n\r\n\t\tspace = cstr.match(/([a-z])/ig)?.join('')?.toLowerCase() || 'rgb'\r\n\t}\r\n\r\n\treturn {\r\n\t\tspace,\r\n\t\tvalues: parts,\r\n\t\talpha\r\n\t}\r\n}\r\n", "/**\r\n * @module color-space/hsl\r\n */\r\nimport rgb from './rgb.js';\r\n\r\nexport default {\r\n\tname: 'hsl',\r\n\tmin: [0,0,0],\r\n\tmax: [360,100,100],\r\n\tchannel: ['hue', 'saturation', 'lightness'],\r\n\talias: ['HSL'],\r\n\r\n\trgb: function(hsl) {\r\n\t\tvar h = hsl[0]/360, s = hsl[1]/100, l = hsl[2]/100, t1, t2, t3, rgb, val, i=0;\r\n\r\n\t\tif (s === 0) return val = l * 255, [val, val, val];\r\n\r\n\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n\t\tt1 = 2 * l - t2;\r\n\r\n\t\trgb = [0, 0, 0];\r\n\t\tfor (;i<3;) {\r\n\t\t\tt3 = h + 1 / 3 * - (i - 1);\r\n\t\t\tt3 < 0 ? t3++ : t3 > 1 && t3--;\r\n\t\t\tval = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 :\r\n\t\t\t2 * t3 < 1 ? t2 :\r\n\t\t\t3 * t3 < 2 ?  t1 + (t2 - t1) * (2 / 3 - t3) * 6 :\r\n\t\t\tt1;\r\n\t\t\trgb[i++] = val * 255;\r\n\t\t}\r\n\r\n\t\treturn rgb;\r\n\t}\r\n};\r\n\r\n\r\n//extend rgb\r\nrgb.hsl = function(rgb) {\r\n\tvar r = rgb[0]/255,\r\n\t\t\tg = rgb[1]/255,\r\n\t\t\tb = rgb[2]/255,\r\n\t\t\tmin = Math.min(r, g, b),\r\n\t\t\tmax = Math.max(r, g, b),\r\n\t\t\tdelta = max - min,\r\n\t\t\th, s, l;\r\n\r\n\tif (max === min) {\r\n\t\th = 0;\r\n\t}\r\n\telse if (r === max) {\r\n\t\th = (g - b) / delta;\r\n\t}\r\n\telse if (g === max) {\r\n\t\th = 2 + (b - r) / delta;\r\n\t}\r\n\telse if (b === max) {\r\n\t\th = 4 + (r - g)/ delta;\r\n\t}\r\n\r\n\th = Math.min(h * 60, 360);\r\n\r\n\tif (h < 0) {\r\n\t\th += 360;\r\n\t}\r\n\r\n\tl = (min + max) / 2;\r\n\r\n\tif (max === min) {\r\n\t\ts = 0;\r\n\t}\r\n\telse if (l <= 0.5) {\r\n\t\ts = delta / (max + min);\r\n\t}\r\n\telse {\r\n\t\ts = delta / (2 - max - min);\r\n\t}\r\n\r\n\treturn [h, s * 100, l * 100];\r\n};\r\n", "/** @module  color-rgba */\r\nimport parse from 'color-parse'\r\nimport rgb from 'color-space/rgb.js'\r\nimport hsl from 'color-space/hsl.js'\r\n\r\nexport default function rgba(color) {\r\n\t// template literals\r\n\tif (Array.isArray(color) && color.raw) color = String.raw(...arguments)\r\n\tif (color instanceof Number) color = +color\r\n\r\n\tvar values, i, l\r\n\r\n\t//attempt to parse non-array arguments\r\n\tvar parsed = parse(color)\r\n\r\n\tif (!parsed.space) return []\r\n\r\n\tconst min = parsed.space[0] === 'h' ? hsl.min : rgb.min\r\n\tconst max = parsed.space[0] === 'h' ? hsl.max : rgb.max\r\n\r\n\tvalues = Array(3)\r\n\tvalues[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0])\r\n\tvalues[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1])\r\n\tvalues[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2])\r\n\r\n\tif (parsed.space[0] === 'h') {\r\n\t\tvalues = hsl.rgb(values)\r\n\t}\r\n\r\n\tvalues.push(Math.min(Math.max(parsed.alpha, 0), 1))\r\n\r\n\treturn values\r\n}\r\n", "/**\r\n * @module ol/color\r\n */\r\nimport lchuv from 'color-space/lchuv.js';\r\nimport parseRgba from 'color-rgba';\r\nimport rgb from 'color-space/rgb.js';\r\nimport xyz from 'color-space/xyz.js';\r\nimport {clamp} from './math.js';\r\n\r\n/**\r\n * A color represented as a short array [red, green, blue, alpha].\r\n * red, green, and blue should be integers in the range 0..255 inclusive.\r\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\r\n * given then `1` will be used.\r\n * @typedef {Array<number>} Color\r\n * @api\r\n */\r\n\r\n/**\r\n * Return the color as an rgba string.\r\n * @param {Color|string} color Color.\r\n * @return {string} Rgba string.\r\n * @api\r\n */\r\nexport function asString(color) {\r\n  if (typeof color === 'string') {\r\n    return color;\r\n  }\r\n  return toString(color);\r\n}\r\n\r\n/**\r\n * @type {number}\r\n */\r\nconst MAX_CACHE_SIZE = 1024;\r\n\r\n/**\r\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\r\n * we delete an arbitrary set of the entries.\r\n *\r\n * @type {Object<string, Color>}\r\n */\r\nconst cache = {};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nlet cacheSize = 0;\r\n\r\n/**\r\n * @param {Color} color A color that may or may not have an alpha channel.\r\n * @return {Color} The input color with an alpha channel.  If the input color has\r\n * an alpha channel, the input color will be returned unchanged.  Otherwise, a new\r\n * array will be returned with the input color and an alpha channel of 1.\r\n */\r\nexport function withAlpha(color) {\r\n  if (color.length === 4) {\r\n    return color;\r\n  }\r\n  const output = color.slice();\r\n  output[3] = 1;\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Color} color RGBA color.\r\n * @return {Color} LCHuv color with alpha.\r\n */\r\nexport function rgbaToLcha(color) {\r\n  const output = xyz.lchuv(rgb.xyz(color));\r\n  output[3] = color[3];\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Color} color LCHuv color with alpha.\r\n * @return {Color} RGBA color.\r\n */\r\nexport function lchaToRgba(color) {\r\n  const output = xyz.rgb(lchuv.xyz(color));\r\n  output[3] = color[3];\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {Color} Color.\r\n */\r\nexport function fromString(s) {\r\n  if (cache.hasOwnProperty(s)) {\r\n    return cache[s];\r\n  }\r\n  if (cacheSize >= MAX_CACHE_SIZE) {\r\n    let i = 0;\r\n    for (const key in cache) {\r\n      if ((i++ & 3) === 0) {\r\n        delete cache[key];\r\n        --cacheSize;\r\n      }\r\n    }\r\n  }\r\n\r\n  const color = parseRgba(s);\r\n  if (color.length !== 4) {\r\n    throw new Error('Failed to parse \"' + s + '\" as color');\r\n  }\r\n  for (const c of color) {\r\n    if (isNaN(c)) {\r\n      throw new Error('Failed to parse \"' + s + '\" as color');\r\n    }\r\n  }\r\n  normalize(color);\r\n  cache[s] = color;\r\n  ++cacheSize;\r\n  return color;\r\n}\r\n\r\n/**\r\n * Return the color as an array. This function maintains a cache of calculated\r\n * arrays which means the result should not be modified.\r\n * @param {Color|string} color Color.\r\n * @return {Color} Color.\r\n * @api\r\n */\r\nexport function asArray(color) {\r\n  if (Array.isArray(color)) {\r\n    return color;\r\n  }\r\n  return fromString(color);\r\n}\r\n\r\n/**\r\n * Exported for the tests.\r\n * @param {Color} color Color.\r\n * @return {Color} Clamped color.\r\n */\r\nexport function normalize(color) {\r\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\r\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\r\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\r\n  color[3] = clamp(color[3], 0, 1);\r\n  return color;\r\n}\r\n\r\n/**\r\n * @param {Color} color Color.\r\n * @return {string} String.\r\n */\r\nexport function toString(color) {\r\n  let r = color[0];\r\n  if (r != (r | 0)) {\r\n    r = (r + 0.5) | 0;\r\n  }\r\n  let g = color[1];\r\n  if (g != (g | 0)) {\r\n    g = (g + 0.5) | 0;\r\n  }\r\n  let b = color[2];\r\n  if (b != (b | 0)) {\r\n    b = (b + 0.5) | 0;\r\n  }\r\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\r\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {boolean} Whether the string is actually a valid color\r\n */\r\nexport function isStringColor(s) {\r\n  try {\r\n    fromString(s);\r\n    return true;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
