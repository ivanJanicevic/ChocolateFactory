{
  "version": 3,
  "sources": ["../../ol/Tile.js", "../../ol/ImageTile.js", "../../ol/TileRange.js"],
  "sourcesContent": ["/**\r\n * @module ol/Tile\r\n */\r\nimport EventTarget from './events/Target.js';\r\nimport EventType from './events/EventType.js';\r\nimport TileState from './TileState.js';\r\nimport {abstract} from './util.js';\r\nimport {easeIn} from './easing.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\r\n * `{string}` for the url as arguments. The default is\r\n * ```js\r\n * source.setTileLoadFunction(function(tile, src) {\r\n *   tile.getImage().src = src;\r\n * });\r\n * ```\r\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\r\n * error handling:\r\n *\r\n * ```js\r\n * import TileState from 'ol/TileState.js';\r\n *\r\n * source.setTileLoadFunction(function(tile, src) {\r\n *   const xhr = new XMLHttpRequest();\r\n *   xhr.responseType = 'blob';\r\n *   xhr.addEventListener('loadend', function (evt) {\r\n *     const data = this.response;\r\n *     if (data !== undefined) {\r\n *       tile.getImage().src = URL.createObjectURL(data);\r\n *     } else {\r\n *       tile.setState(TileState.ERROR);\r\n *     }\r\n *   });\r\n *   xhr.addEventListener('error', function () {\r\n *     tile.setState(TileState.ERROR);\r\n *   });\r\n *   xhr.open('GET', src);\r\n *   xhr.send();\r\n * });\r\n * ```\r\n *\r\n * @typedef {function(Tile, string): void} LoadFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\r\n * the url that provides a tile for a given tile coordinate.\r\n *\r\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\r\n * coordinate, a `{number}` representing the pixel ratio and a\r\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\r\n * and returns a `{string}` representing the tile URL, or undefined if no tile\r\n * should be requested for the passed tile coordinate.\r\n *\r\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\r\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n * @api\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for tiles.\r\n *\r\n * @abstract\r\n */\r\nclass Tile extends EventTarget {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */\r\n    this.tileCoord = tileCoord;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./TileState.js\").default}\r\n     */\r\n    this.state = state;\r\n\r\n    /**\r\n     * An \"interim\" tile for this tile. The interim tile may be used while this\r\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\r\n     * on the source.\r\n     * @type {Tile|null}\r\n     */\r\n    this.interimTile = null;\r\n\r\n    /**\r\n     * A key assigned to the tile. This is used by the tile source to determine\r\n     * if this tile can effectively be used, or if a new tile should be created\r\n     * and this one be used as an interim tile for this new tile.\r\n     * @type {string}\r\n     */\r\n    this.key = '';\r\n\r\n    /**\r\n     * The duration for the opacity transition.\r\n     * @type {number}\r\n     */\r\n    this.transition_ =\r\n      options.transition === undefined ? 250 : options.transition;\r\n\r\n    /**\r\n     * Lookup of start times for rendering transitions.  If the start time is\r\n     * equal to -1, the transition is complete.\r\n     * @type {Object<string, number>}\r\n     */\r\n    this.transitionStarts_ = {};\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.interpolate = !!options.interpolate;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  changed() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * Called by the tile cache when the tile is removed from the cache due to expiry\r\n   */\r\n  release() {\r\n    if (this.state === TileState.ERROR) {\r\n      // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\r\n      this.setState(TileState.EMPTY);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {string} Key.\r\n   */\r\n  getKey() {\r\n    return this.key + '/' + this.tileCoord;\r\n  }\r\n\r\n  /**\r\n   * Get the interim tile most suitable for rendering using the chain of interim\r\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\r\n   * such tile exists, the original tile is returned.\r\n   * @return {!Tile} Best tile for rendering.\r\n   */\r\n  getInterimTile() {\r\n    let tile = this.interimTile;\r\n    if (!tile) {\r\n      //empty chain\r\n      return this;\r\n    }\r\n\r\n    // find the first loaded tile and return it. Since the chain is sorted in\r\n    // decreasing order of creation time, there is no need to search the remainder\r\n    // of the list (all those tiles correspond to older requests and will be\r\n    // cleaned up by refreshInterimChain)\r\n    do {\r\n      if (tile.getState() == TileState.LOADED) {\r\n        // Show tile immediately instead of fading it in after loading, because\r\n        // the interim tile is in place already\r\n        this.transition_ = 0;\r\n        return tile;\r\n      }\r\n      tile = tile.interimTile;\r\n    } while (tile);\r\n\r\n    // we can not find a better tile\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Goes through the chain of interim tiles and discards sections of the chain\r\n   * that are no longer relevant.\r\n   */\r\n  refreshInterimChain() {\r\n    let tile = this.interimTile;\r\n    if (!tile) {\r\n      return;\r\n    }\r\n\r\n    /** @type {Tile} */\r\n    let prev = this;\r\n    do {\r\n      if (tile.getState() == TileState.LOADED) {\r\n        //we have a loaded tile, we can discard the rest of the list\r\n        //we would could abort any LOADING tile request\r\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\r\n        tile.interimTile = null;\r\n        break;\r\n      }\r\n      if (tile.getState() == TileState.LOADING) {\r\n        //keep this LOADING tile any loaded tiles later in the chain are\r\n        //older than this tile, so we're still interested in the request\r\n        prev = tile;\r\n      } else if (tile.getState() == TileState.IDLE) {\r\n        //the head of the list is the most current tile, we don't need\r\n        //to start any other requests for this chain\r\n        prev.interimTile = tile.interimTile;\r\n      } else {\r\n        prev = tile;\r\n      }\r\n      tile = prev.interimTile;\r\n    } while (tile);\r\n  }\r\n\r\n  /**\r\n   * Get the tile coordinate for this tile.\r\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoord() {\r\n    return this.tileCoord;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./TileState.js\").default} State.\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\r\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\r\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\r\n   * the tile queue and will block other requests.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @api\r\n   */\r\n  setState(state) {\r\n    if (this.state !== TileState.ERROR && this.state > state) {\r\n      throw new Error('Tile load sequence violation');\r\n    }\r\n    this.state = state;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   * @abstract\r\n   * @api\r\n   */\r\n  load() {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the alpha value for rendering.\r\n   * @param {string} id An id for the renderer.\r\n   * @param {number} time The render frame time.\r\n   * @return {number} A number between 0 and 1.\r\n   */\r\n  getAlpha(id, time) {\r\n    if (!this.transition_) {\r\n      return 1;\r\n    }\r\n\r\n    let start = this.transitionStarts_[id];\r\n    if (!start) {\r\n      start = time;\r\n      this.transitionStarts_[id] = start;\r\n    } else if (start === -1) {\r\n      return 1;\r\n    }\r\n\r\n    const delta = time - start + 1000 / 60; // avoid rendering at 0\r\n    if (delta >= this.transition_) {\r\n      return 1;\r\n    }\r\n    return easeIn(delta / this.transition_);\r\n  }\r\n\r\n  /**\r\n   * Determine if a tile is in an alpha transition.  A tile is considered in\r\n   * transition if tile.getAlpha() has not yet been called or has been called\r\n   * and returned 1.\r\n   * @param {string} id An id for the renderer.\r\n   * @return {boolean} The tile is in transition.\r\n   */\r\n  inTransition(id) {\r\n    if (!this.transition_) {\r\n      return false;\r\n    }\r\n    return this.transitionStarts_[id] !== -1;\r\n  }\r\n\r\n  /**\r\n   * Mark a transition as complete.\r\n   * @param {string} id An id for the renderer.\r\n   */\r\n  endTransition(id) {\r\n    if (this.transition_) {\r\n      this.transitionStarts_[id] = -1;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n", "/**\r\n * @module ol/ImageTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport TileState from './TileState.js';\r\nimport {createCanvasContext2D} from './dom.js';\r\nimport {listenImage} from './Image.js';\r\n\r\nclass ImageTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {string} src Image source URI.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\r\n    super(tileCoord, state, options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ = crossOrigin;\r\n\r\n    /**\r\n     * Image URI\r\n     *\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.src_ = src;\r\n\r\n    this.key = src;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement}\r\n     */\r\n    this.image_ = new Image();\r\n    if (crossOrigin !== null) {\r\n      this.image_.crossOrigin = crossOrigin;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {?function():void}\r\n     */\r\n    this.unlisten_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Tile.js\").LoadFunction}\r\n     */\r\n    this.tileLoadFunction_ = tileLoadFunction;\r\n  }\r\n\r\n  /**\r\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\r\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\r\n   */\r\n  setImage(element) {\r\n    this.image_ = element;\r\n    this.state = TileState.LOADED;\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Tracks loading or read errors.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageError_() {\r\n    this.state = TileState.ERROR;\r\n    this.unlistenImage_();\r\n    this.image_ = getBlankImage();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Tracks successful image load.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageLoad_() {\r\n    const image = /** @type {HTMLImageElement} */ (this.image_);\r\n    if (image.naturalWidth && image.naturalHeight) {\r\n      this.state = TileState.LOADED;\r\n    } else {\r\n      this.state = TileState.EMPTY;\r\n    }\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   *\r\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\r\n   * that checks for error status codes and reloads only when the status code is\r\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\r\n   * made already:\r\n   *\r\n   * ```js\r\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\r\n   * const retries = {};\r\n   * source.setTileLoadFunction((tile, src) => {\r\n   *   const image = tile.getImage();\r\n   *   fetch(src)\r\n   *     .then((response) => {\r\n   *       if (retryCodes.includes(response.status)) {\r\n   *         retries[src] = (retries[src] || 0) + 1;\r\n   *         if (retries[src] <= 3) {\r\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\r\n   *         }\r\n   *         return Promise.reject();\r\n   *       }\r\n   *       return response.blob();\r\n   *     })\r\n   *     .then((blob) => {\r\n   *       const imageUrl = URL.createObjectURL(blob);\r\n   *       image.src = imageUrl;\r\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\r\n   *     })\r\n   *     .catch(() => tile.setState(3)); // error\r\n   * });\r\n   * ```\r\n   *\r\n   * @api\r\n   */\r\n  load() {\r\n    if (this.state == TileState.ERROR) {\r\n      this.state = TileState.IDLE;\r\n      this.image_ = new Image();\r\n      if (this.crossOrigin_ !== null) {\r\n        this.image_.crossOrigin = this.crossOrigin_;\r\n      }\r\n    }\r\n    if (this.state == TileState.IDLE) {\r\n      this.state = TileState.LOADING;\r\n      this.changed();\r\n      this.tileLoadFunction_(this, this.src_);\r\n      this.unlisten_ = listenImage(\r\n        this.image_,\r\n        this.handleImageLoad_.bind(this),\r\n        this.handleImageError_.bind(this),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Discards event handlers which listen for load completion or errors.\r\n   *\r\n   * @private\r\n   */\r\n  unlistenImage_() {\r\n    if (this.unlisten_) {\r\n      this.unlisten_();\r\n      this.unlisten_ = null;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get a 1-pixel blank image.\r\n * @return {HTMLCanvasElement} Blank image.\r\n */\r\nfunction getBlankImage() {\r\n  const ctx = createCanvasContext2D(1, 1);\r\n  ctx.fillStyle = 'rgba(0,0,0,0)';\r\n  ctx.fillRect(0, 0, 1, 1);\r\n  return ctx.canvas;\r\n}\r\n\r\nexport default ImageTile;\r\n", "/**\r\n * @module ol/TileRange\r\n */\r\n\r\n/**\r\n * A representation of a contiguous block of tiles.  A tile range is specified\r\n * by its min/max tile coordinates and is inclusive of coordinates.\r\n */\r\nclass TileRange {\r\n  /**\r\n   * @param {number} minX Minimum X.\r\n   * @param {number} maxX Maximum X.\r\n   * @param {number} minY Minimum Y.\r\n   * @param {number} maxY Maximum Y.\r\n   */\r\n  constructor(minX, maxX, minY, maxY) {\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.minX = minX;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.maxX = maxX;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.minY = minY;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.maxY = maxY;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {boolean} Contains tile coordinate.\r\n   */\r\n  contains(tileCoord) {\r\n    return this.containsXY(tileCoord[1], tileCoord[2]);\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Contains.\r\n   */\r\n  containsTileRange(tileRange) {\r\n    return (\r\n      this.minX <= tileRange.minX &&\r\n      tileRange.maxX <= this.maxX &&\r\n      this.minY <= tileRange.minY &&\r\n      tileRange.maxY <= this.maxY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @return {boolean} Contains coordinate.\r\n   */\r\n  containsXY(x, y) {\r\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Equals.\r\n   */\r\n  equals(tileRange) {\r\n    return (\r\n      this.minX == tileRange.minX &&\r\n      this.minY == tileRange.minY &&\r\n      this.maxX == tileRange.maxX &&\r\n      this.maxY == tileRange.maxY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   */\r\n  extend(tileRange) {\r\n    if (tileRange.minX < this.minX) {\r\n      this.minX = tileRange.minX;\r\n    }\r\n    if (tileRange.maxX > this.maxX) {\r\n      this.maxX = tileRange.maxX;\r\n    }\r\n    if (tileRange.minY < this.minY) {\r\n      this.minY = tileRange.minY;\r\n    }\r\n    if (tileRange.maxY > this.maxY) {\r\n      this.maxY = tileRange.maxY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {number} Height.\r\n   */\r\n  getHeight() {\r\n    return this.maxY - this.minY + 1;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./size.js\").Size} Size.\r\n   */\r\n  getSize() {\r\n    return [this.getWidth(), this.getHeight()];\r\n  }\r\n\r\n  /**\r\n   * @return {number} Width.\r\n   */\r\n  getWidth() {\r\n    return this.maxX - this.minX + 1;\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Intersects.\r\n   */\r\n  intersects(tileRange) {\r\n    return (\r\n      this.minX <= tileRange.maxX &&\r\n      this.maxX >= tileRange.minX &&\r\n      this.minY <= tileRange.maxY &&\r\n      this.maxY >= tileRange.minY\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} minX Minimum X.\r\n * @param {number} maxX Maximum X.\r\n * @param {number} minY Minimum Y.\r\n * @param {number} maxY Maximum Y.\r\n * @param {TileRange} [tileRange] TileRange.\r\n * @return {TileRange} Tile range.\r\n */\r\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\r\n  if (tileRange !== undefined) {\r\n    tileRange.minX = minX;\r\n    tileRange.maxX = maxX;\r\n    tileRange.minY = minY;\r\n    tileRange.maxY = maxY;\r\n    return tileRange;\r\n  }\r\n  return new TileRange(minX, maxX, minY, maxY);\r\n}\r\n\r\nexport default TileRange;\r\n"],
  "mappings": "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",
  "names": []
}
