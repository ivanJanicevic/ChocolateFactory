{
  "version": 3,
  "sources": ["../../ol/render/canvas/Instruction.js", "../../ol/render/VectorContext.js", "../../ol/render/canvas/Builder.js", "../../ol/render/canvas/ImageBuilder.js", "../../ol/render/canvas/LineStringBuilder.js", "../../ol/render/canvas/PolygonBuilder.js", "../../ol/geom/flat/linechunk.js", "../../ol/geom/flat/straightchunk.js", "../../ol/render/canvas/TextBuilder.js", "../../ol/render/canvas/BuilderGroup.js", "../../ol/geom/flat/textpath.js", "../../ol/render/canvas/Executor.js", "../../ol/render/canvas/ExecutorGroup.js", "../../ol/render/canvas/Immediate.js", "../../ol/render/canvas/hitdetect.js", "../../ol/renderer/vector.js", "../../ol/renderer/canvas/VectorLayer.js", "../../ol/layer/Vector.js"],
  "sourcesContent": ["/**\r\n * @module ol/render/canvas/Instruction\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nconst Instruction = {\r\n  BEGIN_GEOMETRY: 0,\r\n  BEGIN_PATH: 1,\r\n  CIRCLE: 2,\r\n  CLOSE_PATH: 3,\r\n  CUSTOM: 4,\r\n  DRAW_CHARS: 5,\r\n  DRAW_IMAGE: 6,\r\n  END_GEOMETRY: 7,\r\n  FILL: 8,\r\n  MOVE_TO_LINE_TO: 9,\r\n  SET_FILL_STYLE: 10,\r\n  SET_STROKE_STYLE: 11,\r\n  STROKE: 12,\r\n};\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const fillInstruction = [Instruction.FILL];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const strokeInstruction = [Instruction.STROKE];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const beginPathInstruction = [Instruction.BEGIN_PATH];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const closePathInstruction = [Instruction.CLOSE_PATH];\r\n\r\nexport default Instruction;\r\n", "/**\r\n * @module ol/render/VectorContext\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Context for drawing geometries.  A vector context is available on render\r\n * events and does not need to be constructed directly.\r\n * @api\r\n */\r\nclass VectorContext {\r\n  /**\r\n   * Render a geometry with a custom renderer.\r\n   *\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {}\r\n\r\n  /**\r\n   * Render a geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\r\n   */\r\n  drawGeometry(geometry) {}\r\n\r\n  /**\r\n   * Set the rendering style.\r\n   *\r\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\r\n   */\r\n  setStyle(style) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawCircle(circleGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../style/Style.js\").default} style Style.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawFeature(feature, style, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawGeometryCollection(geometryCollectionGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawLineString(lineStringGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiLineString(multiLineStringGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiPoint(multiPointGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiPolygon(multiPolygonGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawPoint(pointGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawPolygon(polygonGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawText(geometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\r\n   */\r\n  setImageStyle(imageStyle, declutterImageWithText) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\r\n   */\r\n  setTextStyle(textStyle, declutterImageWithText) {}\r\n}\r\n\r\nexport default VectorContext;\r\n", "/**\r\n * @module ol/render/canvas/Builder\r\n */\r\nimport CanvasInstruction from './Instruction.js';\r\nimport Relationship from '../../extent/Relationship.js';\r\nimport VectorContext from '../VectorContext.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  buffer,\r\n  clone,\r\n  containsCoordinate,\r\n  coordinateRelationship,\r\n} from '../../extent.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n} from '../canvas.js';\r\nimport {equals, reverseSubArray} from '../../array.js';\r\nimport {\r\n  inflateCoordinates,\r\n  inflateCoordinatesArray,\r\n  inflateMultiCoordinatesArray,\r\n} from '../../geom/flat/inflate.js';\r\n\r\nclass CanvasBuilder extends VectorContext {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.tolerance = tolerance;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent = maxExtent;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.maxLineWidth = 0;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */\r\n    this.beginGeometryInstruction1_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */\r\n    this.beginGeometryInstruction2_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.bufferedMaxExtent_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.instructions = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.coordinates = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../coordinate.js\").Coordinate}\r\n     */\r\n    this.tmpCoordinate_ = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.hitDetectionInstructions = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../canvas.js\").FillStrokeState}\r\n     */\r\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Array<number>} dashArray Dash array.\r\n   * @return {Array<number>} Dash array with pixel ratio applied\r\n   */\r\n  applyPixelRatio(dashArray) {\r\n    const pixelRatio = this.pixelRatio;\r\n    return pixelRatio == 1\r\n      ? dashArray\r\n      : dashArray.map(function (dash) {\r\n          return dash * pixelRatio;\r\n        });\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} stride Stride.\r\n   * @protected\r\n   * @return {number} My end\r\n   */\r\n  appendFlatPointCoordinates(flatCoordinates, stride) {\r\n    const extent = this.getBufferedMaxExtent();\r\n    const tmpCoord = this.tmpCoordinate_;\r\n    const coordinates = this.coordinates;\r\n    let myEnd = coordinates.length;\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      tmpCoord[0] = flatCoordinates[i];\r\n      tmpCoord[1] = flatCoordinates[i + 1];\r\n      if (containsCoordinate(extent, tmpCoord)) {\r\n        coordinates[myEnd++] = tmpCoord[0];\r\n        coordinates[myEnd++] = tmpCoord[1];\r\n      }\r\n    }\r\n    return myEnd;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} closed Last input coordinate equals first.\r\n   * @param {boolean} skipFirst Skip first coordinate.\r\n   * @protected\r\n   * @return {number} My end.\r\n   */\r\n  appendFlatLineCoordinates(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    closed,\r\n    skipFirst,\r\n  ) {\r\n    const coordinates = this.coordinates;\r\n    let myEnd = coordinates.length;\r\n    const extent = this.getBufferedMaxExtent();\r\n    if (skipFirst) {\r\n      offset += stride;\r\n    }\r\n    let lastXCoord = flatCoordinates[offset];\r\n    let lastYCoord = flatCoordinates[offset + 1];\r\n    const nextCoord = this.tmpCoordinate_;\r\n    let skipped = true;\r\n\r\n    let i, lastRel, nextRel;\r\n    for (i = offset + stride; i < end; i += stride) {\r\n      nextCoord[0] = flatCoordinates[i];\r\n      nextCoord[1] = flatCoordinates[i + 1];\r\n      nextRel = coordinateRelationship(extent, nextCoord);\r\n      if (nextRel !== lastRel) {\r\n        if (skipped) {\r\n          coordinates[myEnd++] = lastXCoord;\r\n          coordinates[myEnd++] = lastYCoord;\r\n          skipped = false;\r\n        }\r\n        coordinates[myEnd++] = nextCoord[0];\r\n        coordinates[myEnd++] = nextCoord[1];\r\n      } else if (nextRel === Relationship.INTERSECTING) {\r\n        coordinates[myEnd++] = nextCoord[0];\r\n        coordinates[myEnd++] = nextCoord[1];\r\n        skipped = false;\r\n      } else {\r\n        skipped = true;\r\n      }\r\n      lastXCoord = nextCoord[0];\r\n      lastYCoord = nextCoord[1];\r\n      lastRel = nextRel;\r\n    }\r\n\r\n    // Last coordinate equals first or only one point to append:\r\n    if ((closed && skipped) || i === offset + stride) {\r\n      coordinates[myEnd++] = lastXCoord;\r\n      coordinates[myEnd++] = lastYCoord;\r\n    }\r\n    return myEnd;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Array<number>} builderEnds Builder ends.\r\n   * @return {number} Offset.\r\n   */\r\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const builderEnd = this.appendFlatLineCoordinates(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        false,\r\n        false,\r\n      );\r\n      builderEnds.push(builderEnd);\r\n      offset = end;\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {\r\n    this.beginGeometry(geometry, feature, index);\r\n\r\n    const type = geometry.getType();\r\n    const stride = geometry.getStride();\r\n    const builderBegin = this.coordinates.length;\r\n\r\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\r\n    let offset;\r\n\r\n    switch (type) {\r\n      case 'MultiPolygon':\r\n        flatCoordinates =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getOrientedFlatCoordinates();\r\n        builderEndss = [];\r\n        const endss =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getEndss();\r\n        offset = 0;\r\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n          const myEnds = [];\r\n          offset = this.drawCustomCoordinates_(\r\n            flatCoordinates,\r\n            offset,\r\n            endss[i],\r\n            stride,\r\n            myEnds,\r\n          );\r\n          builderEndss.push(myEnds);\r\n        }\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEndss,\r\n          geometry,\r\n          renderer,\r\n          inflateMultiCoordinatesArray,\r\n          index,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEndss,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateMultiCoordinatesArray,\r\n          index,\r\n        ]);\r\n        break;\r\n      case 'Polygon':\r\n      case 'MultiLineString':\r\n        builderEnds = [];\r\n        flatCoordinates =\r\n          type == 'Polygon'\r\n            ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n                geometry\r\n              ).getOrientedFlatCoordinates()\r\n            : geometry.getFlatCoordinates();\r\n        offset = this.drawCustomCoordinates_(\r\n          flatCoordinates,\r\n          0,\r\n          /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\r\n            geometry\r\n          ).getEnds(),\r\n          stride,\r\n          builderEnds,\r\n        );\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnds,\r\n          geometry,\r\n          renderer,\r\n          inflateCoordinatesArray,\r\n          index,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnds,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateCoordinatesArray,\r\n          index,\r\n        ]);\r\n        break;\r\n      case 'LineString':\r\n      case 'Circle':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        builderEnd = this.appendFlatLineCoordinates(\r\n          flatCoordinates,\r\n          0,\r\n          flatCoordinates.length,\r\n          stride,\r\n          false,\r\n          false,\r\n        );\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          renderer,\r\n          inflateCoordinates,\r\n          index,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateCoordinates,\r\n          index,\r\n        ]);\r\n        break;\r\n      case 'MultiPoint':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n\r\n        if (builderEnd > builderBegin) {\r\n          this.instructions.push([\r\n            CanvasInstruction.CUSTOM,\r\n            builderBegin,\r\n            builderEnd,\r\n            geometry,\r\n            renderer,\r\n            inflateCoordinates,\r\n            index,\r\n          ]);\r\n          this.hitDetectionInstructions.push([\r\n            CanvasInstruction.CUSTOM,\r\n            builderBegin,\r\n            builderEnd,\r\n            geometry,\r\n            hitDetectionRenderer || renderer,\r\n            inflateCoordinates,\r\n            index,\r\n          ]);\r\n        }\r\n        break;\r\n      case 'Point':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\r\n        builderEnd = this.coordinates.length;\r\n\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          renderer,\r\n          undefined,\r\n          index,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          undefined,\r\n          index,\r\n        ]);\r\n        break;\r\n      default:\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} index Render order index\r\n   */\r\n  beginGeometry(geometry, feature, index) {\r\n    this.beginGeometryInstruction1_ = [\r\n      CanvasInstruction.BEGIN_GEOMETRY,\r\n      feature,\r\n      0,\r\n      geometry,\r\n      index,\r\n    ];\r\n    this.instructions.push(this.beginGeometryInstruction1_);\r\n    this.beginGeometryInstruction2_ = [\r\n      CanvasInstruction.BEGIN_GEOMETRY,\r\n      feature,\r\n      0,\r\n      geometry,\r\n      index,\r\n    ];\r\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    return {\r\n      instructions: this.instructions,\r\n      hitDetectionInstructions: this.hitDetectionInstructions,\r\n      coordinates: this.coordinates,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reverse the hit detection instructions.\r\n   */\r\n  reverseHitDetectionInstructions() {\r\n    const hitDetectionInstructions = this.hitDetectionInstructions;\r\n    // step 1 - reverse array\r\n    hitDetectionInstructions.reverse();\r\n    // step 2 - reverse instructions within geometry blocks\r\n    let i;\r\n    const n = hitDetectionInstructions.length;\r\n    let instruction;\r\n    let type;\r\n    let begin = -1;\r\n    for (i = 0; i < n; ++i) {\r\n      instruction = hitDetectionInstructions[i];\r\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\r\n      if (type == CanvasInstruction.END_GEOMETRY) {\r\n        begin = i;\r\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\r\n        instruction[2] = i;\r\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\r\n        begin = -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {\r\n    const state = this.state;\r\n    if (fillStyle) {\r\n      const fillStyleColor = fillStyle.getColor();\r\n      state.fillPatternScale =\r\n        fillStyleColor &&\r\n        typeof fillStyleColor === 'object' &&\r\n        'src' in fillStyleColor\r\n          ? this.pixelRatio\r\n          : 1;\r\n      state.fillStyle = asColorLike(\r\n        fillStyleColor ? fillStyleColor : defaultFillStyle,\r\n      );\r\n    } else {\r\n      state.fillStyle = undefined;\r\n    }\r\n    if (strokeStyle) {\r\n      const strokeStyleColor = strokeStyle.getColor();\r\n      state.strokeStyle = asColorLike(\r\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,\r\n      );\r\n      const strokeStyleLineCap = strokeStyle.getLineCap();\r\n      state.lineCap =\r\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\r\n      const strokeStyleLineDash = strokeStyle.getLineDash();\r\n      state.lineDash = strokeStyleLineDash\r\n        ? strokeStyleLineDash.slice()\r\n        : defaultLineDash;\r\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\r\n      state.lineDashOffset = strokeStyleLineDashOffset\r\n        ? strokeStyleLineDashOffset\r\n        : defaultLineDashOffset;\r\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\r\n      state.lineJoin =\r\n        strokeStyleLineJoin !== undefined\r\n          ? strokeStyleLineJoin\r\n          : defaultLineJoin;\r\n      const strokeStyleWidth = strokeStyle.getWidth();\r\n      state.lineWidth =\r\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\r\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\r\n      state.miterLimit =\r\n        strokeStyleMiterLimit !== undefined\r\n          ? strokeStyleMiterLimit\r\n          : defaultMiterLimit;\r\n\r\n      if (state.lineWidth > this.maxLineWidth) {\r\n        this.maxLineWidth = state.lineWidth;\r\n        // invalidate the buffered max extent cache\r\n        this.bufferedMaxExtent_ = null;\r\n      }\r\n    } else {\r\n      state.strokeStyle = undefined;\r\n      state.lineCap = undefined;\r\n      state.lineDash = null;\r\n      state.lineDashOffset = undefined;\r\n      state.lineJoin = undefined;\r\n      state.lineWidth = undefined;\r\n      state.miterLimit = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Fill instruction.\r\n   */\r\n  createFill(state) {\r\n    const fillStyle = state.fillStyle;\r\n    /** @type {Array<*>} */\r\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\r\n    if (typeof fillStyle !== 'string') {\r\n      // Fill is a pattern or gradient - align and scale it!\r\n      fillInstruction.push(state.fillPatternScale);\r\n    }\r\n    return fillInstruction;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   */\r\n  applyStroke(state) {\r\n    this.instructions.push(this.createStroke(state));\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Stroke instruction.\r\n   */\r\n  createStroke(state) {\r\n    return [\r\n      CanvasInstruction.SET_STROKE_STYLE,\r\n      state.strokeStyle,\r\n      state.lineWidth * this.pixelRatio,\r\n      state.lineCap,\r\n      state.lineJoin,\r\n      state.miterLimit,\r\n      this.applyPixelRatio(state.lineDash),\r\n      state.lineDashOffset * this.pixelRatio,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\r\n   */\r\n  updateFillStyle(state, createFill) {\r\n    const fillStyle = state.fillStyle;\r\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\r\n      if (fillStyle !== undefined) {\r\n        this.instructions.push(createFill.call(this, state));\r\n      }\r\n      state.currentFillStyle = fillStyle;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\r\n   */\r\n  updateStrokeStyle(state, applyStroke) {\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineCap = state.lineCap;\r\n    const lineDash = state.lineDash;\r\n    const lineDashOffset = state.lineDashOffset;\r\n    const lineJoin = state.lineJoin;\r\n    const lineWidth = state.lineWidth;\r\n    const miterLimit = state.miterLimit;\r\n    if (\r\n      state.currentStrokeStyle != strokeStyle ||\r\n      state.currentLineCap != lineCap ||\r\n      (lineDash != state.currentLineDash &&\r\n        !equals(state.currentLineDash, lineDash)) ||\r\n      state.currentLineDashOffset != lineDashOffset ||\r\n      state.currentLineJoin != lineJoin ||\r\n      state.currentLineWidth != lineWidth ||\r\n      state.currentMiterLimit != miterLimit\r\n    ) {\r\n      if (strokeStyle !== undefined) {\r\n        applyStroke.call(this, state);\r\n      }\r\n      state.currentStrokeStyle = strokeStyle;\r\n      state.currentLineCap = lineCap;\r\n      state.currentLineDash = lineDash;\r\n      state.currentLineDashOffset = lineDashOffset;\r\n      state.currentLineJoin = lineJoin;\r\n      state.currentLineWidth = lineWidth;\r\n      state.currentMiterLimit = miterLimit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  endGeometry(feature) {\r\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\r\n    this.beginGeometryInstruction1_ = null;\r\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\r\n    this.beginGeometryInstruction2_ = null;\r\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\r\n    this.instructions.push(endGeometryInstruction);\r\n    this.hitDetectionInstructions.push(endGeometryInstruction);\r\n  }\r\n\r\n  /**\r\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\r\n   * provided to the constructor.  To account for symbolizers that may intersect\r\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\r\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\r\n   * @protected\r\n   */\r\n  getBufferedMaxExtent() {\r\n    if (!this.bufferedMaxExtent_) {\r\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\r\n      if (this.maxLineWidth > 0) {\r\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\r\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\r\n      }\r\n    }\r\n    return this.bufferedMaxExtent_;\r\n  }\r\n}\r\n\r\nexport default CanvasBuilder;\r\n", "/**\r\n * @module ol/render/canvas/ImageBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction from './Instruction.js';\r\nimport {containsCoordinate} from '../../extent.js';\r\n\r\nclass CanvasImageBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.hitDetectionImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.imagePixelRatio_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.anchorX_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.anchorY_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.height_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.opacity_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.originX_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.originY_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../style/Style.js').DeclutterMode}\r\n     */\r\n    this.declutterMode_ = undefined;\r\n\r\n    /**\r\n     * Data shared with a text builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */\r\n    this.declutterImageWithText_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawPoint(pointGeometry, feature, index) {\r\n    if (\r\n      !this.image_ ||\r\n      (this.maxExtent &&\r\n        !containsCoordinate(this.maxExtent, pointGeometry.getFlatCoordinates()))\r\n    ) {\r\n      return;\r\n    }\r\n    this.beginGeometry(pointGeometry, feature, index);\r\n    const flatCoordinates = pointGeometry.getFlatCoordinates();\r\n    const stride = pointGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.image_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_ * this.imagePixelRatio_,\r\n      this.anchorY_ * this.imagePixelRatio_,\r\n      Math.ceil(this.height_ * this.imagePixelRatio_),\r\n      this.opacity_,\r\n      this.originX_ * this.imagePixelRatio_,\r\n      this.originY_ * this.imagePixelRatio_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      [\r\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\r\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\r\n      ],\r\n      Math.ceil(this.width_ * this.imagePixelRatio_),\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.hitDetectionImage_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_,\r\n      this.anchorY_,\r\n      this.height_,\r\n      1,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      this.scale_,\r\n      this.width_,\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiPoint(multiPointGeometry, feature, index) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    this.beginGeometry(multiPointGeometry, feature, index);\r\n    const flatCoordinates = multiPointGeometry.getFlatCoordinates();\r\n    const filteredFlatCoordinates = [];\r\n    for (\r\n      let i = 0, ii = flatCoordinates.length;\r\n      i < ii;\r\n      i += multiPointGeometry.getStride()\r\n    ) {\r\n      if (\r\n        !this.maxExtent ||\r\n        containsCoordinate(this.maxExtent, flatCoordinates.slice(i, i + 2))\r\n      ) {\r\n        filteredFlatCoordinates.push(\r\n          flatCoordinates[i],\r\n          flatCoordinates[i + 1],\r\n        );\r\n      }\r\n    }\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatPointCoordinates(filteredFlatCoordinates, 2);\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.image_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_ * this.imagePixelRatio_,\r\n      this.anchorY_ * this.imagePixelRatio_,\r\n      Math.ceil(this.height_ * this.imagePixelRatio_),\r\n      this.opacity_,\r\n      this.originX_ * this.imagePixelRatio_,\r\n      this.originY_ * this.imagePixelRatio_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      [\r\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\r\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\r\n      ],\r\n      Math.ceil(this.width_ * this.imagePixelRatio_),\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.hitDetectionImage_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_,\r\n      this.anchorY_,\r\n      this.height_,\r\n      1,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      this.scale_,\r\n      this.width_,\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    this.reverseHitDetectionInstructions();\r\n    // FIXME this doesn't really protect us against further calls to draw*Geometry\r\n    this.anchorX_ = undefined;\r\n    this.anchorY_ = undefined;\r\n    this.hitDetectionImage_ = null;\r\n    this.image_ = null;\r\n    this.imagePixelRatio_ = undefined;\r\n    this.height_ = undefined;\r\n    this.scale_ = undefined;\r\n    this.opacity_ = undefined;\r\n    this.originX_ = undefined;\r\n    this.originY_ = undefined;\r\n    this.rotateWithView_ = undefined;\r\n    this.rotation_ = undefined;\r\n    this.width_ = undefined;\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   * @param {Object} [sharedData] Shared data.\r\n   */\r\n  setImageStyle(imageStyle, sharedData) {\r\n    const anchor = imageStyle.getAnchor();\r\n    const size = imageStyle.getSize();\r\n    const origin = imageStyle.getOrigin();\r\n    this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\r\n    this.anchorX_ = anchor[0];\r\n    this.anchorY_ = anchor[1];\r\n    this.hitDetectionImage_ = imageStyle.getHitDetectionImage();\r\n    this.image_ = imageStyle.getImage(this.pixelRatio);\r\n    this.height_ = size[1];\r\n    this.opacity_ = imageStyle.getOpacity();\r\n    this.originX_ = origin[0];\r\n    this.originY_ = origin[1];\r\n    this.rotateWithView_ = imageStyle.getRotateWithView();\r\n    this.rotation_ = imageStyle.getRotation();\r\n    this.scale_ = imageStyle.getScaleArray();\r\n    this.width_ = size[0];\r\n    this.declutterMode_ = imageStyle.getDeclutterMode();\r\n    this.declutterImageWithText_ = sharedData;\r\n  }\r\n}\r\n\r\nexport default CanvasImageBuilder;\r\n", "/**\r\n * @module ol/render/canvas/LineStringBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction, {\r\n  beginPathInstruction,\r\n  strokeInstruction,\r\n} from './Instruction.js';\r\nimport {defaultLineDash, defaultLineDashOffset} from '../canvas.js';\r\n\r\nclass CanvasLineStringBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} end.\r\n   */\r\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatLineCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      false,\r\n      false,\r\n    );\r\n    const moveToLineToInstruction = [\r\n      CanvasInstruction.MOVE_TO_LINE_TO,\r\n      myBegin,\r\n      myEnd,\r\n    ];\r\n    this.instructions.push(moveToLineToInstruction);\r\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\r\n    return end;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawLineString(lineStringGeometry, feature, index) {\r\n    const state = this.state;\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineWidth = state.lineWidth;\r\n    if (strokeStyle === undefined || lineWidth === undefined) {\r\n      return;\r\n    }\r\n    this.updateStrokeStyle(state, this.applyStroke);\r\n    this.beginGeometry(lineStringGeometry, feature, index);\r\n    this.hitDetectionInstructions.push(\r\n      [\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ],\r\n      beginPathInstruction,\r\n    );\r\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\r\n    const stride = lineStringGeometry.getStride();\r\n    this.drawFlatCoordinates_(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n    );\r\n    this.hitDetectionInstructions.push(strokeInstruction);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiLineString(multiLineStringGeometry, feature, index) {\r\n    const state = this.state;\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineWidth = state.lineWidth;\r\n    if (strokeStyle === undefined || lineWidth === undefined) {\r\n      return;\r\n    }\r\n    this.updateStrokeStyle(state, this.applyStroke);\r\n    this.beginGeometry(multiLineStringGeometry, feature, index);\r\n    this.hitDetectionInstructions.push(\r\n      [\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ],\r\n      beginPathInstruction,\r\n    );\r\n    const ends = multiLineStringGeometry.getEnds();\r\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\r\n    const stride = multiLineStringGeometry.getStride();\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      offset = this.drawFlatCoordinates_(\r\n        flatCoordinates,\r\n        offset,\r\n        /** @type {number} */ (ends[i]),\r\n        stride,\r\n      );\r\n    }\r\n    this.hitDetectionInstructions.push(strokeInstruction);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    const state = this.state;\r\n    if (\r\n      state.lastStroke != undefined &&\r\n      state.lastStroke != this.coordinates.length\r\n    ) {\r\n      this.instructions.push(strokeInstruction);\r\n    }\r\n    this.reverseHitDetectionInstructions();\r\n    this.state = null;\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   */\r\n  applyStroke(state) {\r\n    if (\r\n      state.lastStroke != undefined &&\r\n      state.lastStroke != this.coordinates.length\r\n    ) {\r\n      this.instructions.push(strokeInstruction);\r\n      state.lastStroke = this.coordinates.length;\r\n    }\r\n    state.lastStroke = 0;\r\n    super.applyStroke(state);\r\n    this.instructions.push(beginPathInstruction);\r\n  }\r\n}\r\n\r\nexport default CanvasLineStringBuilder;\r\n", "/**\r\n * @module ol/render/canvas/PolygonBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction, {\r\n  beginPathInstruction,\r\n  closePathInstruction,\r\n  fillInstruction,\r\n  strokeInstruction,\r\n} from './Instruction.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n} from '../canvas.js';\r\nimport {snap} from '../../geom/flat/simplify.js';\r\n\r\nclass CanvasPolygonBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */\r\n  drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\r\n    const state = this.state;\r\n    const fill = state.fillStyle !== undefined;\r\n    const stroke = state.strokeStyle !== undefined;\r\n    const numEnds = ends.length;\r\n    this.instructions.push(beginPathInstruction);\r\n    this.hitDetectionInstructions.push(beginPathInstruction);\r\n    for (let i = 0; i < numEnds; ++i) {\r\n      const end = ends[i];\r\n      const myBegin = this.coordinates.length;\r\n      const myEnd = this.appendFlatLineCoordinates(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        true,\r\n        !stroke,\r\n      );\r\n      const moveToLineToInstruction = [\r\n        CanvasInstruction.MOVE_TO_LINE_TO,\r\n        myBegin,\r\n        myEnd,\r\n      ];\r\n      this.instructions.push(moveToLineToInstruction);\r\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\r\n      if (stroke) {\r\n        // Performance optimization: only call closePath() when we have a stroke.\r\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\r\n        this.instructions.push(closePathInstruction);\r\n        this.hitDetectionInstructions.push(closePathInstruction);\r\n      }\r\n      offset = end;\r\n    }\r\n    if (fill) {\r\n      this.instructions.push(fillInstruction);\r\n      this.hitDetectionInstructions.push(fillInstruction);\r\n    }\r\n    if (stroke) {\r\n      this.instructions.push(strokeInstruction);\r\n      this.hitDetectionInstructions.push(strokeInstruction);\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawCircle(circleGeometry, feature, index) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(circleGeometry, feature, index);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const flatCoordinates = circleGeometry.getFlatCoordinates();\r\n    const stride = circleGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    this.appendFlatLineCoordinates(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n      false,\r\n      false,\r\n    );\r\n    const circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\r\n    this.instructions.push(beginPathInstruction, circleInstruction);\r\n    this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\r\n    if (state.fillStyle !== undefined) {\r\n      this.instructions.push(fillInstruction);\r\n      this.hitDetectionInstructions.push(fillInstruction);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.instructions.push(strokeInstruction);\r\n      this.hitDetectionInstructions.push(strokeInstruction);\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawPolygon(polygonGeometry, feature, index) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(polygonGeometry, feature, index);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const ends = polygonGeometry.getEnds();\r\n    const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\r\n    const stride = polygonGeometry.getStride();\r\n    this.drawFlatCoordinatess_(\r\n      flatCoordinates,\r\n      0,\r\n      /** @type {Array<number>} */ (ends),\r\n      stride,\r\n    );\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiPolygon(multiPolygonGeometry, feature, index) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(multiPolygonGeometry, feature, index);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const endss = multiPolygonGeometry.getEndss();\r\n    const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\r\n    const stride = multiPolygonGeometry.getStride();\r\n    let offset = 0;\r\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n      offset = this.drawFlatCoordinatess_(\r\n        flatCoordinates,\r\n        offset,\r\n        endss[i],\r\n        stride,\r\n      );\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    this.reverseHitDetectionInstructions();\r\n    this.state = null;\r\n    // We want to preserve topology when drawing polygons.  Polygons are\r\n    // simplified using quantization and point elimination. However, we might\r\n    // have received a mix of quantized and non-quantized geometries, so ensure\r\n    // that all are quantized by quantizing all coordinates in the batch.\r\n    const tolerance = this.tolerance;\r\n    if (tolerance !== 0) {\r\n      const coordinates = this.coordinates;\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = snap(coordinates[i], tolerance);\r\n      }\r\n    }\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  setFillStrokeStyles_() {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    if (fillStyle !== undefined) {\r\n      this.updateFillStyle(state, this.createFill);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.updateStrokeStyle(state, this.applyStroke);\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasPolygonBuilder;\r\n", "import {lerp} from '../../math.js';\r\n\r\n/**\r\n * Creates chunks of equal length from a linestring\r\n * @param {number} chunkLength Length of each chunk.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Start offset of the `flatCoordinates`.\r\n * @param {number} end End offset of the `flatCoordinates`.\r\n * @param {number} stride Stride.\r\n * @return {Array<Array<number>>} Chunks of linestrings with stride 2.\r\n */\r\nexport function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {\r\n  const chunks = [];\r\n  let cursor = offset;\r\n  let chunkM = 0;\r\n  let currentChunk = flatCoordinates.slice(offset, 2);\r\n  while (chunkM < chunkLength && cursor + stride < end) {\r\n    const [x1, y1] = currentChunk.slice(-2);\r\n    const x2 = flatCoordinates[cursor + stride];\r\n    const y2 = flatCoordinates[cursor + stride + 1];\r\n    const segmentLength = Math.sqrt(\r\n      (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1),\r\n    );\r\n    chunkM += segmentLength;\r\n    if (chunkM >= chunkLength) {\r\n      const m = (chunkLength - chunkM + segmentLength) / segmentLength;\r\n      const x = lerp(x1, x2, m);\r\n      const y = lerp(y1, y2, m);\r\n      currentChunk.push(x, y);\r\n      chunks.push(currentChunk);\r\n      currentChunk = [x, y];\r\n      if (chunkM == chunkLength) {\r\n        cursor += stride;\r\n      }\r\n      chunkM = 0;\r\n    } else if (chunkM < chunkLength) {\r\n      currentChunk.push(\r\n        flatCoordinates[cursor + stride],\r\n        flatCoordinates[cursor + stride + 1],\r\n      );\r\n      cursor += stride;\r\n    } else {\r\n      const missing = segmentLength - chunkM;\r\n      const x = lerp(x1, x2, missing / segmentLength);\r\n      const y = lerp(y1, y2, missing / segmentLength);\r\n      currentChunk.push(x, y);\r\n      chunks.push(currentChunk);\r\n      currentChunk = [x, y];\r\n      chunkM = 0;\r\n      cursor += stride;\r\n    }\r\n  }\r\n  if (chunkM > 0) {\r\n    chunks.push(currentChunk);\r\n  }\r\n  return chunks;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/straightchunk\r\n */\r\n\r\n/**\r\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {Array<number>} Start and end of the first suitable chunk of the\r\n * given `flatCoordinates`.\r\n */\r\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\r\n  let chunkStart = offset;\r\n  let chunkEnd = offset;\r\n  let chunkM = 0;\r\n  let m = 0;\r\n  let start = offset;\r\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\r\n  for (i = offset; i < end; i += stride) {\r\n    const x2 = flatCoordinates[i];\r\n    const y2 = flatCoordinates[i + 1];\r\n    if (x1 !== undefined) {\r\n      x23 = x2 - x1;\r\n      y23 = y2 - y1;\r\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\r\n      if (x12 !== undefined) {\r\n        m += m12;\r\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\r\n        if (acos > maxAngle) {\r\n          if (m > chunkM) {\r\n            chunkM = m;\r\n            chunkStart = start;\r\n            chunkEnd = i;\r\n          }\r\n          m = 0;\r\n          start = i - stride;\r\n        }\r\n      }\r\n      m12 = m23;\r\n      x12 = x23;\r\n      y12 = y23;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  m += m23;\r\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\r\n}\r\n", "/**\r\n * @module ol/render/canvas/TextBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction from './Instruction.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultFont,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultPadding,\r\n  defaultStrokeStyle,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n  registerFont,\r\n} from '../canvas.js';\r\nimport {getUid} from '../../util.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {lineChunk} from '../../geom/flat/linechunk.js';\r\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\r\n/**\r\n * @const\r\n * @type {{left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1}}\r\n */\r\nexport const TEXT_ALIGN = {\r\n  'left': 0,\r\n  'center': 0.5,\r\n  'right': 1,\r\n  'top': 0,\r\n  'middle': 0.5,\r\n  'hanging': 0.2,\r\n  'alphabetic': 0.8,\r\n  'ideographic': 0.8,\r\n  'bottom': 1,\r\n};\r\n\r\nclass CanvasTextBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<HTMLCanvasElement>}\r\n     */\r\n    this.labels_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>}\r\n     */\r\n    this.text_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.textRotateWithView_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.textFillState_ = null;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */\r\n    this.fillStates = {};\r\n    this.fillStates[defaultFillStyle] = {fillStyle: defaultFillStyle};\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.textStrokeState_ = null;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */\r\n    this.strokeStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../canvas.js\").TextState}\r\n     */\r\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */\r\n    this.textStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.textKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.fillKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.strokeKey_ = '';\r\n\r\n    /**\r\n     * @type {import('../../style/Style.js').DeclutterMode}\r\n     */\r\n    this.declutterMode_ = undefined;\r\n\r\n    /**\r\n     * Data shared with an image builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */\r\n    this.declutterImageWithText_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    const instructions = super.finish();\r\n    instructions.textStates = this.textStates;\r\n    instructions.fillStates = this.fillStates;\r\n    instructions.strokeStates = this.strokeStates;\r\n    return instructions;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawText(geometry, feature, index) {\r\n    const fillState = this.textFillState_;\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\r\n      return;\r\n    }\r\n\r\n    const coordinates = this.coordinates;\r\n    let begin = coordinates.length;\r\n\r\n    const geometryType = geometry.getType();\r\n    let flatCoordinates = null;\r\n    let stride = geometry.getStride();\r\n\r\n    if (\r\n      textState.placement === 'line' &&\r\n      (geometryType == 'LineString' ||\r\n        geometryType == 'MultiLineString' ||\r\n        geometryType == 'Polygon' ||\r\n        geometryType == 'MultiPolygon')\r\n    ) {\r\n      if (!intersects(this.maxExtent, geometry.getExtent())) {\r\n        return;\r\n      }\r\n      let ends;\r\n      flatCoordinates = geometry.getFlatCoordinates();\r\n      if (geometryType == 'LineString') {\r\n        ends = [flatCoordinates.length];\r\n      } else if (geometryType == 'MultiLineString') {\r\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n          geometry\r\n        ).getEnds();\r\n      } else if (geometryType == 'Polygon') {\r\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\r\n          .getEnds()\r\n          .slice(0, 1);\r\n      } else if (geometryType == 'MultiPolygon') {\r\n        const endss =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getEndss();\r\n        ends = [];\r\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n          ends.push(endss[i][0]);\r\n        }\r\n      }\r\n      this.beginGeometry(geometry, feature, index);\r\n      const repeat = textState.repeat;\r\n      const textAlign = repeat ? undefined : textState.textAlign;\r\n      // No `justify` support for line placement.\r\n      let flatOffset = 0;\r\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\r\n        let chunks;\r\n        if (repeat) {\r\n          chunks = lineChunk(\r\n            repeat * this.resolution,\r\n            flatCoordinates,\r\n            flatOffset,\r\n            ends[o],\r\n            stride,\r\n          );\r\n        } else {\r\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\r\n        }\r\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\r\n          const chunk = chunks[c];\r\n          let chunkBegin = 0;\r\n          let chunkEnd = chunk.length;\r\n          if (textAlign == undefined) {\r\n            const range = matchingChunk(\r\n              textState.maxAngle,\r\n              chunk,\r\n              0,\r\n              chunk.length,\r\n              2,\r\n            );\r\n            chunkBegin = range[0];\r\n            chunkEnd = range[1];\r\n          }\r\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\r\n            coordinates.push(chunk[i], chunk[i + 1]);\r\n          }\r\n          const end = coordinates.length;\r\n          flatOffset = ends[o];\r\n          this.drawChars_(begin, end);\r\n          begin = end;\r\n        }\r\n      }\r\n      this.endGeometry(feature);\r\n    } else {\r\n      let geometryWidths = textState.overflow ? null : [];\r\n      switch (geometryType) {\r\n        case 'Point':\r\n        case 'MultiPoint':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\r\n              geometry\r\n            ).getFlatCoordinates();\r\n          break;\r\n        case 'LineString':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\r\n              geometry\r\n            ).getFlatMidpoint();\r\n          break;\r\n        case 'Circle':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\r\n              geometry\r\n            ).getCenter();\r\n          break;\r\n        case 'MultiLineString':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n              geometry\r\n            ).getFlatMidpoints();\r\n          stride = 2;\r\n          break;\r\n        case 'Polygon':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n              geometry\r\n            ).getFlatInteriorPoint();\r\n          if (!textState.overflow) {\r\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\r\n          }\r\n          stride = 3;\r\n          break;\r\n        case 'MultiPolygon':\r\n          const interiorPoints =\r\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n              geometry\r\n            ).getFlatInteriorPoints();\r\n          flatCoordinates = [];\r\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\r\n            if (!textState.overflow) {\r\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\r\n            }\r\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\r\n          }\r\n          if (flatCoordinates.length === 0) {\r\n            return;\r\n          }\r\n          stride = 2;\r\n          break;\r\n        default:\r\n      }\r\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n      if (end === begin) {\r\n        return;\r\n      }\r\n      if (\r\n        geometryWidths &&\r\n        (end - begin) / 2 !== flatCoordinates.length / stride\r\n      ) {\r\n        let beg = begin / 2;\r\n        geometryWidths = geometryWidths.filter((w, i) => {\r\n          const keep =\r\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\r\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\r\n          if (!keep) {\r\n            --beg;\r\n          }\r\n          return keep;\r\n        });\r\n      }\r\n\r\n      this.saveTextStates_();\r\n\r\n      if (textState.backgroundFill || textState.backgroundStroke) {\r\n        this.setFillStrokeStyle(\r\n          textState.backgroundFill,\r\n          textState.backgroundStroke,\r\n        );\r\n        if (textState.backgroundFill) {\r\n          this.updateFillStyle(this.state, this.createFill);\r\n        }\r\n        if (textState.backgroundStroke) {\r\n          this.updateStrokeStyle(this.state, this.applyStroke);\r\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\r\n        }\r\n      }\r\n\r\n      this.beginGeometry(geometry, feature, index);\r\n\r\n      // adjust padding for negative scale\r\n      let padding = textState.padding;\r\n      if (\r\n        padding != defaultPadding &&\r\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\r\n      ) {\r\n        let p0 = textState.padding[0];\r\n        let p1 = textState.padding[1];\r\n        let p2 = textState.padding[2];\r\n        let p3 = textState.padding[3];\r\n        if (textState.scale[0] < 0) {\r\n          p1 = -p1;\r\n          p3 = -p3;\r\n        }\r\n        if (textState.scale[1] < 0) {\r\n          p0 = -p0;\r\n          p2 = -p2;\r\n        }\r\n        padding = [p0, p1, p2, p3];\r\n      }\r\n\r\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\r\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\r\n      // render time.\r\n      const pixelRatio = this.pixelRatio;\r\n      this.instructions.push([\r\n        CanvasInstruction.DRAW_IMAGE,\r\n        begin,\r\n        end,\r\n        null,\r\n        NaN,\r\n        NaN,\r\n        NaN,\r\n        1,\r\n        0,\r\n        0,\r\n        this.textRotateWithView_,\r\n        this.textRotation_,\r\n        [1, 1],\r\n        NaN,\r\n        this.declutterMode_,\r\n        this.declutterImageWithText_,\r\n        padding == defaultPadding\r\n          ? defaultPadding\r\n          : padding.map(function (p) {\r\n              return p * pixelRatio;\r\n            }),\r\n        !!textState.backgroundFill,\r\n        !!textState.backgroundStroke,\r\n        this.text_,\r\n        this.textKey_,\r\n        this.strokeKey_,\r\n        this.fillKey_,\r\n        this.textOffsetX_,\r\n        this.textOffsetY_,\r\n        geometryWidths,\r\n      ]);\r\n      const scale = 1 / pixelRatio;\r\n      // Set default fill for hit detection background\r\n      const currentFillStyle = this.state.fillStyle;\r\n      if (textState.backgroundFill) {\r\n        this.state.fillStyle = defaultFillStyle;\r\n        this.hitDetectionInstructions.push(this.createFill(this.state));\r\n      }\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.DRAW_IMAGE,\r\n        begin,\r\n        end,\r\n        null,\r\n        NaN,\r\n        NaN,\r\n        NaN,\r\n        1,\r\n        0,\r\n        0,\r\n        this.textRotateWithView_,\r\n        this.textRotation_,\r\n        [scale, scale],\r\n        NaN,\r\n        this.declutterMode_,\r\n        this.declutterImageWithText_,\r\n        padding,\r\n        !!textState.backgroundFill,\r\n        !!textState.backgroundStroke,\r\n        this.text_,\r\n        this.textKey_,\r\n        this.strokeKey_,\r\n        this.fillKey_ ? defaultFillStyle : this.fillKey_,\r\n        this.textOffsetX_,\r\n        this.textOffsetY_,\r\n        geometryWidths,\r\n      ]);\r\n      // Reset previous fill\r\n      if (textState.backgroundFill) {\r\n        this.state.fillStyle = currentFillStyle;\r\n        this.hitDetectionInstructions.push(this.createFill(this.state));\r\n      }\r\n\r\n      this.endGeometry(feature);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  saveTextStates_() {\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n    const fillState = this.textFillState_;\r\n\r\n    const strokeKey = this.strokeKey_;\r\n    if (strokeState) {\r\n      if (!(strokeKey in this.strokeStates)) {\r\n        this.strokeStates[strokeKey] = {\r\n          strokeStyle: strokeState.strokeStyle,\r\n          lineCap: strokeState.lineCap,\r\n          lineDashOffset: strokeState.lineDashOffset,\r\n          lineWidth: strokeState.lineWidth,\r\n          lineJoin: strokeState.lineJoin,\r\n          miterLimit: strokeState.miterLimit,\r\n          lineDash: strokeState.lineDash,\r\n        };\r\n      }\r\n    }\r\n    const textKey = this.textKey_;\r\n    if (!(textKey in this.textStates)) {\r\n      this.textStates[textKey] = {\r\n        font: textState.font,\r\n        textAlign: textState.textAlign || defaultTextAlign,\r\n        justify: textState.justify,\r\n        textBaseline: textState.textBaseline || defaultTextBaseline,\r\n        scale: textState.scale,\r\n      };\r\n    }\r\n    const fillKey = this.fillKey_;\r\n    if (fillState) {\r\n      if (!(fillKey in this.fillStates)) {\r\n        this.fillStates[fillKey] = {\r\n          fillStyle: fillState.fillStyle,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} begin Begin.\r\n   * @param {number} end End.\r\n   */\r\n  drawChars_(begin, end) {\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n\r\n    const strokeKey = this.strokeKey_;\r\n    const textKey = this.textKey_;\r\n    const fillKey = this.fillKey_;\r\n    this.saveTextStates_();\r\n\r\n    const pixelRatio = this.pixelRatio;\r\n    const baseline = TEXT_ALIGN[textState.textBaseline];\r\n\r\n    const offsetY = this.textOffsetY_ * pixelRatio;\r\n    const text = this.text_;\r\n    const strokeWidth = strokeState\r\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\r\n      : 0;\r\n\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_CHARS,\r\n      begin,\r\n      end,\r\n      baseline,\r\n      textState.overflow,\r\n      fillKey,\r\n      textState.maxAngle,\r\n      pixelRatio,\r\n      offsetY,\r\n      strokeKey,\r\n      strokeWidth * pixelRatio,\r\n      text,\r\n      textKey,\r\n      1,\r\n      this.declutterMode_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_CHARS,\r\n      begin,\r\n      end,\r\n      baseline,\r\n      textState.overflow,\r\n      fillKey ? defaultFillStyle : fillKey,\r\n      textState.maxAngle,\r\n      pixelRatio,\r\n      offsetY,\r\n      strokeKey,\r\n      strokeWidth * pixelRatio,\r\n      text,\r\n      textKey,\r\n      1 / pixelRatio,\r\n      this.declutterMode_,\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   * @param {Object} [sharedData] Shared data.\r\n   */\r\n  setTextStyle(textStyle, sharedData) {\r\n    let textState, fillState, strokeState;\r\n    if (!textStyle) {\r\n      this.text_ = '';\r\n    } else {\r\n      const textFillStyle = textStyle.getFill();\r\n      if (!textFillStyle) {\r\n        fillState = null;\r\n        this.textFillState_ = fillState;\r\n      } else {\r\n        fillState = this.textFillState_;\r\n        if (!fillState) {\r\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\r\n          this.textFillState_ = fillState;\r\n        }\r\n        fillState.fillStyle = asColorLike(\r\n          textFillStyle.getColor() || defaultFillStyle,\r\n        );\r\n      }\r\n\r\n      const textStrokeStyle = textStyle.getStroke();\r\n      if (!textStrokeStyle) {\r\n        strokeState = null;\r\n        this.textStrokeState_ = strokeState;\r\n      } else {\r\n        strokeState = this.textStrokeState_;\r\n        if (!strokeState) {\r\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\r\n          this.textStrokeState_ = strokeState;\r\n        }\r\n        const lineDash = textStrokeStyle.getLineDash();\r\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\r\n        const lineWidth = textStrokeStyle.getWidth();\r\n        const miterLimit = textStrokeStyle.getMiterLimit();\r\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\r\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\r\n        strokeState.lineDashOffset =\r\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\r\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\r\n        strokeState.lineWidth =\r\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\r\n        strokeState.miterLimit =\r\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\r\n        strokeState.strokeStyle = asColorLike(\r\n          textStrokeStyle.getColor() || defaultStrokeStyle,\r\n        );\r\n      }\r\n\r\n      textState = this.textState_;\r\n      const font = textStyle.getFont() || defaultFont;\r\n      registerFont(font);\r\n      const textScale = textStyle.getScaleArray();\r\n      textState.overflow = textStyle.getOverflow();\r\n      textState.font = font;\r\n      textState.maxAngle = textStyle.getMaxAngle();\r\n      textState.placement = textStyle.getPlacement();\r\n      textState.textAlign = textStyle.getTextAlign();\r\n      textState.repeat = textStyle.getRepeat();\r\n      textState.justify = textStyle.getJustify();\r\n      textState.textBaseline =\r\n        textStyle.getTextBaseline() || defaultTextBaseline;\r\n      textState.backgroundFill = textStyle.getBackgroundFill();\r\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\r\n      textState.padding = textStyle.getPadding() || defaultPadding;\r\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\r\n\r\n      const textOffsetX = textStyle.getOffsetX();\r\n      const textOffsetY = textStyle.getOffsetY();\r\n      const textRotateWithView = textStyle.getRotateWithView();\r\n      const textRotation = textStyle.getRotation();\r\n      this.text_ = textStyle.getText() || '';\r\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\r\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\r\n      this.textRotateWithView_ =\r\n        textRotateWithView === undefined ? false : textRotateWithView;\r\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\r\n\r\n      this.strokeKey_ = strokeState\r\n        ? (typeof strokeState.strokeStyle == 'string'\r\n            ? strokeState.strokeStyle\r\n            : getUid(strokeState.strokeStyle)) +\r\n          strokeState.lineCap +\r\n          strokeState.lineDashOffset +\r\n          '|' +\r\n          strokeState.lineWidth +\r\n          strokeState.lineJoin +\r\n          strokeState.miterLimit +\r\n          '[' +\r\n          strokeState.lineDash.join() +\r\n          ']'\r\n        : '';\r\n      this.textKey_ =\r\n        textState.font +\r\n        textState.scale +\r\n        (textState.textAlign || '?') +\r\n        (textState.repeat || '?') +\r\n        (textState.justify || '?') +\r\n        (textState.textBaseline || '?');\r\n      this.fillKey_ =\r\n        fillState && fillState.fillStyle\r\n          ? typeof fillState.fillStyle == 'string'\r\n            ? fillState.fillStyle\r\n            : '|' + getUid(fillState.fillStyle)\r\n          : '';\r\n    }\r\n    this.declutterMode_ = textStyle.getDeclutterMode();\r\n    this.declutterImageWithText_ = sharedData;\r\n  }\r\n}\r\n\r\nexport default CanvasTextBuilder;\r\n", "/**\r\n * @module ol/render/canvas/BuilderGroup\r\n */\r\n\r\nimport Builder from './Builder.js';\r\nimport ImageBuilder from './ImageBuilder.js';\r\nimport LineStringBuilder from './LineStringBuilder.js';\r\nimport PolygonBuilder from './PolygonBuilder.js';\r\nimport TextBuilder from './TextBuilder.js';\r\n\r\n/**\r\n * @type {Object<import(\"../canvas.js\").BuilderType, typeof Builder>}\r\n */\r\nconst BATCH_CONSTRUCTORS = {\r\n  'Circle': PolygonBuilder,\r\n  'Default': Builder,\r\n  'Image': ImageBuilder,\r\n  'LineString': LineStringBuilder,\r\n  'Polygon': PolygonBuilder,\r\n  'Text': TextBuilder,\r\n};\r\n\r\nclass BuilderGroup {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.tolerance_ = tolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent_ = maxExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.resolution_ = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, Builder>>}\r\n     */\r\n    this.buildersByZIndex_ = {};\r\n  }\r\n\r\n  /**\r\n   * @return {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\r\n   */\r\n  finish() {\r\n    const builderInstructions = {};\r\n    for (const zKey in this.buildersByZIndex_) {\r\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\r\n      const builders = this.buildersByZIndex_[zKey];\r\n      for (const builderKey in builders) {\r\n        const builderInstruction = builders[builderKey].finish();\r\n        builderInstructions[zKey][builderKey] = builderInstruction;\r\n      }\r\n    }\r\n    return builderInstructions;\r\n  }\r\n\r\n  /**\r\n   * @param {number|undefined} zIndex Z index.\r\n   * @param {import(\"../canvas.js\").BuilderType} builderType Replay type.\r\n   * @return {import(\"../VectorContext.js\").default} Replay.\r\n   */\r\n  getBuilder(zIndex, builderType) {\r\n    const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\r\n    let replays = this.buildersByZIndex_[zIndexKey];\r\n    if (replays === undefined) {\r\n      replays = {};\r\n      this.buildersByZIndex_[zIndexKey] = replays;\r\n    }\r\n    let replay = replays[builderType];\r\n    if (replay === undefined) {\r\n      const Constructor = BATCH_CONSTRUCTORS[builderType];\r\n      replay = new Constructor(\r\n        this.tolerance_,\r\n        this.maxExtent_,\r\n        this.resolution_,\r\n        this.pixelRatio_,\r\n      );\r\n      replays[builderType] = replay;\r\n    }\r\n    return replay;\r\n  }\r\n}\r\n\r\nexport default BuilderGroup;\r\n", "/**\r\n * @module ol/geom/flat/textpath\r\n */\r\nimport {lerp} from '../../math.js';\r\nimport {rotate} from './transform.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Path to put text on.\r\n * @param {number} offset Start offset of the `flatCoordinates`.\r\n * @param {number} end End offset of the `flatCoordinates`.\r\n * @param {number} stride Stride.\r\n * @param {string} text Text to place on the path.\r\n * @param {number} startM m along the path where the text starts.\r\n * @param {number} maxAngle Max angle between adjacent chars in radians.\r\n * @param {number} scale The product of the text scale and the device pixel ratio.\r\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\r\n * @param {string} font The font.\r\n * @param {Object<string, number>} cache A cache of measured widths.\r\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\r\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\r\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\r\n */\r\nexport function drawTextOnPath(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  text,\r\n  startM,\r\n  maxAngle,\r\n  scale,\r\n  measureAndCacheTextWidth,\r\n  font,\r\n  cache,\r\n  rotation,\r\n) {\r\n  let x2 = flatCoordinates[offset];\r\n  let y2 = flatCoordinates[offset + 1];\r\n  let x1 = 0;\r\n  let y1 = 0;\r\n  let segmentLength = 0;\r\n  let segmentM = 0;\r\n\r\n  function advance() {\r\n    x1 = x2;\r\n    y1 = y2;\r\n    offset += stride;\r\n    x2 = flatCoordinates[offset];\r\n    y2 = flatCoordinates[offset + 1];\r\n    segmentM += segmentLength;\r\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n  }\r\n  do {\r\n    advance();\r\n  } while (offset < end - stride && segmentM + segmentLength < startM);\r\n\r\n  let interpolate =\r\n    segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\r\n  const beginX = lerp(x1, x2, interpolate);\r\n  const beginY = lerp(y1, y2, interpolate);\r\n\r\n  const startOffset = offset - stride;\r\n  const startLength = segmentM;\r\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\r\n  while (offset < end - stride && segmentM + segmentLength < endM) {\r\n    advance();\r\n  }\r\n  interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\r\n  const endX = lerp(x1, x2, interpolate);\r\n  const endY = lerp(y1, y2, interpolate);\r\n\r\n  // Keep text upright\r\n  let reverse;\r\n  if (rotation) {\r\n    const flat = [beginX, beginY, endX, endY];\r\n    rotate(flat, 0, 4, 2, rotation, flat, flat);\r\n    reverse = flat[0] > flat[2];\r\n  } else {\r\n    reverse = beginX > endX;\r\n  }\r\n\r\n  const PI = Math.PI;\r\n  const result = [];\r\n  const singleSegment = startOffset + stride === offset;\r\n\r\n  offset = startOffset;\r\n  segmentLength = 0;\r\n  segmentM = startLength;\r\n  x2 = flatCoordinates[offset];\r\n  y2 = flatCoordinates[offset + 1];\r\n\r\n  let previousAngle;\r\n  // All on the same segment\r\n  if (singleSegment) {\r\n    advance();\r\n\r\n    previousAngle = Math.atan2(y2 - y1, x2 - x1);\r\n    if (reverse) {\r\n      previousAngle += previousAngle > 0 ? -PI : PI;\r\n    }\r\n    const x = (endX + beginX) / 2;\r\n    const y = (endY + beginY) / 2;\r\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\r\n    return result;\r\n  }\r\n\r\n  // rendering across line segments\r\n  text = text.replace(/\\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines\r\n\r\n  for (let i = 0, ii = text.length; i < ii; ) {\r\n    advance();\r\n    let angle = Math.atan2(y2 - y1, x2 - x1);\r\n    if (reverse) {\r\n      angle += angle > 0 ? -PI : PI;\r\n    }\r\n    if (previousAngle !== undefined) {\r\n      let delta = angle - previousAngle;\r\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\r\n      if (Math.abs(delta) > maxAngle) {\r\n        return null;\r\n      }\r\n    }\r\n    previousAngle = angle;\r\n\r\n    const iStart = i;\r\n    let charLength = 0;\r\n    for (; i < ii; ++i) {\r\n      const index = reverse ? ii - i - 1 : i;\r\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\r\n      if (\r\n        offset + stride < end &&\r\n        segmentM + segmentLength < startM + charLength + len / 2\r\n      ) {\r\n        break;\r\n      }\r\n      charLength += len;\r\n    }\r\n    if (i === iStart) {\r\n      continue;\r\n    }\r\n    const chars = reverse\r\n      ? text.substring(ii - iStart, ii - i)\r\n      : text.substring(iStart, i);\r\n    interpolate =\r\n      segmentLength === 0\r\n        ? 0\r\n        : (startM + charLength / 2 - segmentM) / segmentLength;\r\n    const x = lerp(x1, x2, interpolate);\r\n    const y = lerp(y1, y2, interpolate);\r\n    result.push([x, y, charLength / 2, angle, chars]);\r\n    startM += charLength;\r\n  }\r\n  return result;\r\n}\r\n", "/**\r\n * @module ol/render/canvas/Executor\r\n */\r\nimport CanvasInstruction from './Instruction.js';\r\nimport ZIndexContext from '../canvas/ZIndexContext.js';\r\nimport {TEXT_ALIGN} from './TextBuilder.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n  setFromArray as transformSetFromArray,\r\n} from '../../transform.js';\r\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\r\nimport {\r\n  defaultPadding,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n  drawImageOrLabel,\r\n  getTextDimensions,\r\n  measureAndCacheTextWidth,\r\n} from '../canvas.js';\r\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\r\nimport {equals} from '../../array.js';\r\nimport {lineStringLength} from '../../geom/flat/length.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\n\r\n/**\r\n * @typedef {Object} BBox\r\n * @property {number} minX Minimal x.\r\n * @property {number} minY Minimal y.\r\n * @property {number} maxX Maximal x.\r\n * @property {number} maxY Maximal y\r\n * @property {*} value Value.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageOrLabelDimensions\r\n * @property {number} drawImageX DrawImageX.\r\n * @property {number} drawImageY DrawImageY.\r\n * @property {number} drawImageW DrawImageW.\r\n * @property {number} drawImageH DrawImageH.\r\n * @property {number} originX OriginX.\r\n * @property {number} originY OriginY.\r\n * @property {Array<number>} scale Scale.\r\n * @property {BBox} declutterBox DeclutterBox.\r\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\r\n */\r\n\r\n/**\r\n * @typedef {{0: CanvasRenderingContext2D, 1: import('../../size.js').Size, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, import(\"../../style/Style.js\").DeclutterMode): T} FeatureCallback\r\n */\r\n\r\n/**\r\n * @type {import(\"../../extent.js\").Extent}\r\n */\r\nconst tmpExtent = createEmpty();\r\n\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p1 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p2 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p3 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p4 = [];\r\n\r\n/**\r\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\r\n * @return {BBox} Declutter bbox.\r\n */\r\nfunction getDeclutterBox(replayImageOrLabelArgs) {\r\n  return replayImageOrLabelArgs[3].declutterBox;\r\n}\r\n\r\nconst rtlRegEx = new RegExp(\r\n  /* eslint-disable prettier/prettier */\r\n  '[' +\r\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\r\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\r\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\r\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\r\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\r\n  ']'\r\n  /* eslint-enable prettier/prettier */\r\n);\r\n\r\n/**\r\n * @param {string} text Text.\r\n * @param {CanvasTextAlign} align Alignment.\r\n * @return {number} Text alignment.\r\n */\r\nfunction horizontalTextAlign(text, align) {\r\n  if (align === 'start') {\r\n    align = rtlRegEx.test(text) ? 'right' : 'left';\r\n  } else if (align === 'end') {\r\n    align = rtlRegEx.test(text) ? 'left' : 'right';\r\n  }\r\n  return TEXT_ALIGN[align];\r\n}\r\n\r\n/**\r\n * @param {Array<string>} acc Accumulator.\r\n * @param {string} line Line of text.\r\n * @param {number} i Index\r\n * @return {Array<string>} Accumulator.\r\n */\r\nfunction createTextChunks(acc, line, i) {\r\n  if (i > 0) {\r\n    acc.push('\\n', '');\r\n  }\r\n  acc.push(line, '');\r\n  return acc;\r\n}\r\n\r\nclass Executor {\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The replay can have overlapping geometries.\r\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions.\r\n   * @param {boolean} [deferredRendering] Enable deferred rendering.\r\n   */\r\n  constructor(\r\n    resolution,\r\n    pixelRatio,\r\n    overlaps,\r\n    instructions,\r\n    deferredRendering,\r\n  ) {\r\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps = overlaps;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.alignAndScaleFill_;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.instructions = instructions.instructions;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.coordinates = instructions.coordinates;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\r\n     */\r\n    this.coordinateCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"../../transform.js\").Transform}\r\n     */\r\n    this.renderedTransform_ = createTransform();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.pixelCoordinates_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.viewRotation_ = 0;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */\r\n    this.fillStates = instructions.fillStates || {};\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */\r\n    this.strokeStates = instructions.strokeStates || {};\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */\r\n    this.textStates = instructions.textStates || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object<string, number>>}\r\n     */\r\n    this.widths_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, import(\"../canvas.js\").Label>}\r\n     */\r\n    this.labels_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../canvas/ZIndexContext.js\").default}\r\n     */\r\n    this.zIndexContext_ = deferredRendering ? new ZIndexContext() : null;\r\n  }\r\n\r\n  /**\r\n   * @return {ZIndexContext} ZIndex context.\r\n   */\r\n  getZIndexContext() {\r\n    return this.zIndexContext_;\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} text Text.\r\n   * @param {string} textKey Text style key.\r\n   * @param {string} fillKey Fill style key.\r\n   * @param {string} strokeKey Stroke style key.\r\n   * @return {import(\"../canvas.js\").Label} Label.\r\n   */\r\n  createLabel(text, textKey, fillKey, strokeKey) {\r\n    const key = text + textKey + fillKey + strokeKey;\r\n    if (this.labels_[key]) {\r\n      return this.labels_[key];\r\n    }\r\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\r\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\r\n    const textState = this.textStates[textKey];\r\n    const pixelRatio = this.pixelRatio;\r\n    const scale = [\r\n      textState.scale[0] * pixelRatio,\r\n      textState.scale[1] * pixelRatio,\r\n    ];\r\n    const textIsArray = Array.isArray(text);\r\n    const align = textState.justify\r\n      ? TEXT_ALIGN[textState.justify]\r\n      : horizontalTextAlign(\r\n          Array.isArray(text) ? text[0] : text,\r\n          textState.textAlign || defaultTextAlign,\r\n        );\r\n    const strokeWidth =\r\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\r\n\r\n    const chunks = textIsArray\r\n      ? text\r\n      : text.split('\\n').reduce(createTextChunks, []);\r\n\r\n    const {width, height, widths, heights, lineWidths} = getTextDimensions(\r\n      textState,\r\n      chunks,\r\n    );\r\n    const renderWidth = width + strokeWidth;\r\n    const contextInstructions = [];\r\n    // make canvas 2 pixels wider to account for italic text width measurement errors\r\n    const w = (renderWidth + 2) * scale[0];\r\n    const h = (height + strokeWidth) * scale[1];\r\n    /** @type {import(\"../canvas.js\").Label} */\r\n    const label = {\r\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\r\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\r\n      contextInstructions: contextInstructions,\r\n    };\r\n    if (scale[0] != 1 || scale[1] != 1) {\r\n      contextInstructions.push('scale', scale);\r\n    }\r\n    if (strokeKey) {\r\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\r\n      contextInstructions.push('lineWidth', strokeWidth);\r\n      contextInstructions.push('lineCap', strokeState.lineCap);\r\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\r\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\r\n      contextInstructions.push('setLineDash', [strokeState.lineDash]);\r\n      contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\r\n    }\r\n    if (fillKey) {\r\n      contextInstructions.push('fillStyle', fillState.fillStyle);\r\n    }\r\n    contextInstructions.push('textBaseline', 'middle');\r\n    contextInstructions.push('textAlign', 'center');\r\n    const leftRight = 0.5 - align;\r\n    let x = align * renderWidth + leftRight * strokeWidth;\r\n    const strokeInstructions = [];\r\n    const fillInstructions = [];\r\n    let lineHeight = 0;\r\n    let lineOffset = 0;\r\n    let widthHeightIndex = 0;\r\n    let lineWidthIndex = 0;\r\n    let previousFont;\r\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\r\n      const text = chunks[i];\r\n      if (text === '\\n') {\r\n        lineOffset += lineHeight;\r\n        lineHeight = 0;\r\n        x = align * renderWidth + leftRight * strokeWidth;\r\n        ++lineWidthIndex;\r\n        continue;\r\n      }\r\n      const font = chunks[i + 1] || textState.font;\r\n      if (font !== previousFont) {\r\n        if (strokeKey) {\r\n          strokeInstructions.push('font', font);\r\n        }\r\n        if (fillKey) {\r\n          fillInstructions.push('font', font);\r\n        }\r\n        previousFont = font;\r\n      }\r\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\r\n      const fillStrokeArgs = [\r\n        text,\r\n        x +\r\n          leftRight * widths[widthHeightIndex] +\r\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\r\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\r\n      ];\r\n      x += widths[widthHeightIndex];\r\n      if (strokeKey) {\r\n        strokeInstructions.push('strokeText', fillStrokeArgs);\r\n      }\r\n      if (fillKey) {\r\n        fillInstructions.push('fillText', fillStrokeArgs);\r\n      }\r\n      ++widthHeightIndex;\r\n    }\r\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\r\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\r\n    this.labels_[key] = label;\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   */\r\n  replayTextBackground_(\r\n    context,\r\n    p1,\r\n    p2,\r\n    p3,\r\n    p4,\r\n    fillInstruction,\r\n    strokeInstruction,\r\n  ) {\r\n    context.beginPath();\r\n    context.moveTo.apply(context, p1);\r\n    context.lineTo.apply(context, p2);\r\n    context.lineTo.apply(context, p3);\r\n    context.lineTo.apply(context, p4);\r\n    context.lineTo.apply(context, p1);\r\n    if (fillInstruction) {\r\n      this.alignAndScaleFill_ = /** @type {number} */ (fillInstruction[2]);\r\n      this.fill_(context);\r\n    }\r\n    if (strokeInstruction) {\r\n      this.setStrokeStyle_(\r\n        context,\r\n        /** @type {Array<*>} */ (strokeInstruction),\r\n      );\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} sheetWidth Width of the sprite sheet.\r\n   * @param {number} sheetHeight Height of the sprite sheet.\r\n   * @param {number} centerX X.\r\n   * @param {number} centerY Y.\r\n   * @param {number} width Width.\r\n   * @param {number} height Height.\r\n   * @param {number} anchorX Anchor X.\r\n   * @param {number} anchorY Anchor Y.\r\n   * @param {number} originX Origin X.\r\n   * @param {number} originY Origin Y.\r\n   * @param {number} rotation Rotation.\r\n   * @param {import(\"../../size.js\").Size} scale Scale.\r\n   * @param {boolean} snapToPixel Snap to pixel.\r\n   * @param {Array<number>} padding Padding.\r\n   * @param {boolean} fillStroke Background fill or stroke.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\r\n   */\r\n  calculateImageOrLabelDimensions_(\r\n    sheetWidth,\r\n    sheetHeight,\r\n    centerX,\r\n    centerY,\r\n    width,\r\n    height,\r\n    anchorX,\r\n    anchorY,\r\n    originX,\r\n    originY,\r\n    rotation,\r\n    scale,\r\n    snapToPixel,\r\n    padding,\r\n    fillStroke,\r\n    feature,\r\n  ) {\r\n    anchorX *= scale[0];\r\n    anchorY *= scale[1];\r\n    let x = centerX - anchorX;\r\n    let y = centerY - anchorY;\r\n\r\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\r\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\r\n    const boxW = padding[3] + w * scale[0] + padding[1];\r\n    const boxH = padding[0] + h * scale[1] + padding[2];\r\n    const boxX = x - padding[3];\r\n    const boxY = y - padding[0];\r\n\r\n    if (fillStroke || rotation !== 0) {\r\n      p1[0] = boxX;\r\n      p4[0] = boxX;\r\n      p1[1] = boxY;\r\n      p2[1] = boxY;\r\n      p2[0] = boxX + boxW;\r\n      p3[0] = p2[0];\r\n      p3[1] = boxY + boxH;\r\n      p4[1] = p3[1];\r\n    }\r\n\r\n    let transform;\r\n    if (rotation !== 0) {\r\n      transform = composeTransform(\r\n        createTransform(),\r\n        centerX,\r\n        centerY,\r\n        1,\r\n        1,\r\n        rotation,\r\n        -centerX,\r\n        -centerY,\r\n      );\r\n\r\n      applyTransform(transform, p1);\r\n      applyTransform(transform, p2);\r\n      applyTransform(transform, p3);\r\n      applyTransform(transform, p4);\r\n      createOrUpdate(\r\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\r\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\r\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\r\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\r\n        tmpExtent,\r\n      );\r\n    } else {\r\n      createOrUpdate(\r\n        Math.min(boxX, boxX + boxW),\r\n        Math.min(boxY, boxY + boxH),\r\n        Math.max(boxX, boxX + boxW),\r\n        Math.max(boxY, boxY + boxH),\r\n        tmpExtent,\r\n      );\r\n    }\r\n    if (snapToPixel) {\r\n      x = Math.round(x);\r\n      y = Math.round(y);\r\n    }\r\n    return {\r\n      drawImageX: x,\r\n      drawImageY: y,\r\n      drawImageW: w,\r\n      drawImageH: h,\r\n      originX: originX,\r\n      originY: originY,\r\n      declutterBox: {\r\n        minX: tmpExtent[0],\r\n        minY: tmpExtent[1],\r\n        maxX: tmpExtent[2],\r\n        maxY: tmpExtent[3],\r\n        value: feature,\r\n      },\r\n      canvasTransform: transform,\r\n      scale: scale,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\r\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\r\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\r\n   * @param {number} opacity Opacity.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   * @return {boolean} The image or label was rendered.\r\n   */\r\n  replayImageOrLabel_(\r\n    context,\r\n    scaledCanvasSize,\r\n    imageOrLabel,\r\n    dimensions,\r\n    opacity,\r\n    fillInstruction,\r\n    strokeInstruction,\r\n  ) {\r\n    const fillStroke = !!(fillInstruction || strokeInstruction);\r\n\r\n    const box = dimensions.declutterBox;\r\n    const strokePadding = strokeInstruction\r\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\r\n      : 0;\r\n    const intersects =\r\n      box.minX - strokePadding <= scaledCanvasSize[0] &&\r\n      box.maxX + strokePadding >= 0 &&\r\n      box.minY - strokePadding <= scaledCanvasSize[1] &&\r\n      box.maxY + strokePadding >= 0;\r\n\r\n    if (intersects) {\r\n      if (fillStroke) {\r\n        this.replayTextBackground_(\r\n          context,\r\n          p1,\r\n          p2,\r\n          p3,\r\n          p4,\r\n          /** @type {Array<*>} */ (fillInstruction),\r\n          /** @type {Array<*>} */ (strokeInstruction),\r\n        );\r\n      }\r\n      drawImageOrLabel(\r\n        context,\r\n        dimensions.canvasTransform,\r\n        opacity,\r\n        imageOrLabel,\r\n        dimensions.originX,\r\n        dimensions.originY,\r\n        dimensions.drawImageW,\r\n        dimensions.drawImageH,\r\n        dimensions.drawImageX,\r\n        dimensions.drawImageY,\r\n        dimensions.scale,\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   */\r\n  fill_(context) {\r\n    const alignAndScale = this.alignAndScaleFill_;\r\n    if (alignAndScale) {\r\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\r\n      const repeatSize = 512 * this.pixelRatio;\r\n      context.save();\r\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\r\n      if (alignAndScale !== 1) {\r\n        context.scale(alignAndScale, alignAndScale);\r\n      }\r\n      context.rotate(this.viewRotation_);\r\n    }\r\n    context.fill();\r\n    if (alignAndScale) {\r\n      context.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {Array<*>} instruction Instruction.\r\n   */\r\n  setStrokeStyle_(context, instruction) {\r\n    context.strokeStyle =\r\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\r\n    context.lineWidth = /** @type {number} */ (instruction[2]);\r\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\r\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\r\n    context.miterLimit = /** @type {number} */ (instruction[5]);\r\n    context.lineDashOffset = /** @type {number} */ (instruction[7]);\r\n    context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {string|Array<string>} text The text to draw.\r\n   * @param {string} textKey The key of the text state.\r\n   * @param {string} strokeKey The key for the stroke state.\r\n   * @param {string} fillKey The key for the fill state.\r\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\r\n   */\r\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\r\n    const textState = this.textStates[textKey];\r\n\r\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\r\n\r\n    const strokeState = this.strokeStates[strokeKey];\r\n    const pixelRatio = this.pixelRatio;\r\n    const align = horizontalTextAlign(\r\n      Array.isArray(text) ? text[0] : text,\r\n      textState.textAlign || defaultTextAlign,\r\n    );\r\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\r\n    const strokeWidth =\r\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\r\n\r\n    // Remove the 2 pixels we added in createLabel() for the anchor\r\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\r\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\r\n    const anchorY =\r\n      (baseline * label.height) / pixelRatio +\r\n      2 * (0.5 - baseline) * strokeWidth;\r\n\r\n    return {\r\n      label: label,\r\n      anchorX: anchorX,\r\n      anchorY: anchorY,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {Array<*>} instructions Instructions array.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  execute_(\r\n    context,\r\n    scaledCanvasSize,\r\n    transform,\r\n    instructions,\r\n    snapToPixel,\r\n    featureCallback,\r\n    hitExtent,\r\n    declutterTree,\r\n  ) {\r\n    const zIndexContext = this.zIndexContext_;\r\n    /** @type {Array<number>} */\r\n    let pixelCoordinates;\r\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\r\n      pixelCoordinates = this.pixelCoordinates_;\r\n    } else {\r\n      if (!this.pixelCoordinates_) {\r\n        this.pixelCoordinates_ = [];\r\n      }\r\n      pixelCoordinates = transform2D(\r\n        this.coordinates,\r\n        0,\r\n        this.coordinates.length,\r\n        2,\r\n        transform,\r\n        this.pixelCoordinates_,\r\n      );\r\n      transformSetFromArray(this.renderedTransform_, transform);\r\n    }\r\n    let i = 0; // instruction index\r\n    const ii = instructions.length; // end of instructions\r\n    let d = 0; // data index\r\n    let dd; // end of per-instruction data\r\n    let anchorX,\r\n      anchorY,\r\n      /** @type {import('../../style/Style.js').DeclutterMode} */\r\n      declutterMode,\r\n      prevX,\r\n      prevY,\r\n      roundX,\r\n      roundY,\r\n      image,\r\n      text,\r\n      textKey,\r\n      strokeKey,\r\n      fillKey;\r\n    let pendingFill = 0;\r\n    let pendingStroke = 0;\r\n    let lastFillInstruction = null;\r\n    let lastStrokeInstruction = null;\r\n    const coordinateCache = this.coordinateCache_;\r\n    const viewRotation = this.viewRotation_;\r\n    const viewRotationFromTransform =\r\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\r\n\r\n    const state = /** @type {import(\"../../render.js\").State} */ ({\r\n      context: context,\r\n      pixelRatio: this.pixelRatio,\r\n      resolution: this.resolution,\r\n      rotation: viewRotation,\r\n    });\r\n\r\n    // When the batch size gets too big, performance decreases. 200 is a good\r\n    // balance between batch size and number of fill/stroke instructions.\r\n    const batchSize =\r\n      this.instructions != instructions || this.overlaps ? 0 : 200;\r\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\r\n    let x, y, currentGeometry;\r\n    while (i < ii) {\r\n      const instruction = instructions[i];\r\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\r\n        instruction[0]\r\n      );\r\n      switch (type) {\r\n        case CanvasInstruction.BEGIN_GEOMETRY:\r\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\r\n            instruction[1]\r\n          );\r\n          currentGeometry = instruction[3];\r\n          if (!feature.getGeometry()) {\r\n            i = /** @type {number} */ (instruction[2]);\r\n          } else if (\r\n            hitExtent !== undefined &&\r\n            !intersects(hitExtent, currentGeometry.getExtent())\r\n          ) {\r\n            i = /** @type {number} */ (instruction[2]) + 1;\r\n          } else {\r\n            ++i;\r\n          }\r\n          if (zIndexContext) {\r\n            zIndexContext.zIndex = instruction[4];\r\n          }\r\n          break;\r\n        case CanvasInstruction.BEGIN_PATH:\r\n          if (pendingFill > batchSize) {\r\n            this.fill_(context);\r\n            pendingFill = 0;\r\n          }\r\n          if (pendingStroke > batchSize) {\r\n            context.stroke();\r\n            pendingStroke = 0;\r\n          }\r\n          if (!pendingFill && !pendingStroke) {\r\n            context.beginPath();\r\n            prevX = NaN;\r\n            prevY = NaN;\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CIRCLE:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          const x1 = pixelCoordinates[d];\r\n          const y1 = pixelCoordinates[d + 1];\r\n          const x2 = pixelCoordinates[d + 2];\r\n          const y2 = pixelCoordinates[d + 3];\r\n          const dx = x2 - x1;\r\n          const dy = y2 - y1;\r\n          const r = Math.sqrt(dx * dx + dy * dy);\r\n          context.moveTo(x1 + r, y1);\r\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CLOSE_PATH:\r\n          context.closePath();\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CUSTOM:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = instruction[2];\r\n          const geometry =\r\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\r\n              instruction[3]\r\n            );\r\n          const renderer = instruction[4];\r\n          const fn = instruction[5];\r\n          state.geometry = geometry;\r\n          state.feature = feature;\r\n          if (!(i in coordinateCache)) {\r\n            coordinateCache[i] = [];\r\n          }\r\n          const coords = coordinateCache[i];\r\n          if (fn) {\r\n            fn(pixelCoordinates, d, dd, 2, coords);\r\n          } else {\r\n            coords[0] = pixelCoordinates[d];\r\n            coords[1] = pixelCoordinates[d + 1];\r\n            coords.length = 2;\r\n          }\r\n          if (zIndexContext) {\r\n            zIndexContext.zIndex = instruction[6];\r\n          }\r\n          renderer(coords, state);\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.DRAW_IMAGE:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = /** @type {number} */ (instruction[2]);\r\n          image =\r\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\r\n              instruction[3]\r\n            );\r\n\r\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\r\n          anchorX = /** @type {number} */ (instruction[4]);\r\n          anchorY = /** @type {number} */ (instruction[5]);\r\n          let height = /** @type {number} */ (instruction[6]);\r\n          const opacity = /** @type {number} */ (instruction[7]);\r\n          const originX = /** @type {number} */ (instruction[8]);\r\n          const originY = /** @type {number} */ (instruction[9]);\r\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\r\n          let rotation = /** @type {number} */ (instruction[11]);\r\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\r\n            instruction[12]\r\n          );\r\n          let width = /** @type {number} */ (instruction[13]);\r\n          declutterMode = instruction[14] || 'declutter';\r\n          const declutterImageWithText =\r\n            /** @type {{args: import(\"../canvas.js\").DeclutterImageWithText, declutterMode: import('../../style/Style.js').DeclutterMode}} */ (\r\n              instruction[15]\r\n            );\r\n\r\n          if (!image && instruction.length >= 20) {\r\n            // create label images\r\n            text = /** @type {string} */ (instruction[19]);\r\n            textKey = /** @type {string} */ (instruction[20]);\r\n            strokeKey = /** @type {string} */ (instruction[21]);\r\n            fillKey = /** @type {string} */ (instruction[22]);\r\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\r\n              text,\r\n              textKey,\r\n              strokeKey,\r\n              fillKey,\r\n            );\r\n            image = labelWithAnchor.label;\r\n            instruction[3] = image;\r\n            const textOffsetX = /** @type {number} */ (instruction[23]);\r\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\r\n            instruction[4] = anchorX;\r\n            const textOffsetY = /** @type {number} */ (instruction[24]);\r\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\r\n            instruction[5] = anchorY;\r\n            height = image.height;\r\n            instruction[6] = height;\r\n            width = image.width;\r\n            instruction[13] = width;\r\n          }\r\n\r\n          let geometryWidths;\r\n          if (instruction.length > 25) {\r\n            geometryWidths = /** @type {number} */ (instruction[25]);\r\n          }\r\n\r\n          let padding, backgroundFill, backgroundStroke;\r\n          if (instruction.length > 17) {\r\n            padding = /** @type {Array<number>} */ (instruction[16]);\r\n            backgroundFill = /** @type {boolean} */ (instruction[17]);\r\n            backgroundStroke = /** @type {boolean} */ (instruction[18]);\r\n          } else {\r\n            padding = defaultPadding;\r\n            backgroundFill = false;\r\n            backgroundStroke = false;\r\n          }\r\n\r\n          if (rotateWithView && viewRotationFromTransform) {\r\n            // Canvas is expected to be rotated to reverse view rotation.\r\n            rotation += viewRotation;\r\n          } else if (!rotateWithView && !viewRotationFromTransform) {\r\n            // Canvas is not rotated, images need to be rotated back to be north-up.\r\n            rotation -= viewRotation;\r\n          }\r\n          let widthIndex = 0;\r\n          for (; d < dd; d += 2) {\r\n            if (\r\n              geometryWidths &&\r\n              geometryWidths[widthIndex++] < width / this.pixelRatio\r\n            ) {\r\n              continue;\r\n            }\r\n            const dimensions = this.calculateImageOrLabelDimensions_(\r\n              image.width,\r\n              image.height,\r\n              pixelCoordinates[d],\r\n              pixelCoordinates[d + 1],\r\n              width,\r\n              height,\r\n              anchorX,\r\n              anchorY,\r\n              originX,\r\n              originY,\r\n              rotation,\r\n              scale,\r\n              snapToPixel,\r\n              padding,\r\n              backgroundFill || backgroundStroke,\r\n              feature,\r\n            );\r\n            /** @type {ReplayImageOrLabelArgs} */\r\n            const args = [\r\n              context,\r\n              scaledCanvasSize,\r\n              image,\r\n              dimensions,\r\n              opacity,\r\n              backgroundFill\r\n                ? /** @type {Array<*>} */ (lastFillInstruction)\r\n                : null,\r\n              backgroundStroke\r\n                ? /** @type {Array<*>} */ (lastStrokeInstruction)\r\n                : null,\r\n            ];\r\n            if (declutterTree) {\r\n              let imageArgs, imageDeclutterMode, imageDeclutterBox;\r\n              if (declutterImageWithText) {\r\n                const index = dd - d;\r\n                if (!declutterImageWithText[index]) {\r\n                  // We now have the image for an image+text combination.\r\n                  declutterImageWithText[index] = {args, declutterMode};\r\n                  // Don't render anything for now, wait for the text.\r\n                  continue;\r\n                }\r\n                const imageDeclutter = declutterImageWithText[index];\r\n                imageArgs = imageDeclutter.args;\r\n                imageDeclutterMode = imageDeclutter.declutterMode;\r\n                delete declutterImageWithText[index];\r\n                imageDeclutterBox = getDeclutterBox(imageArgs);\r\n              }\r\n              // We now have image and text for an image+text combination.\r\n              let renderImage, renderText;\r\n              if (\r\n                imageArgs &&\r\n                (imageDeclutterMode !== 'declutter' ||\r\n                  !declutterTree.collides(imageDeclutterBox))\r\n              ) {\r\n                renderImage = true;\r\n              }\r\n              if (\r\n                declutterMode !== 'declutter' ||\r\n                !declutterTree.collides(dimensions.declutterBox)\r\n              ) {\r\n                renderText = true;\r\n              }\r\n              if (\r\n                imageDeclutterMode === 'declutter' &&\r\n                declutterMode === 'declutter'\r\n              ) {\r\n                const render = renderImage && renderText;\r\n                renderImage = render;\r\n                renderText = render;\r\n              }\r\n              if (renderImage) {\r\n                if (imageDeclutterMode !== 'none') {\r\n                  declutterTree.insert(imageDeclutterBox);\r\n                }\r\n                this.replayImageOrLabel_.apply(this, imageArgs);\r\n              }\r\n              if (renderText) {\r\n                if (declutterMode !== 'none') {\r\n                  declutterTree.insert(dimensions.declutterBox);\r\n                }\r\n                this.replayImageOrLabel_.apply(this, args);\r\n              }\r\n            } else {\r\n              this.replayImageOrLabel_.apply(this, args);\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.DRAW_CHARS:\r\n          const begin = /** @type {number} */ (instruction[1]);\r\n          const end = /** @type {number} */ (instruction[2]);\r\n          const baseline = /** @type {number} */ (instruction[3]);\r\n          const overflow = /** @type {number} */ (instruction[4]);\r\n          fillKey = /** @type {string} */ (instruction[5]);\r\n          const maxAngle = /** @type {number} */ (instruction[6]);\r\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\r\n          const offsetY = /** @type {number} */ (instruction[8]);\r\n          strokeKey = /** @type {string} */ (instruction[9]);\r\n          const strokeWidth = /** @type {number} */ (instruction[10]);\r\n          text = /** @type {string} */ (instruction[11]);\r\n          textKey = /** @type {string} */ (instruction[12]);\r\n          const pixelRatioScale = [\r\n            /** @type {number} */ (instruction[13]),\r\n            /** @type {number} */ (instruction[13]),\r\n          ];\r\n          declutterMode = instruction[14] || 'declutter';\r\n\r\n          const textState = this.textStates[textKey];\r\n          const font = textState.font;\r\n          const textScale = [\r\n            textState.scale[0] * measurePixelRatio,\r\n            textState.scale[1] * measurePixelRatio,\r\n          ];\r\n\r\n          let cachedWidths;\r\n          if (font in this.widths_) {\r\n            cachedWidths = this.widths_[font];\r\n          } else {\r\n            cachedWidths = {};\r\n            this.widths_[font] = cachedWidths;\r\n          }\r\n\r\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\r\n          const textLength =\r\n            Math.abs(textScale[0]) *\r\n            measureAndCacheTextWidth(font, text, cachedWidths);\r\n          if (overflow || textLength <= pathLength) {\r\n            const textAlign = this.textStates[textKey].textAlign;\r\n            const startM =\r\n              (pathLength - textLength) * horizontalTextAlign(text, textAlign);\r\n            const parts = drawTextOnPath(\r\n              pixelCoordinates,\r\n              begin,\r\n              end,\r\n              2,\r\n              text,\r\n              startM,\r\n              maxAngle,\r\n              Math.abs(textScale[0]),\r\n              measureAndCacheTextWidth,\r\n              font,\r\n              cachedWidths,\r\n              viewRotationFromTransform ? 0 : this.viewRotation_,\r\n            );\r\n            drawChars: if (parts) {\r\n              /** @type {Array<ReplayImageOrLabelArgs>} */\r\n              const replayImageOrLabelArgs = [];\r\n              let c, cc, chars, label, part;\r\n              if (strokeKey) {\r\n                for (c = 0, cc = parts.length; c < cc; ++c) {\r\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\r\n                  chars = /** @type {string} */ (part[4]);\r\n                  label = this.createLabel(chars, textKey, '', strokeKey);\r\n                  anchorX =\r\n                    /** @type {number} */ (part[2]) +\r\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\r\n                  anchorY =\r\n                    baseline * label.height +\r\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\r\n                      textScale[0] -\r\n                    offsetY;\r\n                  const dimensions = this.calculateImageOrLabelDimensions_(\r\n                    label.width,\r\n                    label.height,\r\n                    part[0],\r\n                    part[1],\r\n                    label.width,\r\n                    label.height,\r\n                    anchorX,\r\n                    anchorY,\r\n                    0,\r\n                    0,\r\n                    part[3],\r\n                    pixelRatioScale,\r\n                    false,\r\n                    defaultPadding,\r\n                    false,\r\n                    feature,\r\n                  );\r\n                  if (\r\n                    declutterTree &&\r\n                    declutterMode === 'declutter' &&\r\n                    declutterTree.collides(dimensions.declutterBox)\r\n                  ) {\r\n                    break drawChars;\r\n                  }\r\n                  replayImageOrLabelArgs.push([\r\n                    context,\r\n                    scaledCanvasSize,\r\n                    label,\r\n                    dimensions,\r\n                    1,\r\n                    null,\r\n                    null,\r\n                  ]);\r\n                }\r\n              }\r\n              if (fillKey) {\r\n                for (c = 0, cc = parts.length; c < cc; ++c) {\r\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\r\n                  chars = /** @type {string} */ (part[4]);\r\n                  label = this.createLabel(chars, textKey, fillKey, '');\r\n                  anchorX = /** @type {number} */ (part[2]);\r\n                  anchorY = baseline * label.height - offsetY;\r\n                  const dimensions = this.calculateImageOrLabelDimensions_(\r\n                    label.width,\r\n                    label.height,\r\n                    part[0],\r\n                    part[1],\r\n                    label.width,\r\n                    label.height,\r\n                    anchorX,\r\n                    anchorY,\r\n                    0,\r\n                    0,\r\n                    part[3],\r\n                    pixelRatioScale,\r\n                    false,\r\n                    defaultPadding,\r\n                    false,\r\n                    feature,\r\n                  );\r\n                  if (\r\n                    declutterTree &&\r\n                    declutterMode === 'declutter' &&\r\n                    declutterTree.collides(dimensions.declutterBox)\r\n                  ) {\r\n                    break drawChars;\r\n                  }\r\n                  replayImageOrLabelArgs.push([\r\n                    context,\r\n                    scaledCanvasSize,\r\n                    label,\r\n                    dimensions,\r\n                    1,\r\n                    null,\r\n                    null,\r\n                  ]);\r\n                }\r\n              }\r\n              if (declutterTree && declutterMode !== 'none') {\r\n                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\r\n              }\r\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\r\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\r\n              }\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.END_GEOMETRY:\r\n          if (featureCallback !== undefined) {\r\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\r\n              instruction[1]\r\n            );\r\n            const result = featureCallback(\r\n              feature,\r\n              currentGeometry,\r\n              declutterMode,\r\n            );\r\n            if (result) {\r\n              return result;\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.FILL:\r\n          if (batchSize) {\r\n            pendingFill++;\r\n          } else {\r\n            this.fill_(context);\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.MOVE_TO_LINE_TO:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = /** @type {number} */ (instruction[2]);\r\n          x = pixelCoordinates[d];\r\n          y = pixelCoordinates[d + 1];\r\n          context.moveTo(x, y);\r\n          prevX = (x + 0.5) | 0;\r\n          prevY = (y + 0.5) | 0;\r\n          for (d += 2; d < dd; d += 2) {\r\n            x = pixelCoordinates[d];\r\n            y = pixelCoordinates[d + 1];\r\n            roundX = (x + 0.5) | 0;\r\n            roundY = (y + 0.5) | 0;\r\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\r\n              context.lineTo(x, y);\r\n              prevX = roundX;\r\n              prevY = roundY;\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.SET_FILL_STYLE:\r\n          lastFillInstruction = instruction;\r\n          this.alignAndScaleFill_ = instruction[2];\r\n\r\n          if (pendingFill) {\r\n            this.fill_(context);\r\n            pendingFill = 0;\r\n            if (pendingStroke) {\r\n              context.stroke();\r\n              pendingStroke = 0;\r\n            }\r\n          }\r\n\r\n          /** @type {import(\"../../colorlike.js\").ColorLike} */\r\n          context.fillStyle = instruction[1];\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.SET_STROKE_STYLE:\r\n          lastStrokeInstruction = instruction;\r\n          if (pendingStroke) {\r\n            context.stroke();\r\n            pendingStroke = 0;\r\n          }\r\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.STROKE:\r\n          if (batchSize) {\r\n            pendingStroke++;\r\n          } else {\r\n            context.stroke();\r\n          }\r\n          ++i;\r\n          break;\r\n        default: // consume the instruction anyway, to avoid an infinite loop\r\n          ++i;\r\n          break;\r\n      }\r\n    }\r\n    if (pendingFill) {\r\n      this.fill_(context);\r\n    }\r\n    if (pendingStroke) {\r\n      context.stroke();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\r\n   */\r\n  execute(\r\n    context,\r\n    scaledCanvasSize,\r\n    transform,\r\n    viewRotation,\r\n    snapToPixel,\r\n    declutterTree,\r\n  ) {\r\n    this.viewRotation_ = viewRotation;\r\n    this.execute_(\r\n      context,\r\n      scaledCanvasSize,\r\n      transform,\r\n      this.instructions,\r\n      snapToPixel,\r\n      undefined,\r\n      undefined,\r\n      declutterTree,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  executeHitDetection(\r\n    context,\r\n    transform,\r\n    viewRotation,\r\n    featureCallback,\r\n    hitExtent,\r\n  ) {\r\n    this.viewRotation_ = viewRotation;\r\n    return this.execute_(\r\n      context,\r\n      [context.canvas.width, context.canvas.height],\r\n      transform,\r\n      this.hitDetectionInstructions,\r\n      true,\r\n      featureCallback,\r\n      hitExtent,\r\n    );\r\n  }\r\n}\r\n\r\nexport default Executor;\r\n", "/**\r\n * @module ol/render/canvas/ExecutorGroup\r\n */\r\n\r\nimport Executor from './Executor.js';\r\nimport {ascending} from '../../array.js';\r\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {isEmpty} from '../../obj.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<import(\"../canvas.js\").BuilderType>}\r\n */\r\nexport const ALL = [\r\n  'Polygon',\r\n  'Circle',\r\n  'LineString',\r\n  'Image',\r\n  'Text',\r\n  'Default',\r\n];\r\n\r\n/**\r\n * @const\r\n * @type {Array<import(\"../canvas.js\").BuilderType>}\r\n */\r\nexport const DECLUTTER = ['Image', 'Text'];\r\n\r\n/**\r\n * @const\r\n * @type {Array<import(\"../canvas.js\").BuilderType>}\r\n */\r\nexport const NON_DECLUTTER = ALL.filter(\r\n  (builderType) => !DECLUTTER.includes(builderType),\r\n);\r\n\r\nclass ExecutorGroup {\r\n  /**\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\r\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\r\n   * should be set here, unless the target context does not exceed that extent (which\r\n   * can be the case when rendering to tiles).\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\r\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\r\n   * The serializable instructions.\r\n   * @param {number} [renderBuffer] Optional rendering buffer.\r\n   * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().\r\n   */\r\n  constructor(\r\n    maxExtent,\r\n    resolution,\r\n    pixelRatio,\r\n    overlaps,\r\n    allInstructions,\r\n    renderBuffer,\r\n    deferredRendering,\r\n  ) {\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent_ = maxExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = overlaps;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.resolution_ = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.renderBuffer_ = renderBuffer;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<string, import(\"./Executor\").default>>}\r\n     */\r\n    this.executorsByZIndex_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.hitDetectionContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.hitDetectionTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.renderedContext_ = null;\r\n\r\n    /**\r\n     * @type {Object<number, Array<import(\"./ZIndexContext.js\").default>>}\r\n     */\r\n    this.deferredZIndexContexts_ = {};\r\n\r\n    this.createExecutors_(allInstructions, deferredRendering);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */\r\n  clip(context, transform) {\r\n    const flatClipCoords = this.getClipCoords(transform);\r\n    context.beginPath();\r\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\r\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\r\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\r\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\r\n    context.clip();\r\n  }\r\n\r\n  /**\r\n   * Create executors and populate them using the provided instructions.\r\n   * @private\r\n   * @param {!Object<string, !Object<string, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\r\n   * @param {boolean} deferredRendering Enable deferred rendering.\r\n   */\r\n  createExecutors_(allInstructions, deferredRendering) {\r\n    for (const zIndex in allInstructions) {\r\n      let executors = this.executorsByZIndex_[zIndex];\r\n      if (executors === undefined) {\r\n        executors = {};\r\n        this.executorsByZIndex_[zIndex] = executors;\r\n      }\r\n      const instructionByZindex = allInstructions[zIndex];\r\n      for (const builderType in instructionByZindex) {\r\n        const instructions = instructionByZindex[builderType];\r\n        executors[builderType] = new Executor(\r\n          this.resolution_,\r\n          this.pixelRatio_,\r\n          this.overlaps_,\r\n          instructions,\r\n          deferredRendering,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\r\n   * @return {boolean} Has executors of the provided types.\r\n   */\r\n  hasExecutors(executors) {\r\n    for (const zIndex in this.executorsByZIndex_) {\r\n      const candidates = this.executorsByZIndex_[zIndex];\r\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\r\n        if (executors[i] in candidates) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\r\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    resolution,\r\n    rotation,\r\n    hitTolerance,\r\n    callback,\r\n    declutteredFeatures,\r\n  ) {\r\n    hitTolerance = Math.round(hitTolerance);\r\n    const contextSize = hitTolerance * 2 + 1;\r\n    const transform = composeTransform(\r\n      this.hitDetectionTransform_,\r\n      hitTolerance + 0.5,\r\n      hitTolerance + 0.5,\r\n      1 / resolution,\r\n      -1 / resolution,\r\n      -rotation,\r\n      -coordinate[0],\r\n      -coordinate[1],\r\n    );\r\n\r\n    const newContext = !this.hitDetectionContext_;\r\n    if (newContext) {\r\n      this.hitDetectionContext_ = createCanvasContext2D(\r\n        contextSize,\r\n        contextSize,\r\n        undefined,\r\n        {willReadFrequently: true},\r\n      );\r\n    }\r\n    const context = this.hitDetectionContext_;\r\n\r\n    if (\r\n      context.canvas.width !== contextSize ||\r\n      context.canvas.height !== contextSize\r\n    ) {\r\n      context.canvas.width = contextSize;\r\n      context.canvas.height = contextSize;\r\n    } else if (!newContext) {\r\n      context.clearRect(0, 0, contextSize, contextSize);\r\n    }\r\n\r\n    /**\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    let hitExtent;\r\n    if (this.renderBuffer_ !== undefined) {\r\n      hitExtent = createEmpty();\r\n      extendCoordinate(hitExtent, coordinate);\r\n      buffer(\r\n        hitExtent,\r\n        resolution * (this.renderBuffer_ + hitTolerance),\r\n        hitExtent,\r\n      );\r\n    }\r\n\r\n    const indexes = getPixelIndexArray(hitTolerance);\r\n\r\n    let builderType;\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {import('../../style/Style.js').DeclutterMode} declutterMode Declutter mode.\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    function featureCallback(feature, geometry, declutterMode) {\r\n      const imageData = context.getImageData(\r\n        0,\r\n        0,\r\n        contextSize,\r\n        contextSize,\r\n      ).data;\r\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\r\n        if (imageData[indexes[i]] > 0) {\r\n          if (\r\n            !declutteredFeatures ||\r\n            declutterMode === 'none' ||\r\n            (builderType !== 'Image' && builderType !== 'Text') ||\r\n            declutteredFeatures.includes(feature)\r\n          ) {\r\n            const idx = (indexes[i] - 3) / 4;\r\n            const x = hitTolerance - (idx % contextSize);\r\n            const y = hitTolerance - ((idx / contextSize) | 0);\r\n            const result = callback(feature, geometry, x * x + y * y);\r\n            if (result) {\r\n              return result;\r\n            }\r\n          }\r\n          context.clearRect(0, 0, contextSize, contextSize);\r\n          break;\r\n        }\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    /** @type {Array<number>} */\r\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\r\n    zs.sort(ascending);\r\n\r\n    let i, j, executors, executor, result;\r\n    for (i = zs.length - 1; i >= 0; --i) {\r\n      const zIndexKey = zs[i].toString();\r\n      executors = this.executorsByZIndex_[zIndexKey];\r\n      for (j = ALL.length - 1; j >= 0; --j) {\r\n        builderType = ALL[j];\r\n        executor = executors[builderType];\r\n        if (executor !== undefined) {\r\n          result = executor.executeHitDetection(\r\n            context,\r\n            transform,\r\n            rotation,\r\n            featureCallback,\r\n            hitExtent,\r\n          );\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @return {Array<number>|null} Clip coordinates.\r\n   */\r\n  getClipCoords(transform) {\r\n    const maxExtent = this.maxExtent_;\r\n    if (!maxExtent) {\r\n      return null;\r\n    }\r\n    const minX = maxExtent[0];\r\n    const minY = maxExtent[1];\r\n    const maxX = maxExtent[2];\r\n    const maxY = maxExtent[3];\r\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\r\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\r\n    return flatClipCoords;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.executorsByZIndex_);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} targetContext Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\r\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\r\n   *     Default is {@link module:ol/render/replay~ALL}\r\n   * @param {import(\"rbush\").default|null} [declutterTree] Declutter tree.\r\n   *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.\r\n   */\r\n  execute(\r\n    targetContext,\r\n    scaledCanvasSize,\r\n    transform,\r\n    viewRotation,\r\n    snapToPixel,\r\n    builderTypes,\r\n    declutterTree,\r\n  ) {\r\n    /** @type {Array<number>} */\r\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\r\n    zs.sort(ascending);\r\n\r\n    builderTypes = builderTypes ? builderTypes : ALL;\r\n    const maxBuilderTypes = ALL.length;\r\n    let i, ii, j, jj, replays;\r\n    if (declutterTree) {\r\n      zs.reverse();\r\n    }\r\n    for (i = 0, ii = zs.length; i < ii; ++i) {\r\n      const zIndexKey = zs[i].toString();\r\n      replays = this.executorsByZIndex_[zIndexKey];\r\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\r\n        const builderType = builderTypes[j];\r\n        const replay = replays[builderType];\r\n        if (replay !== undefined) {\r\n          const zIndexContext =\r\n            declutterTree === null ? undefined : replay.getZIndexContext();\r\n          const context = zIndexContext\r\n            ? zIndexContext.getContext()\r\n            : targetContext;\r\n          const requireClip =\r\n            this.maxExtent_ &&\r\n            builderType !== 'Image' &&\r\n            builderType !== 'Text';\r\n          if (requireClip) {\r\n            context.save();\r\n            // setup clipping so that the parts of over-simplified geometries are not\r\n            // visible outside the current extent when panning\r\n            this.clip(context, transform);\r\n          }\r\n          if (\r\n            !zIndexContext ||\r\n            builderType === 'Text' ||\r\n            builderType === 'Image'\r\n          ) {\r\n            replay.execute(\r\n              context,\r\n              scaledCanvasSize,\r\n              transform,\r\n              viewRotation,\r\n              snapToPixel,\r\n              declutterTree,\r\n            );\r\n          } else {\r\n            zIndexContext.pushFunction((context) =>\r\n              replay.execute(\r\n                context,\r\n                scaledCanvasSize,\r\n                transform,\r\n                viewRotation,\r\n                snapToPixel,\r\n                declutterTree,\r\n              ),\r\n            );\r\n          }\r\n          if (requireClip) {\r\n            context.restore();\r\n          }\r\n          if (zIndexContext) {\r\n            zIndexContext.offset();\r\n            const index = zs[i] * maxBuilderTypes + j;\r\n            if (!this.deferredZIndexContexts_[index]) {\r\n              this.deferredZIndexContexts_[index] = [];\r\n            }\r\n            this.deferredZIndexContexts_[index].push(zIndexContext);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.renderedContext_ = targetContext;\r\n  }\r\n\r\n  getDeferredZIndexContexts() {\r\n    return this.deferredZIndexContexts_;\r\n  }\r\n\r\n  getRenderedContext() {\r\n    return this.renderedContext_;\r\n  }\r\n\r\n  renderDeferred() {\r\n    const deferredZIndexContexts = this.deferredZIndexContexts_;\r\n    const zs = Object.keys(deferredZIndexContexts).map(Number).sort(ascending);\r\n    for (let i = 0, ii = zs.length; i < ii; ++i) {\r\n      deferredZIndexContexts[zs[i]].forEach((zIndexContext) => {\r\n        zIndexContext.draw(this.renderedContext_); // FIXME Pass clip to replay for temporarily enabling clip\r\n        zIndexContext.clear();\r\n      });\r\n      deferredZIndexContexts[zs[i]].length = 0;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This cache is used to store arrays of indexes for calculated pixel circles\r\n * to increase performance.\r\n * It is a static property to allow each Replaygroup to access it.\r\n * @type {Object<number, Array<number>>}\r\n */\r\nconst circlePixelIndexArrayCache = {};\r\n\r\n/**\r\n * This methods creates an array with indexes of all pixels within a circle,\r\n * ordered by how close they are to the center.\r\n * A cache is used to increase performance.\r\n * @param {number} radius Radius.\r\n * @return {Array<number>} An array with indexes within a circle.\r\n */\r\nexport function getPixelIndexArray(radius) {\r\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\r\n    return circlePixelIndexArrayCache[radius];\r\n  }\r\n\r\n  const size = radius * 2 + 1;\r\n  const maxDistanceSq = radius * radius;\r\n  const distances = new Array(maxDistanceSq + 1);\r\n  for (let i = 0; i <= radius; ++i) {\r\n    for (let j = 0; j <= radius; ++j) {\r\n      const distanceSq = i * i + j * j;\r\n      if (distanceSq > maxDistanceSq) {\r\n        break;\r\n      }\r\n      let distance = distances[distanceSq];\r\n      if (!distance) {\r\n        distance = [];\r\n        distances[distanceSq] = distance;\r\n      }\r\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\r\n      if (i > 0) {\r\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\r\n      }\r\n      if (j > 0) {\r\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\r\n        if (i > 0) {\r\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const pixelIndex = [];\r\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\r\n    if (distances[i]) {\r\n      pixelIndex.push(...distances[i]);\r\n    }\r\n  }\r\n\r\n  circlePixelIndexArrayCache[radius] = pixelIndex;\r\n  return pixelIndex;\r\n}\r\n\r\nexport default ExecutorGroup;\r\n", "/**\r\n * @module ol/render/canvas/Immediate\r\n */\r\n// FIXME test, especially polygons with holes and multipolygons\r\n// FIXME need to handle large thick features (where pixel size matters)\r\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\r\n\r\nimport VectorContext from '../VectorContext.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultFont,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n} from '../canvas.js';\r\nimport {equals} from '../../array.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {toFixed} from '../../math.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\r\n\r\n/**\r\n * @classdesc\r\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\r\n * direct rendering of features and geometries to an HTML5 Canvas context.\r\n * Instances of this class are created internally by the library and\r\n * provided to application code as vectorContext member of the\r\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\r\n * render events emitted by layers and maps.\r\n */\r\nclass CanvasImmediateRenderer extends VectorContext {\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\r\n   */\r\n  constructor(\r\n    context,\r\n    pixelRatio,\r\n    extent,\r\n    transform,\r\n    viewRotation,\r\n    squaredTolerance,\r\n    userTransform,\r\n  ) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = context;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.extent_ = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.transform_ = transform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.transformRotation_ = transform\r\n      ? toFixed(Math.atan2(transform[1], transform[0]), 10)\r\n      : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.viewRotation_ = viewRotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.squaredTolerance_ = squaredTolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj.js\").TransformFunction}\r\n     */\r\n    this.userTransform_ = userTransform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.contextFillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.contextStrokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */\r\n    this.contextTextState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.fillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.strokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageAnchorX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageAnchorY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageHeight_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOpacity_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOriginX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOriginY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.imageRotateWithView_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */\r\n    this.imageScale_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageWidth_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.text_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.textRotateWithView_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */\r\n    this.textScale_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.textFillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.textStrokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */\r\n    this.textState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.pixelCoordinates_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.tmpLocalTransform_ = createTransform();\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */\r\n  drawImages_(flatCoordinates, offset, end, stride) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_,\r\n    );\r\n    const context = this.context_;\r\n    const localTransform = this.tmpLocalTransform_;\r\n    const alpha = context.globalAlpha;\r\n    if (this.imageOpacity_ != 1) {\r\n      context.globalAlpha = alpha * this.imageOpacity_;\r\n    }\r\n    let rotation = this.imageRotation_;\r\n    if (this.transformRotation_ === 0) {\r\n      rotation -= this.viewRotation_;\r\n    }\r\n    if (this.imageRotateWithView_) {\r\n      rotation += this.viewRotation_;\r\n    }\r\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\r\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\r\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\r\n      if (\r\n        rotation !== 0 ||\r\n        this.imageScale_[0] != 1 ||\r\n        this.imageScale_[1] != 1\r\n      ) {\r\n        const centerX = x + this.imageAnchorX_;\r\n        const centerY = y + this.imageAnchorY_;\r\n        composeTransform(\r\n          localTransform,\r\n          centerX,\r\n          centerY,\r\n          1,\r\n          1,\r\n          rotation,\r\n          -centerX,\r\n          -centerY,\r\n        );\r\n        context.save();\r\n        context.transform.apply(context, localTransform);\r\n        context.translate(centerX, centerY);\r\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\r\n        context.drawImage(\r\n          this.image_,\r\n          this.imageOriginX_,\r\n          this.imageOriginY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n          -this.imageAnchorX_,\r\n          -this.imageAnchorY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n        );\r\n        context.restore();\r\n      } else {\r\n        context.drawImage(\r\n          this.image_,\r\n          this.imageOriginX_,\r\n          this.imageOriginY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n          x,\r\n          y,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n        );\r\n      }\r\n    }\r\n    if (this.imageOpacity_ != 1) {\r\n      context.globalAlpha = alpha;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */\r\n  drawText_(flatCoordinates, offset, end, stride) {\r\n    if (!this.textState_ || this.text_ === '') {\r\n      return;\r\n    }\r\n    if (this.textFillState_) {\r\n      this.setContextFillState_(this.textFillState_);\r\n    }\r\n    if (this.textStrokeState_) {\r\n      this.setContextStrokeState_(this.textStrokeState_);\r\n    }\r\n    this.setContextTextState_(this.textState_);\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_,\r\n    );\r\n    const context = this.context_;\r\n    let rotation = this.textRotation_;\r\n    if (this.transformRotation_ === 0) {\r\n      rotation -= this.viewRotation_;\r\n    }\r\n    if (this.textRotateWithView_) {\r\n      rotation += this.viewRotation_;\r\n    }\r\n    for (; offset < end; offset += stride) {\r\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\r\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\r\n      if (\r\n        rotation !== 0 ||\r\n        this.textScale_[0] != 1 ||\r\n        this.textScale_[1] != 1\r\n      ) {\r\n        context.save();\r\n        context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\r\n        context.rotate(rotation);\r\n        context.translate(this.textOffsetX_, this.textOffsetY_);\r\n        context.scale(this.textScale_[0], this.textScale_[1]);\r\n        if (this.textStrokeState_) {\r\n          context.strokeText(this.text_, 0, 0);\r\n        }\r\n        if (this.textFillState_) {\r\n          context.fillText(this.text_, 0, 0);\r\n        }\r\n        context.restore();\r\n      } else {\r\n        if (this.textStrokeState_) {\r\n          context.strokeText(this.text_, x, y);\r\n        }\r\n        if (this.textFillState_) {\r\n          context.fillText(this.text_, x, y);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} close Close.\r\n   * @private\r\n   * @return {number} end End.\r\n   */\r\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\r\n    const context = this.context_;\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_,\r\n    );\r\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\r\n    let length = pixelCoordinates.length;\r\n    if (close) {\r\n      length -= 2;\r\n    }\r\n    for (let i = 2; i < length; i += 2) {\r\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\r\n    }\r\n    if (close) {\r\n      context.closePath();\r\n    }\r\n    return end;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */\r\n  drawRings_(flatCoordinates, offset, ends, stride) {\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      offset = this.moveToLineTo_(\r\n        flatCoordinates,\r\n        offset,\r\n        ends[i],\r\n        stride,\r\n        true,\r\n      );\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\r\n   * the current fill and stroke styles.\r\n   *\r\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\r\n   * @api\r\n   */\r\n  drawCircle(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Circle.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.fillState_ || this.strokeState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const pixelCoordinates = transformGeom2D(\r\n        geometry,\r\n        this.transform_,\r\n        this.pixelCoordinates_,\r\n      );\r\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\r\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\r\n      const radius = Math.sqrt(dx * dx + dy * dy);\r\n      const context = this.context_;\r\n      context.beginPath();\r\n      context.arc(\r\n        pixelCoordinates[0],\r\n        pixelCoordinates[1],\r\n        radius,\r\n        0,\r\n        2 * Math.PI,\r\n      );\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the rendering style.  Note that since this is an immediate rendering API,\r\n   * any `zIndex` on the provided style will be ignored.\r\n   *\r\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\r\n   * @api\r\n   */\r\n  setStyle(style) {\r\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\r\n    this.setImageStyle(style.getImage());\r\n    this.setTextStyle(style.getText());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */\r\n  setTransform(transform) {\r\n    this.transform_ = transform;\r\n  }\r\n\r\n  /**\r\n   * Render a geometry into the canvas.  Call\r\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\r\n   *\r\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\r\n   * @api\r\n   */\r\n  drawGeometry(geometry) {\r\n    const type = geometry.getType();\r\n    switch (type) {\r\n      case 'Point':\r\n        this.drawPoint(\r\n          /** @type {import(\"../../geom/Point.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      case 'LineString':\r\n        this.drawLineString(\r\n          /** @type {import(\"../../geom/LineString.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      case 'Polygon':\r\n        this.drawPolygon(\r\n          /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      case 'MultiPoint':\r\n        this.drawMultiPoint(\r\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      case 'MultiLineString':\r\n        this.drawMultiLineString(\r\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n            geometry\r\n          ),\r\n        );\r\n        break;\r\n      case 'MultiPolygon':\r\n        this.drawMultiPolygon(\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ),\r\n        );\r\n        break;\r\n      case 'GeometryCollection':\r\n        this.drawGeometryCollection(\r\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\r\n            geometry\r\n          ),\r\n        );\r\n        break;\r\n      case 'Circle':\r\n        this.drawCircle(\r\n          /** @type {import(\"../../geom/Circle.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\r\n   * style will be ignored - features are rendered immediately in the order that\r\n   * this method is called.  If you need `zIndex` support, you should be using an\r\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\r\n   *\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../../style/Style.js\").default} style Style.\r\n   * @api\r\n   */\r\n  drawFeature(feature, style) {\r\n    const geometry = style.getGeometryFunction()(feature);\r\n    if (!geometry) {\r\n      return;\r\n    }\r\n    this.setStyle(style);\r\n    this.drawGeometry(geometry);\r\n  }\r\n\r\n  /**\r\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\r\n   * uses the current styles appropriate for each geometry in the collection.\r\n   *\r\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\r\n   */\r\n  drawGeometryCollection(geometry) {\r\n    const geometries = geometry.getGeometriesArray();\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      this.drawGeometry(geometries[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\r\n   */\r\n  drawPoint(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Point.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    if (this.image_) {\r\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\r\n   */\r\n  drawMultiPoint(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    if (this.image_) {\r\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a LineString into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\r\n   */\r\n  drawLineString(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/LineString.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_) {\r\n      this.setContextStrokeState_(this.strokeState_);\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getFlatCoordinates();\r\n      context.beginPath();\r\n      this.moveToLineTo_(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        geometry.getStride(),\r\n        false,\r\n      );\r\n      context.stroke();\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatMidpoint = geometry.getFlatMidpoint();\r\n      this.drawText_(flatMidpoint, 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\r\n   * and uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\r\n   */\r\n  drawMultiLineString(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry =\r\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n          geometry.simplifyTransformed(\r\n            this.squaredTolerance_,\r\n            this.userTransform_,\r\n          )\r\n        );\r\n    }\r\n    const geometryExtent = geometry.getExtent();\r\n    if (!intersects(this.extent_, geometryExtent)) {\r\n      return;\r\n    }\r\n    if (this.strokeState_) {\r\n      this.setContextStrokeState_(this.strokeState_);\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getFlatCoordinates();\r\n      let offset = 0;\r\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\r\n      const stride = geometry.getStride();\r\n      context.beginPath();\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        offset = this.moveToLineTo_(\r\n          flatCoordinates,\r\n          offset,\r\n          ends[i],\r\n          stride,\r\n          false,\r\n        );\r\n      }\r\n      context.stroke();\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatMidpoints = geometry.getFlatMidpoints();\r\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\r\n   */\r\n  drawPolygon(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_ || this.fillState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const context = this.context_;\r\n      context.beginPath();\r\n      this.drawRings_(\r\n        geometry.getOrientedFlatCoordinates(),\r\n        0,\r\n        /** @type {Array<number>} */ (geometry.getEnds()),\r\n        geometry.getStride(),\r\n      );\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\r\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\r\n   */\r\n  drawMultiPolygon(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_ || this.fillState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\r\n      let offset = 0;\r\n      const endss = geometry.getEndss();\r\n      const stride = geometry.getStride();\r\n      context.beginPath();\r\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n        const ends = endss[i];\r\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\r\n      }\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\r\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\r\n   * @private\r\n   */\r\n  setContextFillState_(fillState) {\r\n    const context = this.context_;\r\n    const contextFillState = this.contextFillState_;\r\n    if (!contextFillState) {\r\n      context.fillStyle = fillState.fillStyle;\r\n      this.contextFillState_ = {\r\n        fillStyle: fillState.fillStyle,\r\n      };\r\n    } else {\r\n      if (contextFillState.fillStyle != fillState.fillStyle) {\r\n        contextFillState.fillStyle = fillState.fillStyle;\r\n        context.fillStyle = fillState.fillStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\r\n   * @private\r\n   */\r\n  setContextStrokeState_(strokeState) {\r\n    const context = this.context_;\r\n    const contextStrokeState = this.contextStrokeState_;\r\n    if (!contextStrokeState) {\r\n      context.lineCap = strokeState.lineCap;\r\n      context.setLineDash(strokeState.lineDash);\r\n      context.lineDashOffset = strokeState.lineDashOffset;\r\n      context.lineJoin = strokeState.lineJoin;\r\n      context.lineWidth = strokeState.lineWidth;\r\n      context.miterLimit = strokeState.miterLimit;\r\n      context.strokeStyle = strokeState.strokeStyle;\r\n      this.contextStrokeState_ = {\r\n        lineCap: strokeState.lineCap,\r\n        lineDash: strokeState.lineDash,\r\n        lineDashOffset: strokeState.lineDashOffset,\r\n        lineJoin: strokeState.lineJoin,\r\n        lineWidth: strokeState.lineWidth,\r\n        miterLimit: strokeState.miterLimit,\r\n        strokeStyle: strokeState.strokeStyle,\r\n      };\r\n    } else {\r\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\r\n        contextStrokeState.lineCap = strokeState.lineCap;\r\n        context.lineCap = strokeState.lineCap;\r\n      }\r\n      if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\r\n        context.setLineDash(\r\n          (contextStrokeState.lineDash = strokeState.lineDash),\r\n        );\r\n      }\r\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\r\n        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\r\n        context.lineDashOffset = strokeState.lineDashOffset;\r\n      }\r\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\r\n        contextStrokeState.lineJoin = strokeState.lineJoin;\r\n        context.lineJoin = strokeState.lineJoin;\r\n      }\r\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\r\n        contextStrokeState.lineWidth = strokeState.lineWidth;\r\n        context.lineWidth = strokeState.lineWidth;\r\n      }\r\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\r\n        contextStrokeState.miterLimit = strokeState.miterLimit;\r\n        context.miterLimit = strokeState.miterLimit;\r\n      }\r\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\r\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\r\n        context.strokeStyle = strokeState.strokeStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\r\n   * @private\r\n   */\r\n  setContextTextState_(textState) {\r\n    const context = this.context_;\r\n    const contextTextState = this.contextTextState_;\r\n    const textAlign = textState.textAlign\r\n      ? textState.textAlign\r\n      : defaultTextAlign;\r\n    if (!contextTextState) {\r\n      context.font = textState.font;\r\n      context.textAlign = textAlign;\r\n      context.textBaseline = textState.textBaseline;\r\n      this.contextTextState_ = {\r\n        font: textState.font,\r\n        textAlign: textAlign,\r\n        textBaseline: textState.textBaseline,\r\n      };\r\n    } else {\r\n      if (contextTextState.font != textState.font) {\r\n        contextTextState.font = textState.font;\r\n        context.font = textState.font;\r\n      }\r\n      if (contextTextState.textAlign != textAlign) {\r\n        contextTextState.textAlign = textAlign;\r\n        context.textAlign = textAlign;\r\n      }\r\n      if (contextTextState.textBaseline != textState.textBaseline) {\r\n        contextTextState.textBaseline = textState.textBaseline;\r\n        context.textBaseline = textState.textBaseline;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the fill and stroke style for subsequent draw operations.  To clear\r\n   * either fill or stroke styles, pass null for the appropriate parameter.\r\n   *\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {\r\n    if (!fillStyle) {\r\n      this.fillState_ = null;\r\n    } else {\r\n      const fillStyleColor = fillStyle.getColor();\r\n      this.fillState_ = {\r\n        fillStyle: asColorLike(\r\n          fillStyleColor ? fillStyleColor : defaultFillStyle,\r\n        ),\r\n      };\r\n    }\r\n    if (!strokeStyle) {\r\n      this.strokeState_ = null;\r\n    } else {\r\n      const strokeStyleColor = strokeStyle.getColor();\r\n      const strokeStyleLineCap = strokeStyle.getLineCap();\r\n      const strokeStyleLineDash = strokeStyle.getLineDash();\r\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\r\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\r\n      const strokeStyleWidth = strokeStyle.getWidth();\r\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\r\n      const lineDash = strokeStyleLineDash\r\n        ? strokeStyleLineDash\r\n        : defaultLineDash;\r\n      this.strokeState_ = {\r\n        lineCap:\r\n          strokeStyleLineCap !== undefined\r\n            ? strokeStyleLineCap\r\n            : defaultLineCap,\r\n        lineDash:\r\n          this.pixelRatio_ === 1\r\n            ? lineDash\r\n            : lineDash.map((n) => n * this.pixelRatio_),\r\n        lineDashOffset:\r\n          (strokeStyleLineDashOffset\r\n            ? strokeStyleLineDashOffset\r\n            : defaultLineDashOffset) * this.pixelRatio_,\r\n        lineJoin:\r\n          strokeStyleLineJoin !== undefined\r\n            ? strokeStyleLineJoin\r\n            : defaultLineJoin,\r\n        lineWidth:\r\n          (strokeStyleWidth !== undefined\r\n            ? strokeStyleWidth\r\n            : defaultLineWidth) * this.pixelRatio_,\r\n        miterLimit:\r\n          strokeStyleMiterLimit !== undefined\r\n            ? strokeStyleMiterLimit\r\n            : defaultMiterLimit,\r\n        strokeStyle: asColorLike(\r\n          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,\r\n        ),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the image style for subsequent draw operations.  Pass null to remove\r\n   * the image style.\r\n   *\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   */\r\n  setImageStyle(imageStyle) {\r\n    let imageSize;\r\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\r\n      this.image_ = null;\r\n      return;\r\n    }\r\n    const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\r\n    const imageAnchor = imageStyle.getAnchor();\r\n    const imageOrigin = imageStyle.getOrigin();\r\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\r\n    this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\r\n    this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\r\n    this.imageHeight_ = imageSize[1] * imagePixelRatio;\r\n    this.imageOpacity_ = imageStyle.getOpacity();\r\n    this.imageOriginX_ = imageOrigin[0];\r\n    this.imageOriginY_ = imageOrigin[1];\r\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\r\n    this.imageRotation_ = imageStyle.getRotation();\r\n    const imageScale = imageStyle.getScaleArray();\r\n    this.imageScale_ = [\r\n      (imageScale[0] * this.pixelRatio_) / imagePixelRatio,\r\n      (imageScale[1] * this.pixelRatio_) / imagePixelRatio,\r\n    ];\r\n    this.imageWidth_ = imageSize[0] * imagePixelRatio;\r\n  }\r\n\r\n  /**\r\n   * Set the text style for subsequent draw operations.  Pass null to\r\n   * remove the text style.\r\n   *\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   */\r\n  setTextStyle(textStyle) {\r\n    if (!textStyle) {\r\n      this.text_ = '';\r\n    } else {\r\n      const textFillStyle = textStyle.getFill();\r\n      if (!textFillStyle) {\r\n        this.textFillState_ = null;\r\n      } else {\r\n        const textFillStyleColor = textFillStyle.getColor();\r\n        this.textFillState_ = {\r\n          fillStyle: asColorLike(\r\n            textFillStyleColor ? textFillStyleColor : defaultFillStyle,\r\n          ),\r\n        };\r\n      }\r\n      const textStrokeStyle = textStyle.getStroke();\r\n      if (!textStrokeStyle) {\r\n        this.textStrokeState_ = null;\r\n      } else {\r\n        const textStrokeStyleColor = textStrokeStyle.getColor();\r\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\r\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\r\n        const textStrokeStyleLineDashOffset =\r\n          textStrokeStyle.getLineDashOffset();\r\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\r\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\r\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\r\n        this.textStrokeState_ = {\r\n          lineCap:\r\n            textStrokeStyleLineCap !== undefined\r\n              ? textStrokeStyleLineCap\r\n              : defaultLineCap,\r\n          lineDash: textStrokeStyleLineDash\r\n            ? textStrokeStyleLineDash\r\n            : defaultLineDash,\r\n          lineDashOffset: textStrokeStyleLineDashOffset\r\n            ? textStrokeStyleLineDashOffset\r\n            : defaultLineDashOffset,\r\n          lineJoin:\r\n            textStrokeStyleLineJoin !== undefined\r\n              ? textStrokeStyleLineJoin\r\n              : defaultLineJoin,\r\n          lineWidth:\r\n            textStrokeStyleWidth !== undefined\r\n              ? textStrokeStyleWidth\r\n              : defaultLineWidth,\r\n          miterLimit:\r\n            textStrokeStyleMiterLimit !== undefined\r\n              ? textStrokeStyleMiterLimit\r\n              : defaultMiterLimit,\r\n          strokeStyle: asColorLike(\r\n            textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle,\r\n          ),\r\n        };\r\n      }\r\n      const textFont = textStyle.getFont();\r\n      const textOffsetX = textStyle.getOffsetX();\r\n      const textOffsetY = textStyle.getOffsetY();\r\n      const textRotateWithView = textStyle.getRotateWithView();\r\n      const textRotation = textStyle.getRotation();\r\n      const textScale = textStyle.getScaleArray();\r\n      const textText = textStyle.getText();\r\n      const textTextAlign = textStyle.getTextAlign();\r\n      const textTextBaseline = textStyle.getTextBaseline();\r\n      this.textState_ = {\r\n        font: textFont !== undefined ? textFont : defaultFont,\r\n        textAlign:\r\n          textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\r\n        textBaseline:\r\n          textTextBaseline !== undefined\r\n            ? textTextBaseline\r\n            : defaultTextBaseline,\r\n      };\r\n      this.text_ =\r\n        textText !== undefined\r\n          ? Array.isArray(textText)\r\n            ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')\r\n            : textText\r\n          : '';\r\n      this.textOffsetX_ =\r\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\r\n      this.textOffsetY_ =\r\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\r\n      this.textRotateWithView_ =\r\n        textRotateWithView !== undefined ? textRotateWithView : false;\r\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\r\n      this.textScale_ = [\r\n        this.pixelRatio_ * textScale[0],\r\n        this.pixelRatio_ * textScale[1],\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasImmediateRenderer;\r\n", "/**\r\n * @module ol/render/canvas/hitdetect\r\n */\r\n\r\nimport CanvasImmediateRenderer from './Immediate.js';\r\nimport {Icon} from '../../style.js';\r\nimport {ascending} from '../../array.js';\r\nimport {clamp} from '../../math.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  toUserExtent,\r\n} from '../../proj.js';\r\nimport {intersects} from '../../extent.js';\r\n\r\nexport const HIT_DETECT_RESOLUTION = 0.5;\r\n\r\n/**\r\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\r\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\r\n * for rendering features to all worlds of the viewport, from coordinates to css\r\n * pixels.\r\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\r\n * Features to consider for hit detection.\r\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\r\n * Layer style function.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent in render projection.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {number} [squaredTolerance] Squared tolerance.\r\n * @param {import(\"../../proj/Projection.js\").default} [projection] Render projection.\r\n * @return {ImageData} Hit detection image data.\r\n */\r\nexport function createHitDetectionImageData(\r\n  size,\r\n  transforms,\r\n  features,\r\n  styleFunction,\r\n  extent,\r\n  resolution,\r\n  rotation,\r\n  squaredTolerance,\r\n  projection,\r\n) {\r\n  const userExtent = projection ? toUserExtent(extent, projection) : extent;\r\n  const width = size[0] * HIT_DETECT_RESOLUTION;\r\n  const height = size[1] * HIT_DETECT_RESOLUTION;\r\n  const context = createCanvasContext2D(width, height);\r\n  context.imageSmoothingEnabled = false;\r\n  const canvas = context.canvas;\r\n  const renderer = new CanvasImmediateRenderer(\r\n    context,\r\n    HIT_DETECT_RESOLUTION,\r\n    extent,\r\n    null,\r\n    rotation,\r\n    squaredTolerance,\r\n    projection\r\n      ? getTransformFromProjections(getUserProjection(), projection)\r\n      : null,\r\n  );\r\n  const featureCount = features.length;\r\n  // Stretch hit detection index to use the whole available color range\r\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\r\n  const featuresByZIndex = {};\r\n  for (let i = 1; i <= featureCount; ++i) {\r\n    const feature = features[i - 1];\r\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\r\n    if (!featureStyleFunction) {\r\n      continue;\r\n    }\r\n    let styles = featureStyleFunction(feature, resolution);\r\n    if (!styles) {\r\n      continue;\r\n    }\r\n    if (!Array.isArray(styles)) {\r\n      styles = [styles];\r\n    }\r\n    const index = i * indexFactor;\r\n    const color = index.toString(16).padStart(7, '#00000');\r\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\r\n      const originalStyle = styles[j];\r\n      const geometry = originalStyle.getGeometryFunction()(feature);\r\n      if (!geometry || !intersects(userExtent, geometry.getExtent())) {\r\n        continue;\r\n      }\r\n      const style = originalStyle.clone();\r\n      const fill = style.getFill();\r\n      if (fill) {\r\n        fill.setColor(color);\r\n      }\r\n      const stroke = style.getStroke();\r\n      if (stroke) {\r\n        stroke.setColor(color);\r\n        stroke.setLineDash(null);\r\n      }\r\n      style.setText(undefined);\r\n      const image = originalStyle.getImage();\r\n      if (image) {\r\n        const imgSize = image.getImageSize();\r\n        if (!imgSize) {\r\n          continue;\r\n        }\r\n\r\n        const imgContext = createCanvasContext2D(\r\n          imgSize[0],\r\n          imgSize[1],\r\n          undefined,\r\n          {alpha: false},\r\n        );\r\n        const img = imgContext.canvas;\r\n        imgContext.fillStyle = color;\r\n        imgContext.fillRect(0, 0, img.width, img.height);\r\n        style.setImage(\r\n          new Icon({\r\n            img: img,\r\n            anchor: image.getAnchor(),\r\n            anchorXUnits: 'pixels',\r\n            anchorYUnits: 'pixels',\r\n            offset: image.getOrigin(),\r\n            opacity: 1,\r\n            size: image.getSize(),\r\n            scale: image.getScale(),\r\n            rotation: image.getRotation(),\r\n            rotateWithView: image.getRotateWithView(),\r\n          }),\r\n        );\r\n      }\r\n      const zIndex = style.getZIndex() || 0;\r\n      let byGeometryType = featuresByZIndex[zIndex];\r\n      if (!byGeometryType) {\r\n        byGeometryType = {};\r\n        featuresByZIndex[zIndex] = byGeometryType;\r\n        byGeometryType['Polygon'] = [];\r\n        byGeometryType['Circle'] = [];\r\n        byGeometryType['LineString'] = [];\r\n        byGeometryType['Point'] = [];\r\n      }\r\n      const type = geometry.getType();\r\n      if (type === 'GeometryCollection') {\r\n        const geometries =\r\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\r\n            geometry\r\n          ).getGeometriesArrayRecursive();\r\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n          const geometry = geometries[i];\r\n          byGeometryType[geometry.getType().replace('Multi', '')].push(\r\n            geometry,\r\n            style,\r\n          );\r\n        }\r\n      } else {\r\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\r\n      }\r\n    }\r\n  }\r\n\r\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\r\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\r\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\r\n    for (const type in byGeometryType) {\r\n      const geomAndStyle = byGeometryType[type];\r\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\r\n        renderer.setStyle(geomAndStyle[j + 1]);\r\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\r\n          renderer.setTransform(transforms[k]);\r\n          renderer.drawGeometry(geomAndStyle[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return context.getImageData(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\n/**\r\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\r\n * detection canvas in css pixels.\r\n * @param {Array<F>} features Features. Has to\r\n * match the `features` array that was passed to `createHitDetectionImageData()`.\r\n * @param {ImageData} imageData Hit detection image data generated by\r\n * `createHitDetectionImageData()`.\r\n * @return {Array<F>} Features.\r\n * @template {import(\"../../Feature.js\").FeatureLike} F\r\n */\r\nexport function hitDetect(pixel, features, imageData) {\r\n  /** @type {Array<F>} */\r\n  const resultFeatures = [];\r\n  if (imageData) {\r\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\r\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\r\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\r\n    // for browsers returning coordinates slightly larger than the actual canvas size\r\n    // due to a non-integer pixel ratio.\r\n    const index =\r\n      (clamp(x, 0, imageData.width - 1) +\r\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\r\n      4;\r\n    const r = imageData.data[index];\r\n    const g = imageData.data[index + 1];\r\n    const b = imageData.data[index + 2];\r\n    const i = b + 256 * (g + 256 * r);\r\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\r\n    if (i && i % indexFactor === 0) {\r\n      resultFeatures.push(features[i / indexFactor - 1]);\r\n    }\r\n  }\r\n  return resultFeatures;\r\n}\r\n", "/**\r\n * @module ol/renderer/vector\r\n */\r\nimport ImageState from '../ImageState.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * Feature callback. The callback will be called with three arguments. The first\r\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\r\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\r\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\r\n * @template T\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\r\n */\r\n\r\n/**\r\n * Tolerance for geometry simplification in device pixels.\r\n * @type {number}\r\n */\r\nconst SIMPLIFY_TOLERANCE = 0.5;\r\n\r\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/Geometry.js\").Type,\r\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\r\n *                         import(\"../style/Style.js\").default, Object): void>}\r\n */\r\nconst GEOMETRY_RENDERERS = {\r\n  'Point': renderPointGeometry,\r\n  'LineString': renderLineStringGeometry,\r\n  'Polygon': renderPolygonGeometry,\r\n  'MultiPoint': renderMultiPointGeometry,\r\n  'MultiLineString': renderMultiLineStringGeometry,\r\n  'MultiPolygon': renderMultiPolygonGeometry,\r\n  'GeometryCollection': renderGeometryCollectionGeometry,\r\n  'Circle': renderCircleGeometry,\r\n};\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\r\n * @return {number} Order.\r\n */\r\nexport function defaultOrder(feature1, feature2) {\r\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\r\n}\r\n\r\n/**\r\n * @param {number} resolution Resolution.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @return {number} Squared pixel tolerance.\r\n */\r\nexport function getSquaredTolerance(resolution, pixelRatio) {\r\n  const tolerance = getTolerance(resolution, pixelRatio);\r\n  return tolerance * tolerance;\r\n}\r\n\r\n/**\r\n * @param {number} resolution Resolution.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @return {number} Pixel tolerance.\r\n */\r\nexport function getTolerance(resolution, pixelRatio) {\r\n  return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderCircleGeometry(builderGroup, geometry, style, feature, index) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (fillStyle || strokeStyle) {\r\n    const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\r\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    circleReplay.drawCircle(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n * @param {import(\"../proj.js\").TransformFunction} [transform] Transform from user to view projection.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n * @param {number} [index] Render order index..\r\n * @return {boolean} `true` if style is loading.\r\n */\r\nexport function renderFeature(\r\n  replayGroup,\r\n  feature,\r\n  style,\r\n  squaredTolerance,\r\n  listener,\r\n  transform,\r\n  declutter,\r\n  index,\r\n) {\r\n  const loadingPromises = [];\r\n  const imageStyle = style.getImage();\r\n  if (imageStyle) {\r\n    let loading = true;\r\n    const imageState = imageStyle.getImageState();\r\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\r\n      loading = false;\r\n    } else {\r\n      if (imageState == ImageState.IDLE) {\r\n        imageStyle.load();\r\n      }\r\n    }\r\n    if (loading) {\r\n      loadingPromises.push(imageStyle.ready());\r\n    }\r\n  }\r\n  const fillStyle = style.getFill();\r\n  if (fillStyle && fillStyle.loading()) {\r\n    loadingPromises.push(fillStyle.ready());\r\n  }\r\n  const loading = loadingPromises.length > 0;\r\n  if (loading) {\r\n    Promise.all(loadingPromises).then(() => listener(null));\r\n  }\r\n  renderFeatureInternal(\r\n    replayGroup,\r\n    feature,\r\n    style,\r\n    squaredTolerance,\r\n    transform,\r\n    declutter,\r\n    index,\r\n  );\r\n\r\n  return loading;\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n * @param {number} [index] Render order index..\r\n */\r\nfunction renderFeatureInternal(\r\n  replayGroup,\r\n  feature,\r\n  style,\r\n  squaredTolerance,\r\n  transform,\r\n  declutter,\r\n  index,\r\n) {\r\n  const geometry = style.getGeometryFunction()(feature);\r\n  if (!geometry) {\r\n    return;\r\n  }\r\n  const simplifiedGeometry = geometry.simplifyTransformed(\r\n    squaredTolerance,\r\n    transform,\r\n  );\r\n  const renderer = style.getRenderer();\r\n  if (renderer) {\r\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature, index);\r\n  } else {\r\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\r\n    geometryRenderer(\r\n      replayGroup,\r\n      simplifiedGeometry,\r\n      style,\r\n      feature,\r\n      index,\r\n      declutter,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderGeometry(replayGroup, geometry, style, feature, index) {\r\n  if (geometry.getType() == 'GeometryCollection') {\r\n    const geometries =\r\n      /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\r\n        geometry\r\n      ).getGeometries();\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      renderGeometry(replayGroup, geometries[i], style, feature, index);\r\n    }\r\n    return;\r\n  }\r\n  const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\r\n  replay.drawCustom(\r\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry),\r\n    feature,\r\n    style.getRenderer(),\r\n    style.getHitDetectionRenderer(),\r\n    index,\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderGeometryCollectionGeometry(\r\n  replayGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup,\r\n  index,\r\n) {\r\n  const geometries = geometry.getGeometriesArray();\r\n  let i, ii;\r\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n    const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\r\n    geometryRenderer(\r\n      replayGroup,\r\n      geometries[i],\r\n      style,\r\n      feature,\r\n      declutterBuilderGroup,\r\n      index,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderLineStringGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n) {\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle) {\r\n    const lineStringReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      'LineString',\r\n    );\r\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\r\n    lineStringReplay.drawLineString(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderMultiLineStringGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n) {\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle) {\r\n    const lineStringReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      'LineString',\r\n    );\r\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\r\n    lineStringReplay.drawMultiLineString(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderMultiPolygonGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle || fillStyle) {\r\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\r\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    polygonReplay.drawMultiPolygon(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n */\r\nfunction renderPointGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n  declutter,\r\n) {\r\n  const imageStyle = style.getImage();\r\n  const textStyle = style.getText();\r\n  const hasText = textStyle && textStyle.getText();\r\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\r\n  const declutterImageWithText =\r\n    declutter && imageStyle && hasText ? {} : undefined;\r\n  if (imageStyle) {\r\n    if (imageStyle.getImageState() != ImageState.LOADED) {\r\n      return;\r\n    }\r\n    const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\r\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n    imageReplay.drawPoint(geometry, feature, index);\r\n  }\r\n  if (hasText) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n */\r\nfunction renderMultiPointGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n  declutter,\r\n) {\r\n  const imageStyle = style.getImage();\r\n  const hasImage = imageStyle && imageStyle.getOpacity() !== 0;\r\n  const textStyle = style.getText();\r\n  const hasText = textStyle && textStyle.getText();\r\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\r\n  const declutterImageWithText =\r\n    declutter && hasImage && hasText ? {} : undefined;\r\n  if (hasImage) {\r\n    if (imageStyle.getImageState() != ImageState.LOADED) {\r\n      return;\r\n    }\r\n    const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\r\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n    imageReplay.drawMultiPoint(geometry, feature, index);\r\n  }\r\n  if (hasText) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderPolygonGeometry(builderGroup, geometry, style, feature, index) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (fillStyle || strokeStyle) {\r\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\r\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    polygonReplay.drawPolygon(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n", "/**\r\n * @module ol/renderer/canvas/VectorLayer\r\n */\r\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\r\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\r\nimport ExecutorGroup, {\r\n  ALL,\r\n  DECLUTTER,\r\n  NON_DECLUTTER,\r\n} from '../../render/canvas/ExecutorGroup.js';\r\nimport RenderEventType from '../../render/EventType.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {\r\n  HIT_DETECT_RESOLUTION,\r\n  createHitDetectionImageData,\r\n  hitDetect,\r\n} from '../../render/canvas/hitdetect.js';\r\nimport {\r\n  buffer,\r\n  containsExtent,\r\n  createEmpty,\r\n  getHeight,\r\n  getWidth,\r\n  intersects as intersectsExtent,\r\n  wrapX as wrapExtentX,\r\n} from '../../extent.js';\r\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\r\nimport {\r\n  defaultOrder as defaultRenderOrder,\r\n  getTolerance as getRenderTolerance,\r\n  getSquaredTolerance as getSquaredRenderTolerance,\r\n  renderFeature,\r\n} from '../vector.js';\r\nimport {equals} from '../../array.js';\r\nimport {\r\n  fromUserExtent,\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  toUserExtent,\r\n  toUserResolution,\r\n} from '../../proj.js';\r\nimport {getUid} from '../../util.js';\r\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for vector layers.\r\n * @api\r\n */\r\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\r\n   */\r\n  constructor(vectorLayer) {\r\n    super(vectorLayer);\r\n\r\n    /** @private */\r\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.animatingOrInteracting_;\r\n\r\n    /**\r\n     * @type {ImageData|null}\r\n     */\r\n    this.hitDetectionImageData_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.clipped_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../../Feature.js\").default>}\r\n     */\r\n    this.renderedFeatures_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedResolution_ = NaN;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.renderedExtent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.wrappedRenderedExtent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../coordinate\").Coordinate}\r\n     */\r\n    this.renderedCenter_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj/Projection\").default}\r\n     */\r\n    this.renderedProjection_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedPixelRatio_ = 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\r\n     */\r\n    this.renderedRenderOrder_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderedFrameDeclutter_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\r\n     */\r\n    this.replayGroup_ = null;\r\n\r\n    /**\r\n     * A new replay group had to be created by `prepareFrame()`\r\n     * @type {boolean}\r\n     */\r\n    this.replayGroupChanged = true;\r\n\r\n    /**\r\n     * Clipping to be performed by `renderFrame()`\r\n     * @type {boolean}\r\n     */\r\n    this.clipping = true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.targetContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.opacity_ = 1;\r\n  }\r\n\r\n  /**\r\n   * @param {ExecutorGroup} executorGroup Executor group.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {boolean} [declutterable] `true` to only render declutterable items,\r\n   *     `false` to only render non-declutterable items, `undefined` to render all.\r\n   */\r\n  renderWorlds(executorGroup, frameState, declutterable) {\r\n    const extent = frameState.extent;\r\n    const viewState = frameState.viewState;\r\n    const center = viewState.center;\r\n    const resolution = viewState.resolution;\r\n    const projection = viewState.projection;\r\n    const rotation = viewState.rotation;\r\n    const projectionExtent = projection.getExtent();\r\n    const vectorSource = this.getLayer().getSource();\r\n    const declutter = this.getLayer().getDeclutter();\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewHints = frameState.viewHints;\r\n    const snapToPixel = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n    const context = this.context;\r\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\r\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\r\n\r\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\r\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\r\n    const endWorld = multiWorld\r\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\r\n      : 1;\r\n    let world = multiWorld\r\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\r\n      : 0;\r\n    do {\r\n      let transform = this.getRenderTransform(\r\n        center,\r\n        resolution,\r\n        0,\r\n        pixelRatio,\r\n        width,\r\n        height,\r\n        world * worldWidth,\r\n      );\r\n      if (frameState.declutter) {\r\n        transform = transform.slice(0);\r\n      }\r\n      executorGroup.execute(\r\n        context,\r\n        [context.canvas.width, context.canvas.height],\r\n        transform,\r\n        rotation,\r\n        snapToPixel,\r\n        declutterable === undefined\r\n          ? ALL\r\n          : declutterable\r\n            ? DECLUTTER\r\n            : NON_DECLUTTER,\r\n        declutterable\r\n          ? declutter && frameState.declutter[declutter]\r\n          : undefined,\r\n      );\r\n    } while (++world < endWorld);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  setDrawContext_() {\r\n    if (this.opacity_ !== 1) {\r\n      this.targetContext_ = this.context;\r\n      this.context = createCanvasContext2D(\r\n        this.context.canvas.width,\r\n        this.context.canvas.height,\r\n        canvasPool,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  resetDrawContext_() {\r\n    if (this.opacity_ !== 1) {\r\n      const alpha = this.targetContext_.globalAlpha;\r\n      this.targetContext_.globalAlpha = this.opacity_;\r\n      this.targetContext_.drawImage(this.context.canvas, 0, 0);\r\n      this.targetContext_.globalAlpha = alpha;\r\n      releaseCanvas(this.context);\r\n      canvasPool.push(this.context.canvas);\r\n      this.context = this.targetContext_;\r\n      this.targetContext_ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeclutter(frameState) {\r\n    if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {\r\n      return;\r\n    }\r\n    this.renderWorlds(this.replayGroup_, frameState, true);\r\n  }\r\n\r\n  /**\r\n   * Render deferred instructions.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeferredInternal(frameState) {\r\n    if (!this.replayGroup_) {\r\n      return;\r\n    }\r\n    this.replayGroup_.renderDeferred();\r\n    if (this.clipped_) {\r\n      this.context.restore();\r\n    }\r\n    this.resetDrawContext_();\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement|null} target Target that may be used to render content to.\r\n   * @return {HTMLElement|null} The rendered element.\r\n   */\r\n  renderFrame(frameState, target) {\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    this.opacity_ = layerState.opacity;\r\n    const viewState = frameState.viewState;\r\n\r\n    this.prepareContainer(frameState, target);\r\n    const context = this.context;\r\n\r\n    const replayGroup = this.replayGroup_;\r\n    let render = replayGroup && !replayGroup.isEmpty();\r\n    if (!render) {\r\n      const hasRenderListeners =\r\n        this.getLayer().hasListener(RenderEventType.PRERENDER) ||\r\n        this.getLayer().hasListener(RenderEventType.POSTRENDER);\r\n      if (!hasRenderListeners) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    this.setDrawContext_();\r\n\r\n    this.preRender(context, frameState);\r\n\r\n    const projection = viewState.projection;\r\n\r\n    // clipped rendering if layer extent is set\r\n    this.clipped_ = false;\r\n    if (render && layerState.extent && this.clipping) {\r\n      const layerExtent = fromUserExtent(layerState.extent, projection);\r\n      render = intersectsExtent(layerExtent, frameState.extent);\r\n      this.clipped_ = render && !containsExtent(layerExtent, frameState.extent);\r\n      if (this.clipped_) {\r\n        this.clipUnrotated(context, frameState, layerExtent);\r\n      }\r\n    }\r\n\r\n    if (render) {\r\n      this.renderWorlds(\r\n        replayGroup,\r\n        frameState,\r\n        this.getLayer().getDeclutter() ? false : undefined,\r\n      );\r\n    }\r\n\r\n    if (!frameState.declutter && this.clipped_) {\r\n      context.restore();\r\n    }\r\n\r\n    this.postRender(context, frameState);\r\n\r\n    if (this.renderedRotation_ !== viewState.rotation) {\r\n      this.renderedRotation_ = viewState.rotation;\r\n      this.hitDetectionImageData_ = null;\r\n    }\r\n    if (!frameState.declutter) {\r\n      this.resetDrawContext_();\r\n    }\r\n    return this.container;\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\r\n   * that resolves with an array of features.\r\n   */\r\n  getFeatures(pixel) {\r\n    return new Promise((resolve) => {\r\n      if (\r\n        this.frameState &&\r\n        !this.hitDetectionImageData_ &&\r\n        !this.animatingOrInteracting_\r\n      ) {\r\n        const size = this.frameState.size.slice();\r\n        const center = this.renderedCenter_;\r\n        const resolution = this.renderedResolution_;\r\n        const rotation = this.renderedRotation_;\r\n        const projection = this.renderedProjection_;\r\n        const extent = this.wrappedRenderedExtent_;\r\n        const layer = this.getLayer();\r\n        const transforms = [];\r\n        const width = size[0] * HIT_DETECT_RESOLUTION;\r\n        const height = size[1] * HIT_DETECT_RESOLUTION;\r\n        transforms.push(\r\n          this.getRenderTransform(\r\n            center,\r\n            resolution,\r\n            rotation,\r\n            HIT_DETECT_RESOLUTION,\r\n            width,\r\n            height,\r\n            0,\r\n          ).slice(),\r\n        );\r\n        const source = layer.getSource();\r\n        const projectionExtent = projection.getExtent();\r\n        if (\r\n          source.getWrapX() &&\r\n          projection.canWrapX() &&\r\n          !containsExtent(projectionExtent, extent)\r\n        ) {\r\n          let startX = extent[0];\r\n          const worldWidth = getWidth(projectionExtent);\r\n          let world = 0;\r\n          let offsetX;\r\n          while (startX < projectionExtent[0]) {\r\n            --world;\r\n            offsetX = worldWidth * world;\r\n            transforms.push(\r\n              this.getRenderTransform(\r\n                center,\r\n                resolution,\r\n                rotation,\r\n                HIT_DETECT_RESOLUTION,\r\n                width,\r\n                height,\r\n                offsetX,\r\n              ).slice(),\r\n            );\r\n            startX += worldWidth;\r\n          }\r\n          world = 0;\r\n          startX = extent[2];\r\n          while (startX > projectionExtent[2]) {\r\n            ++world;\r\n            offsetX = worldWidth * world;\r\n            transforms.push(\r\n              this.getRenderTransform(\r\n                center,\r\n                resolution,\r\n                rotation,\r\n                HIT_DETECT_RESOLUTION,\r\n                width,\r\n                height,\r\n                offsetX,\r\n              ).slice(),\r\n            );\r\n            startX -= worldWidth;\r\n          }\r\n        }\r\n        const userProjection = getUserProjection();\r\n        this.hitDetectionImageData_ = createHitDetectionImageData(\r\n          size,\r\n          transforms,\r\n          this.renderedFeatures_,\r\n          layer.getStyleFunction(),\r\n          extent,\r\n          resolution,\r\n          rotation,\r\n          getSquaredRenderTolerance(resolution, this.renderedPixelRatio_),\r\n          userProjection ? projection : null,\r\n        );\r\n      }\r\n      resolve(\r\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_),\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches,\r\n  ) {\r\n    if (!this.replayGroup_) {\r\n      return undefined;\r\n    }\r\n    const resolution = frameState.viewState.resolution;\r\n    const rotation = frameState.viewState.rotation;\r\n    const layer = this.getLayer();\r\n\r\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\r\n    const features = {};\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {number} distanceSq The squared distance to the click position\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    const featureCallback = function (feature, geometry, distanceSq) {\r\n      const key = getUid(feature);\r\n      const match = features[key];\r\n      if (!match) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        matches.push(\r\n          (features[key] = {\r\n            feature: feature,\r\n            layer: layer,\r\n            geometry: geometry,\r\n            distanceSq: distanceSq,\r\n            callback: callback,\r\n          }),\r\n        );\r\n      } else if (match !== true && distanceSq < match.distanceSq) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          matches.splice(matches.lastIndexOf(match), 1);\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        match.geometry = geometry;\r\n        match.distanceSq = distanceSq;\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    let result;\r\n    const executorGroups = [this.replayGroup_];\r\n    const declutter = this.getLayer().getDeclutter();\r\n    executorGroups.some((executorGroup) => {\r\n      return (result = executorGroup.forEachFeatureAtCoordinate(\r\n        coordinate,\r\n        resolution,\r\n        rotation,\r\n        hitTolerance,\r\n        featureCallback,\r\n        declutter && frameState.declutter[declutter]\r\n          ? frameState.declutter[declutter].all().map((item) => item.value)\r\n          : null,\r\n      ));\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   */\r\n  handleFontsChanged() {\r\n    const layer = this.getLayer();\r\n    if (layer.getVisible() && this.replayGroup_) {\r\n      layer.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle changes in image style state.\r\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\r\n   * @private\r\n   */\r\n  handleStyleImageChange_(event) {\r\n    this.renderIfReadyAndVisible();\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    const vectorLayer = this.getLayer();\r\n    const vectorSource = vectorLayer.getSource();\r\n    if (!vectorSource) {\r\n      return false;\r\n    }\r\n\r\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\r\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\r\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\r\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\r\n\r\n    if (\r\n      (this.ready && !updateWhileAnimating && animating) ||\r\n      (!updateWhileInteracting && interacting)\r\n    ) {\r\n      this.animatingOrInteracting_ = true;\r\n      return true;\r\n    }\r\n    this.animatingOrInteracting_ = false;\r\n\r\n    const frameStateExtent = frameState.extent;\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n    const resolution = viewState.resolution;\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const vectorLayerRevision = vectorLayer.getRevision();\r\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\r\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\r\n\r\n    if (vectorLayerRenderOrder === undefined) {\r\n      vectorLayerRenderOrder = defaultRenderOrder;\r\n    }\r\n\r\n    const center = viewState.center.slice();\r\n    const extent = buffer(\r\n      frameStateExtent,\r\n      vectorLayerRenderBuffer * resolution,\r\n    );\r\n    const renderedExtent = extent.slice();\r\n    const loadExtents = [extent.slice()];\r\n    const projectionExtent = projection.getExtent();\r\n\r\n    if (\r\n      vectorSource.getWrapX() &&\r\n      projection.canWrapX() &&\r\n      !containsExtent(projectionExtent, frameState.extent)\r\n    ) {\r\n      // For the replay group, we need an extent that intersects the real world\r\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\r\n      // to +540°, we add at least 1 world width on each side of the projection\r\n      // extent. If the viewport is wider than the world, we need to add half of\r\n      // the viewport width to make sure we cover the whole viewport.\r\n      const worldWidth = getWidth(projectionExtent);\r\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\r\n      extent[0] = projectionExtent[0] - gutter;\r\n      extent[2] = projectionExtent[2] + gutter;\r\n      wrapCoordinateX(center, projection);\r\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\r\n      // If the extent crosses the date line, we load data for both edges of the worlds\r\n      if (\r\n        loadExtent[0] < projectionExtent[0] &&\r\n        loadExtent[2] < projectionExtent[2]\r\n      ) {\r\n        loadExtents.push([\r\n          loadExtent[0] + worldWidth,\r\n          loadExtent[1],\r\n          loadExtent[2] + worldWidth,\r\n          loadExtent[3],\r\n        ]);\r\n      } else if (\r\n        loadExtent[0] > projectionExtent[0] &&\r\n        loadExtent[2] > projectionExtent[2]\r\n      ) {\r\n        loadExtents.push([\r\n          loadExtent[0] - worldWidth,\r\n          loadExtent[1],\r\n          loadExtent[2] - worldWidth,\r\n          loadExtent[3],\r\n        ]);\r\n      }\r\n    }\r\n\r\n    if (\r\n      this.ready &&\r\n      this.renderedResolution_ == resolution &&\r\n      this.renderedRevision_ == vectorLayerRevision &&\r\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\r\n      this.renderedFrameDeclutter_ === !!frameState.declutter &&\r\n      containsExtent(this.wrappedRenderedExtent_, extent)\r\n    ) {\r\n      if (!equals(this.renderedExtent_, renderedExtent)) {\r\n        this.hitDetectionImageData_ = null;\r\n        this.renderedExtent_ = renderedExtent;\r\n      }\r\n      this.renderedCenter_ = center;\r\n      this.replayGroupChanged = false;\r\n      return true;\r\n    }\r\n\r\n    this.replayGroup_ = null;\r\n\r\n    const replayGroup = new CanvasBuilderGroup(\r\n      getRenderTolerance(resolution, pixelRatio),\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n    );\r\n\r\n    const userProjection = getUserProjection();\r\n    let userTransform;\r\n    if (userProjection) {\r\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\r\n        const extent = loadExtents[i];\r\n        const userExtent = toUserExtent(extent, projection);\r\n        vectorSource.loadFeatures(\r\n          userExtent,\r\n          toUserResolution(resolution, projection),\r\n          userProjection,\r\n        );\r\n      }\r\n      userTransform = getTransformFromProjections(userProjection, projection);\r\n    } else {\r\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\r\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\r\n      }\r\n    }\r\n\r\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\r\n    let ready = true;\r\n    const render =\r\n      /**\r\n       * @param {import(\"../../Feature.js\").default} feature Feature.\r\n       * @param {number} index Index.\r\n       */\r\n      (feature, index) => {\r\n        let styles;\r\n        const styleFunction =\r\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\r\n        if (styleFunction) {\r\n          styles = styleFunction(feature, resolution);\r\n        }\r\n        if (styles) {\r\n          const dirty = this.renderFeature(\r\n            feature,\r\n            squaredTolerance,\r\n            styles,\r\n            replayGroup,\r\n            userTransform,\r\n            this.getLayer().getDeclutter(),\r\n            index,\r\n          );\r\n          ready = ready && !dirty;\r\n        }\r\n      };\r\n\r\n    const userExtent = toUserExtent(extent, projection);\r\n    /** @type {Array<import(\"../../Feature.js\").default>} */\r\n    const features = vectorSource.getFeaturesInExtent(userExtent);\r\n    if (vectorLayerRenderOrder) {\r\n      features.sort(vectorLayerRenderOrder);\r\n    }\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      render(features[i], i);\r\n    }\r\n    this.renderedFeatures_ = features;\r\n    this.ready = ready;\r\n\r\n    const replayGroupInstructions = replayGroup.finish();\r\n    const executorGroup = new ExecutorGroup(\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n      vectorSource.getOverlaps(),\r\n      replayGroupInstructions,\r\n      vectorLayer.getRenderBuffer(),\r\n      !!frameState.declutter,\r\n    );\r\n\r\n    this.renderedResolution_ = resolution;\r\n    this.renderedRevision_ = vectorLayerRevision;\r\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\r\n    this.renderedFrameDeclutter_ = !!frameState.declutter;\r\n    this.renderedExtent_ = renderedExtent;\r\n    this.wrappedRenderedExtent_ = extent;\r\n    this.renderedCenter_ = center;\r\n    this.renderedProjection_ = projection;\r\n    this.renderedPixelRatio_ = pixelRatio;\r\n    this.replayGroup_ = executorGroup;\r\n    this.hitDetectionImageData_ = null;\r\n\r\n    this.replayGroupChanged = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {number} squaredTolerance Squared render tolerance.\r\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\r\n   * @param {boolean} [declutter] Enable decluttering.\r\n   * @param {number} [index] Render order index.\r\n   * @return {boolean} `true` if an image is loading.\r\n   */\r\n  renderFeature(\r\n    feature,\r\n    squaredTolerance,\r\n    styles,\r\n    builderGroup,\r\n    transform,\r\n    declutter,\r\n    index,\r\n  ) {\r\n    if (!styles) {\r\n      return false;\r\n    }\r\n    let loading = false;\r\n    if (Array.isArray(styles)) {\r\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\r\n        loading =\r\n          renderFeature(\r\n            builderGroup,\r\n            feature,\r\n            styles[i],\r\n            squaredTolerance,\r\n            this.boundHandleStyleImageChange_,\r\n            transform,\r\n            declutter,\r\n            index,\r\n          ) || loading;\r\n      }\r\n    } else {\r\n      loading = renderFeature(\r\n        builderGroup,\r\n        feature,\r\n        styles,\r\n        squaredTolerance,\r\n        this.boundHandleStyleImageChange_,\r\n        transform,\r\n        declutter,\r\n        index,\r\n      );\r\n    }\r\n    return loading;\r\n  }\r\n}\r\n\r\nexport default CanvasVectorLayerRenderer;\r\n", "/**\r\n * @module ol/layer/Vector\r\n */\r\nimport BaseVectorLayer from './BaseVector.js';\r\nimport CanvasVectorLayerRenderer from '../renderer/canvas/VectorLayer.js';\r\n\r\n/**\r\n * @template {import('../Feature.js').FeatureLike} FeatureType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {import(\"../source/Vector.js\").default<FeatureType>} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\r\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\r\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\r\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\r\n * layers or groups of layers separately, use different truthy values for `declutter`.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering\r\n * even during animations. Points and labels stay upright on rotated views. For very large\r\n * amounts of vector data, performance may suffer during pan and zoom animations. In this case,\r\n * try {@link module:ol/layer/VectorImage~VectorImageLayer}.\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} FeatureType\r\n * @extends {BaseVectorLayer<import(\"../source/Vector.js\").default<FeatureType>, CanvasVectorLayerRenderer>}\r\n * @api\r\n */\r\nclass VectorLayer extends BaseVectorLayer {\r\n  /**\r\n   * @param {Options<FeatureType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasVectorLayerRenderer(this);\r\n  }\r\n}\r\n\r\nexport default VectorLayer;\r\n"],
  "mappings": "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",
  "names": ["fillInstruction", "p1", "p2", "p3", "measureAndCacheTextWidth", "text", "p1", "p2", "p3", "p4", "fillInstruction", "strokeInstruction", "intersects", "i", "ii", "i", "result", "context", "i", "geometry", "loading", "wrapX", "extent", "userExtent"]
}
